
import 'dart:async';
import 'dart:convert';
import 'dart:math';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:http/http.dart' as http;
import 'package:vector_math/vector_math_64.dart' as VectorMath64;

import 'Models/default_main_movie_model.dart';
import 'Models/default_main_movie_results_model.dart';
import 'Models/default_main_person_model.dart';
import 'Models/default_main_person_results_model.dart';
import 'Models/default_main_tv_show_model.dart';
import 'Models/default_main_tv_show_results_model.dart';

import 'Utils/loading_bar_indicator.dart';
import 'Utils/NewPageTransition.dart';
import 'Utils/custom_curved_navigation_bar.dart';

import 'tv_show_details.dart';

void main() => runApp(MaterialApp(
  title: "Media Base",
  debugShowCheckedModeBanner: false,
  home: MediaBase(),
));

class MediaBase extends StatefulWidget {
  MediaBase({Key key}) : super(key: key);

  _MediaBaseState createState() => _MediaBaseState();
}

class _MediaBaseState extends State<MediaBase> with TickerProviderStateMixin {
  MediaQueryData mediaQueryData;

  double screenWidth;
  double screenHeight;

  int _currentIndex = 1;

  int _currentSliderIndex = 0;

  List<Color> _bgColorList = [
    Colors.green[400],
    Colors.deepPurple[400],
    Colors.blue[400],
  ];

  List _tabBarTextList = ["Tv Shows", "Movies", "Celebrities"];

  List<Widget> iconList(double _size, Color _color) {
    var iconList = List<Widget>();

    iconList.add(Icon(
      Icons.live_tv,
      size: _size,
      color: _color,
    ));
    iconList.add(Icon(
      Icons.movie,
      size: _size,
      color: _color,
    ));
    iconList.add(Icon(
      Icons.people_outline,
      size: _size,
      color: _color,
    ));

    return iconList;
  }

  var _colors = List<Color>();

  var sliderItemDetailsList = List<Map<String, String>>();
  var customSliderItemDetailsList = List<Map<String, String>>();

  AnimationController dragAnimationController;
  AnimationController sliderAnimationController;
  AnimationController sliderEntryAnimationController;
  AnimationController sliderTextEntryAnimationController;

  AnimationController mainPageTextEntryAnimationController;

  AnimationController listItemEntryAnimationController;

  AnimationController popularListItemTextEntryAnimationController;
  AnimationController topRatedListItemTextEntryAnimationController;
  AnimationController releasingTodayListItemTextEntryAnimationController;
  AnimationController nowPlayingListItemTextEntryAnimationController;

  double defaultSlidingValue = 1.0 / 4.0;

  double currentSlidingValue = 1.0 / 4.0;

  var randomSliderPosition = Random();

  var randomSliderPositionsList = List<int>();

  bool _animationStatus = false;

  int endTvRange;
  int beginMovieRange;
  int endMovieRange;
  int beginPersonRange;
  int endPersonRange;
  int beginGameRange;
  int endGameRange;

  Animation<double> heightFactorAnimation;
  Animation<double> cornerRadiusAnimation;
  Animation<double> colorOpacityAnimation;
  Animation<double> opacityAnimation;
  Animation<double> sliderTextEntryAnimation;
  Animation<double> sliderTopCenterOpacityAnimation;

  double collapsedHeightFactor = 0.60;
  double expandedHeightFactor = 0.20;

  double collapsedCornerRadius = 0.0;
  double expandedCornerRadius = 30.0;

  double expandedColorOpacity = 0.0;
  double collapsedColorOpacity = 1.0;

  double expandedOpacity = 1.0;
  double collapsedOpacity = 0.0;

  double collapsedSliderTopCenterOpacity = 0.0;
  double expandedSliderTopCenterOpacity = 0.2;

  PageController mainSliderPageController;
  double mainSliderCurrentPage = 0.0;

  PageController popularPageController;
  double popularCurrentPage = 0.0;

  PageController topRatedPageController;
  double topRatedCurrentPage = 0.0;

  PageController releasingTodayPageController;
  double releasingTodayCurrentPage = 0.0;

  PageController nowPlayingPageController;
  double nowPlayingCurrentPage = 0.0;

  var tvTrendingList = List<DefaultMainTvShowResultsModel>();
  var movieTrendingList = List<DefaultMainMovieResultsModel>();
  var personTrendingList = List<DefaultMainPersonResultsModel>();

  var tvShowPopularList = List<DefaultMainTvShowResultsModel>();
  var tvShowTopRatedList = List<DefaultMainTvShowResultsModel>();
  var tvShowReleasingTodayList = List<DefaultMainTvShowResultsModel>();
  var tvShowNowPlayingList = List<DefaultMainTvShowResultsModel>();

  Future fetchMainSliderItems() async {
    var _sliderItemDetails = List<Map<String, String>>();

    DefaultMainTvShowModel tvResponseModel;
    DefaultMainMovieModel movieResponseModel;
    DefaultMainPersonModel personResponseModel;

    final tvResponse = await http.get(
      Uri.encodeFull(
          'https://api.themoviedb.org/3/trending/tv/day?api_key=63e2f7bc00c513994d63c9be541a08d1'),
      headers: {
        "Accept": "application/json",
      },
    );

    final movieResponse = await http.get(
      Uri.encodeFull(
          'https://api.themoviedb.org/3/trending/movie/day?api_key=63e2f7bc00c513994d63c9be541a08d1'),
      headers: {
        "Accept": "application/json",
      },
    );

    final personResponse = await http.get(
      Uri.encodeFull(
          'https://api.themoviedb.org/3/trending/person/day?api_key=63e2f7bc00c513994d63c9be541a08d1'),
      headers: {
        "Accept": "application/json",
      },
    );

    if (this.mounted) {
      setState(() {
        if (tvResponse.statusCode == 200) {
          tvResponseModel =
              DefaultMainTvShowModel.fromJson(json.decode(tvResponse.body));
        }

        if (movieResponse.statusCode == 200) {
          movieResponseModel =
              DefaultMainMovieModel.fromJson(json.decode(movieResponse.body));
        }

        if (personResponse.statusCode == 200) {
          personResponseModel =
              DefaultMainPersonModel.fromJson(json.decode(personResponse.body));
        }

        if (tvResponseModel != null && tvResponseModel.results.length > 0) {
          tvTrendingList = tvResponseModel.results;
        }

        if (movieResponseModel != null &&
            movieResponseModel.results.length > 0) {
          movieTrendingList = movieResponseModel.results;
        }

        if (personResponseModel != null &&
            personResponseModel.results.length > 0) {
          personTrendingList = personResponseModel.results;
        }

        if (tvTrendingList != null && tvTrendingList.length > 0) {
          for (DefaultMainTvShowResultsModel tvTrending in tvTrendingList) {
            if (tvTrending.name != null &&
                tvTrending.name != "" &&
                tvTrending.backdrop_path != null &&
                tvTrending.backdrop_path != "") {
              if (_sliderItemDetails.length <= 3) {
                _sliderItemDetails.add({
                  "imageUrl": tvTrending.backdrop_path,
                  "name": tvTrending.name
                });
              }
            }
          }

          if (_sliderItemDetails != null && _sliderItemDetails.length > 0) {
            sliderItemDetailsList.addAll(_sliderItemDetails);
            endTvRange = _sliderItemDetails.length;
            beginMovieRange = endTvRange;
            _sliderItemDetails.clear();
          }
        }

        if (movieTrendingList != null && movieTrendingList.length > 0) {
          for (DefaultMainMovieResultsModel movieTrending
          in movieTrendingList) {
            if (movieTrending.title != null &&
                movieTrending.title != "" &&
                movieTrending.backdrop_path != null &&
                movieTrending.backdrop_path != "") {
              if (_sliderItemDetails.length <= 3) {
                _sliderItemDetails.add({
                  "imageUrl": movieTrending.backdrop_path,
                  "name": movieTrending.title
                });
              }
            }
          }

          if (_sliderItemDetails != null && _sliderItemDetails.length > 0) {
            sliderItemDetailsList.addAll(_sliderItemDetails);
            endMovieRange = beginMovieRange + _sliderItemDetails.length;
            beginPersonRange = endMovieRange;
            _sliderItemDetails.clear();
          }
        }

        if (personTrendingList != null && personTrendingList.length > 0) {
          for (DefaultMainPersonResultsModel personTrending
          in personTrendingList) {
            if (personTrending.name != null &&
                personTrending.name != "" &&
                personTrending.profile_path != null &&
                personTrending.profile_path != "") {
              if (_sliderItemDetails.length <= 3) {
                _sliderItemDetails.add({
                  "imageUrl": personTrending.profile_path,
                  "name": personTrending.name
                });
              }
            }
          }

          if (_sliderItemDetails != null && _sliderItemDetails.length > 0) {
            sliderItemDetailsList.addAll(_sliderItemDetails);
            endPersonRange = beginPersonRange + _sliderItemDetails.length;
            beginGameRange = endPersonRange;
            _sliderItemDetails.clear();
          }
        }

        if (sliderItemDetailsList != null && sliderItemDetailsList.length > 0) {
          if (_currentIndex == 0) {
            customSliderItemDetailsList.clear();
            customSliderItemDetailsList =
                sliderItemDetailsList.sublist(0, endTvRange);

            customSliderItemDetailsList.shuffle();
          } else if (_currentIndex == 1) {
            customSliderItemDetailsList.clear();
            customSliderItemDetailsList =
                sliderItemDetailsList.sublist(beginMovieRange, endMovieRange);

            customSliderItemDetailsList.shuffle();
          } else if (_currentIndex == 2) {
            customSliderItemDetailsList.clear();
            customSliderItemDetailsList =
                sliderItemDetailsList.sublist(beginPersonRange, endPersonRange);

            customSliderItemDetailsList.shuffle();
          }

          if (customSliderItemDetailsList != null &&
              customSliderItemDetailsList.length > 0) {
            for (int i = 0; i < customSliderItemDetailsList.length; i++) {
              randomSliderPositionsList.add(i);
            }

            double sliderLength = customSliderItemDetailsList.length.toDouble();

            defaultSlidingValue = 1.0 / sliderLength;
            currentSlidingValue = 1.0 / sliderLength;
          }
        }
      });
    }
  }

  Future fetchPopularItems(int page) async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/popular?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    DefaultMainTvShowModel defaultTvShowMainModel =
    DefaultMainTvShowModel.fromJson(json.decode(response.body));

    if (this.mounted) {
      setState(() {
        tvShowPopularList.addAll(defaultTvShowMainModel.results);
        tvShowPopularList.shuffle();
      });
    }

    listItemEntryAnimationController.forward();
    popularListItemTextEntryAnimationController.forward();
  }

  Future fetchTopRatedItems() async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/top_rated?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    if (this.mounted) {
      setState(() {
        DefaultMainTvShowModel defaultTvShowMainModel =
        DefaultMainTvShowModel.fromJson(json.decode(response.body));
        tvShowTopRatedList = defaultTvShowMainModel.results;
        tvShowTopRatedList.shuffle();
      });
    }

    topRatedListItemTextEntryAnimationController.forward();
  }

  Future fetchReleasingTodayItems() async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/airing_today?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    if (this.mounted) {
      setState(() {
        DefaultMainTvShowModel defaultTvShowMainModel =
        DefaultMainTvShowModel.fromJson(json.decode(response.body));
        tvShowReleasingTodayList = defaultTvShowMainModel.results;
        tvShowReleasingTodayList.shuffle();
      });
    }

    releasingTodayListItemTextEntryAnimationController.forward();
  }

  Future fetchNowPlayingItems() async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/on_the_air?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    if (this.mounted) {
      setState(() {
        DefaultMainTvShowModel defaultTvShowMainModel =
        DefaultMainTvShowModel.fromJson(json.decode(response.body));
        tvShowNowPlayingList = defaultTvShowMainModel.results;
        tvShowNowPlayingList.shuffle();
      });
    }

    nowPlayingListItemTextEntryAnimationController.forward();
  }

  ScrollController mainTvPageController;

  PageStorageBucket storageBucket = PageStorageBucket();

  @override
  void initState() {
    super.initState();

    this.fetchMainSliderItems();

    mainSliderPageController = PageController();
    mainSliderPageController.addListener(() {
      setState(() {
        mainSliderCurrentPage = mainSliderPageController.page;
      });
    });

    dragAnimationController = AnimationController(
      vsync: this,
    );

    heightFactorAnimation =
        Tween(begin: collapsedHeightFactor, end: expandedHeightFactor)
            .animate(dragAnimationController);

    cornerRadiusAnimation =
        Tween(begin: expandedCornerRadius, end: collapsedCornerRadius)
            .animate(dragAnimationController);

    colorOpacityAnimation =
        Tween(begin: expandedColorOpacity, end: collapsedColorOpacity)
            .animate(dragAnimationController);

    opacityAnimation = Tween(begin: expandedOpacity, end: collapsedOpacity)
        .animate(dragAnimationController);

    sliderTopCenterOpacityAnimation = Tween(
        begin: expandedSliderTopCenterOpacity,
        end: collapsedSliderTopCenterOpacity)
        .animate(dragAnimationController);

    sliderAnimationController = AnimationController(
      duration: Duration(seconds: 60),
      vsync: this,
    );
    sliderAnimationController.forward();

    sliderAnimationController.addStatusListener((status) {
      if (status == AnimationStatus.completed) {
        sliderAnimationController.reverse();
        setState(() {
          _animationStatus = true;
        });
      } else if (status == AnimationStatus.dismissed) {
        sliderAnimationController.forward();
        setState(() {
          _animationStatus = false;
        });
      }
    });

    sliderAnimationController.addListener(() {
      if (sliderAnimationController.value >= defaultSlidingValue) {
        if (_animationStatus) {
          if (sliderAnimationController.value <= currentSlidingValue) {
            if (this.mounted) {
              setState(() {
                currentSlidingValue = currentSlidingValue - defaultSlidingValue;

                randomSliderPositionsList.shuffle();

                int randomSlider = randomSliderPosition
                    .nextInt(randomSliderPositionsList.length - 1);

                mainSliderPageController.animateToPage(
                  randomSliderPositionsList[randomSlider],
                  duration: Duration(seconds: 1),
                  curve: Curves.easeInOutCubic,
                );
              });
            }
          }
        } else {
          if (sliderAnimationController.value > currentSlidingValue) {
            if (this.mounted) {
              setState(() {
                currentSlidingValue = currentSlidingValue + defaultSlidingValue;

                randomSliderPositionsList.shuffle();

                int randomSlider = randomSliderPosition
                    .nextInt(randomSliderPositionsList.length - 1);

                mainSliderPageController.animateToPage(
                  randomSliderPositionsList[randomSlider],
                  duration: Duration(seconds: 1),
                  curve: Curves.easeInOutCubic,
                );
              });
            }
          }
        }
      }
    });

    sliderEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1000),
    );

    sliderEntryAnimationController.forward();

    sliderTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 500),
    );
    sliderTextEntryAnimationController.forward();

    sliderTextEntryAnimation = Tween(
      begin: 0.0,
      end: 1.0,
    ).animate(sliderTextEntryAnimationController);

    mainPageTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 2000),
    );

    mainPageTextEntryAnimationController.forward();

    listItemEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 2000),
    );

    popularListItemTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1000),
    );

    topRatedListItemTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1000),
    );

    releasingTodayListItemTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1000),
    );

    nowPlayingListItemTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1000),
    );

    Timer(Duration(seconds: 2), () {
      this.fetchPopularItems(1);
    });

    Timer(Duration(seconds: 4), () {
      this.fetchTopRatedItems();
    });

    Timer(Duration(seconds: 6), () {
      this.fetchReleasingTodayItems();
    });

    Timer(Duration(seconds: 8), () {
      this.fetchNowPlayingItems();
    });

    popularPageController = PageController();
    popularPageController.addListener(() {
      setState(() {
        popularCurrentPage = popularPageController.page;
      });
    });

    topRatedPageController = PageController();
    topRatedPageController.addListener(() {
      setState(() {
        topRatedCurrentPage = topRatedPageController.page;
      });
    });

    releasingTodayPageController = PageController();
    releasingTodayPageController.addListener(() {
      setState(() {
        releasingTodayCurrentPage = releasingTodayPageController.page;
      });
    });

    nowPlayingPageController = PageController();
    nowPlayingPageController.addListener(() {
      setState(() {
        nowPlayingCurrentPage = nowPlayingPageController.page;
      });
    });

    mainTvPageController = ScrollController();

    _colors.add(Colors.green);
    _colors.add(Colors.blue);
    _colors.add(Colors.yellow);
    _colors.add(Colors.purple);
    _colors.add(Colors.deepOrange);
  }

  @override
  void dispose() {
    dragAnimationController.dispose();
    sliderAnimationController.dispose();
    sliderEntryAnimationController.dispose();
    sliderTextEntryAnimationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    mediaQueryData = MediaQuery.of(context);

    screenWidth = mediaQueryData.size.width;
    screenHeight = mediaQueryData.size.height;

    return AnimatedBuilder(
      animation: sliderEntryAnimationController,
      builder: (context, widget) {
        return Scaffold(
          bottomNavigationBar: CustomCurvedNavigationBar(
            index: _currentIndex,
            buttonBackgroundColor: _bgColorList[_currentIndex],
            color: _bgColorList[_currentIndex],
            animationCurve: Curves.easeInOut,
            height: 60.0,
            items: iconList(25.0, Colors.white),
            onTap: (index) {
              if (this.mounted) {
                setState(() {
                  _currentIndex = index;

                  if (sliderItemDetailsList != null &&
                      sliderItemDetailsList.length > 0) {
                    if (_currentIndex == 0) {
                      customSliderItemDetailsList.clear();
                      customSliderItemDetailsList =
                          sliderItemDetailsList.sublist(0, endTvRange);
                      customSliderItemDetailsList.shuffle();
                    } else if (_currentIndex == 1) {
                      customSliderItemDetailsList.clear();
                      customSliderItemDetailsList = sliderItemDetailsList
                          .sublist(beginMovieRange, endMovieRange);
                      customSliderItemDetailsList.shuffle();
                    } else if (_currentIndex == 2) {
                      customSliderItemDetailsList.clear();
                      customSliderItemDetailsList = sliderItemDetailsList
                          .sublist(beginPersonRange, endPersonRange);
                      customSliderItemDetailsList.shuffle();
                    }
                  }
                });
              }

              if (tvShowNowPlayingList != null &&
                  tvShowNowPlayingList.length > 0) {
                tvShowNowPlayingList.shuffle();
              }
              if (tvShowReleasingTodayList != null &&
                  tvShowReleasingTodayList.length > 0) {
                tvShowReleasingTodayList.shuffle();
              }
              if (tvShowPopularList != null && tvShowPopularList.length > 0) {
                tvShowPopularList.shuffle();
              }
              if (tvShowTopRatedList != null && tvShowTopRatedList.length > 0) {
                tvShowTopRatedList.shuffle();
              }

              sliderEntryAnimationController.reset();
              sliderEntryAnimationController.forward();

              sliderTextEntryAnimationController.reset();
              sliderTextEntryAnimationController.forward();

              mainPageTextEntryAnimationController.reset();
              mainPageTextEntryAnimationController.forward();

              listItemEntryAnimationController.reset();
              listItemEntryAnimationController.forward();

              topRatedListItemTextEntryAnimationController.reset();
              topRatedListItemTextEntryAnimationController.forward();

              popularListItemTextEntryAnimationController.reset();
              popularListItemTextEntryAnimationController.forward();

              releasingTodayListItemTextEntryAnimationController.reset();
              releasingTodayListItemTextEntryAnimationController.forward();

              nowPlayingListItemTextEntryAnimationController.reset();
              nowPlayingListItemTextEntryAnimationController.forward();
            },
          ),
          body: Container(
            color: _bgColorList[_currentIndex],
            child: AnimatedBuilder(
              animation: dragAnimationController,
              builder: (context, widget) {
                return Stack(
                  fit: StackFit.expand,
                  children: <Widget>[
                    FractionallySizedBox(
                      alignment: Alignment.topCenter,
                      heightFactor: heightFactorAnimation.value,
                      child: customSliderItemDetailsList == null ||
                          customSliderItemDetailsList.length <= 0
                          ? iconList(
                        80.0,
                        Colors.white.withOpacity(opacityAnimation.value),
                      )[_currentIndex]
                          : PageView.builder(
                        physics: BouncingScrollPhysics(),
                        controller: mainSliderPageController,
                        onPageChanged: (index) {
                          setState(() {
                            _currentSliderIndex = index;
                          });
                          sliderTextEntryAnimationController.reset();
                          sliderTextEntryAnimationController.forward();
                        },
                        itemBuilder: (context, index) {
                          if (customSliderItemDetailsList[index]
                          ["imageUrl"] ==
                              null ||
                              customSliderItemDetailsList[index]
                              ["imageUrl"] ==
                                  "") {
                            return iconList(
                                80.0,
                                Colors.white.withOpacity(opacityAnimation
                                    .value))[_currentIndex];
                          }
                          return AnimatedBuilder(
                            animation: sliderEntryAnimationController,
                            builder: (context, widget) {
                              return buildMainSliderListItems(
                                customSliderItemDetailsList[index],
                                mainSliderCurrentPage,
                                index,
                              );
                            },
                          );
                        },
                        itemCount: customSliderItemDetailsList.length,
                      ),
                    ),
                    FractionallySizedBox(
                      alignment: Alignment.topCenter,
                      heightFactor: expandedHeightFactor - 0.01,
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: <Widget>[
                          Expanded(
                            flex: 1,
                            child: Container(
                              child: Icon(
                                Icons.menu,
                                color: Colors.white,
                              ),
                            ),
                          ),
                          Expanded(
                            flex: 5,
                            child: Container(
                              padding: EdgeInsets.only(
                                left: 15.0,
                                bottom: 6.0,
                              ),
                              child: Text(
                                _tabBarTextList[_currentIndex],
                                textAlign: TextAlign.start,
                                style: TextStyle(
                                  fontFamily: "ConcertOne-Regular",
                                  color: Colors.white,
                                  fontSize: 20,
                                ),
                              ),
                            ),
                          ),
                          Expanded(
                            flex: 1,
                            child: Container(
                              child: Icon(
                                Icons.search,
                                color: Colors.white,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                    FractionallySizedBox(
                      alignment: Alignment.bottomCenter,
                      heightFactor: 1.16 - heightFactorAnimation.value,
                      child: _currentSliderIndex == null ||
                          customSliderItemDetailsList == null ||
                          customSliderItemDetailsList.length <= 0
                          ? Container()
                          : AnimatedBuilder(
                        animation: sliderTextEntryAnimationController,
                        builder: (context, widget) {
                          return Opacity(
                            opacity: sliderTextEntryAnimation.value,
                            child: Container(
                              decoration: BoxDecoration(
                                gradient: LinearGradient(
                                  begin: Alignment.center,
                                  end: Alignment.topCenter,
                                  colors: [
                                    Colors.black.withOpacity(
                                        opacityAnimation.value),
                                    Colors.black.withOpacity(
                                      sliderTopCenterOpacityAnimation
                                          .value,
                                    ),
                                  ],
                                ),
                              ),
                              child: Opacity(
                                opacity: opacityAnimation.value,
                                child: Column(
                                  crossAxisAlignment:
                                  CrossAxisAlignment.center,
                                  children: <Widget>[
                                    Container(
                                      alignment: Alignment.topCenter,
                                      child: Text(
                                        _currentSliderIndex == null
                                            ? ""
                                            : customSliderItemDetailsList[
                                        _currentSliderIndex]
                                        ["name"] ==
                                            null ||
                                            customSliderItemDetailsList[
                                            _currentSliderIndex]
                                            ["name"] ==
                                                ""
                                            ? ""
                                            : customSliderItemDetailsList[
                                        _currentSliderIndex]
                                        ["name"],
                                        maxLines: 1,
                                        textAlign: TextAlign.center,
                                        style: TextStyle(
                                          fontFamily:
                                          "ConcertOne-Regular",
                                          color: Colors.white.withOpacity(
                                              sliderTextEntryAnimation
                                                  .value),
                                          fontSize: 20,
                                        ),
                                      ),
                                    ),
                                    _currentSliderIndex == null ||
                                        customSliderItemDetailsList ==
                                            null ||
                                        customSliderItemDetailsList
                                            .length <=
                                            0
                                        ? Container()
                                        : Expanded(
                                      child: Container(
                                        width: screenWidth - 245,
                                        margin:
                                        EdgeInsets.all(10.0),
                                        child: ListView.builder(
                                          scrollDirection:
                                          Axis.horizontal,
                                          itemBuilder:
                                              (context, index) {
                                            if (_currentSliderIndex ==
                                                index) {
                                              return GestureDetector(
                                                onTap: () {
                                                  mainSliderPageController
                                                      .animateToPage(
                                                    index,
                                                    duration:
                                                    Duration(
                                                        seconds:
                                                        1),
                                                    curve: Curves
                                                        .easeInOutCubic,
                                                  );
                                                },
                                                child: Align(
                                                  alignment:
                                                  Alignment
                                                      .topCenter,
                                                  child:
                                                  AnimatedContainer(
                                                    duration: Duration(
                                                        milliseconds:
                                                        300),
                                                    height: 10.0,
                                                    width: 10.0,
                                                    margin:
                                                    EdgeInsets
                                                        .only(
                                                      left: 10.0,
                                                      right: 10.0,
                                                      top: 5.0,
                                                    ),
                                                    decoration: BoxDecoration(
                                                        shape: BoxShape
                                                            .circle,
                                                        color: Colors
                                                            .white,
                                                        boxShadow: [
                                                          BoxShadow(
                                                            color: Colors
                                                                .white,
                                                            spreadRadius:
                                                            1.0,
                                                          ),
                                                        ]),
                                                  ),
                                                ),
                                              );
                                            } else {
                                              return GestureDetector(
                                                onTap: () {
                                                  mainSliderPageController
                                                      .animateToPage(
                                                    index,
                                                    duration:
                                                    Duration(
                                                        seconds:
                                                        1),
                                                    curve: Curves
                                                        .easeInOutCubic,
                                                  );
                                                },
                                                child: Align(
                                                  alignment:
                                                  Alignment
                                                      .topCenter,
                                                  child:
                                                  AnimatedContainer(
                                                    duration: Duration(
                                                        milliseconds:
                                                        400),
                                                    height: 8.0,
                                                    width: 8.0,
                                                    margin: EdgeInsets
                                                        .all(10.0),
                                                    decoration:
                                                    BoxDecoration(
                                                      shape: BoxShape
                                                          .circle,
                                                      border: Border
                                                          .all(
                                                        width: 1.0,
                                                        color: Colors
                                                            .white,
                                                      ),
                                                    ),
                                                  ),
                                                ),
                                              );
                                            }
                                          },
                                          itemCount:
                                          customSliderItemDetailsList
                                              .length,
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          );
                        },
                      ),
                    ),
                    FractionallySizedBox(
                      alignment: Alignment.bottomCenter,
                      heightFactor: 1.05 - heightFactorAnimation.value,
                      child: Container(
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.only(
                            topLeft:
                            Radius.circular(cornerRadiusAnimation.value),
                            topRight:
                            Radius.circular(cornerRadiusAnimation.value),
                          ),
                        ),
                        child: buildMainPageItems(0),
                      ),
                    ),
                  ],
                );
              },
            ),
          ),
        );
      },
    );
  }

  Widget buildMainSliderListItems(Map<String, String> sliderDetails,
      double mainSliderCurrentPage, int index) {
    if (index == mainSliderCurrentPage.floor()) {
      return Container(
        transform: Matrix4.identity()
          ..setFromTranslationRotationScale(
            VectorMath64.Vector3(
              -screenWidth * (index - mainSliderCurrentPage),
              0.0,
              0.0,
            ),
            VectorMath64.Quaternion(
              0.0,
              0.0,
              0.0,
              0.0,
            ),
            VectorMath64.Vector3(
              1 - (mainSliderCurrentPage - index),
              1,
              1,
            ),
          ),
        decoration: BoxDecoration(
          image: DecorationImage(
            image: NetworkImage(
              sliderDetails["imageUrl"],
            ),
            fit: BoxFit.cover,
            colorFilter: ColorFilter.mode(
              _bgColorList[_currentIndex]
                  .withOpacity(colorOpacityAnimation.value),
              BlendMode.srcOver,
            ),
          ),
        ),
        child: Container(
          color: Colors.white
              .withOpacity(1 - sliderEntryAnimationController.value),
        ),
      );
    } else if (index == mainSliderCurrentPage.floor() + 1) {
      return Container(
        transform: Matrix4.identity()
          ..setEntry(3, 0, 0.006 * -(mainSliderCurrentPage - index)),
        decoration: BoxDecoration(
          image: DecorationImage(
            image: NetworkImage(
              sliderDetails["imageUrl"],
            ),
            fit: BoxFit.cover,
            colorFilter: ColorFilter.mode(
              _bgColorList[_currentIndex]
                  .withOpacity(colorOpacityAnimation.value),
              BlendMode.srcOver,
            ),
          ),
        ),
        child: Container(
          color: Colors.white
              .withOpacity(1 - sliderEntryAnimationController.value),
        ),
      );
    } else {
      return Container(
        decoration: BoxDecoration(
          image: DecorationImage(
            image: NetworkImage(
              sliderDetails["imageUrl"],
            ),
            fit: BoxFit.cover,
            colorFilter: ColorFilter.mode(
              _bgColorList[_currentIndex]
                  .withOpacity(colorOpacityAnimation.value),
              BlendMode.srcOver,
            ),
          ),
        ),
        child: Container(
          color: Colors.white
              .withOpacity(1.0 - sliderEntryAnimationController.value),
        ),
      );
    }
  }

  PageStorage buildMainPageItems(int currentPage) {
    var pageStorageList = List<PageStorage>();

    pageStorageList.add(
      PageStorage(
        bucket: storageBucket,
        child: NotificationListener(
          onNotification: (scrollNotification) {
            if (scrollNotification is ScrollUpdateNotification) {
              if (scrollNotification.metrics.axis == Axis.vertical) {
                if (scrollNotification.metrics.pixels <
                    screenHeight -
                        scrollNotification.metrics.viewportDimension) {
                  double fractionalDragged =
                      scrollNotification.scrollDelta / screenHeight;
                  dragAnimationController.value =
                      dragAnimationController.value + (5 * fractionalDragged);
                }
              }
            }
          },
          child: Column(
            key: PageStorageKey("tv_index1"),
            children: <Widget>[
              Container(
                margin: EdgeInsets.only(
                  top: 15,
                  left: 10.0,
                  bottom: 10.0,
                  right: 15.0,
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    AnimatedBuilder(
                      animation: mainPageTextEntryAnimationController,
                      builder: (context, wdiget) {
                        return Text(
                          "Most Popular",
                          textAlign: TextAlign.start,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 18,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w500,
                            letterSpacing: 0.3,
                            color: Colors.black.withOpacity(
                                mainPageTextEntryAnimationController.value),
                          ),
                        );
                      },
                    ),
                    Expanded(
                      child: Container(
                        margin: EdgeInsets.only(top: 10.0),
                        child: Text(
                          "View more >",
                          textAlign: TextAlign.end,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 14,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w100,
                            color: Colors.white.withOpacity(0.0),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              tvShowPopularList == null || tvShowPopularList.length == 0
                  ? Container(
                height: 200,
                color: Colors.transparent,
                child: Center(
                  child: LoadingBarIndicator(
                    numberOfBars: 5,
                    colors: _colors,
                    barSpacing: 5.0,
                    beginTweenValue: 10.0,
                    endTweenValue: 15.0,
                  ),
                ),
              )
                  : AnimatedBuilder(
                animation: listItemEntryAnimationController,
                builder: (context, widget) {
                  return Opacity(
                    opacity: listItemEntryAnimationController.value,
                    child: Transform(
                      transform: Matrix4.identity()
                        ..setEntry(
                            3,
                            0,
                            0.006 *
                                (1 -
                                    listItemEntryAnimationController
                                        .value)),
                      child: Transform.translate(
                        offset: Offset(
                            screenWidth *
                                (1 -
                                    listItemEntryAnimationController
                                        .value),
                            0.0),
                        child: Container(
                          height: 330,
                          color: Colors.transparent,
                          child: PageStorage(
                            bucket: storageBucket,
                            child: PageView.builder(
                              key: PageStorageKey("index1_most_popular"),
                              controller: popularPageController,
                              scrollDirection: Axis.horizontal,
                              physics: BouncingScrollPhysics(),
                              onPageChanged: (index) {
                                popularListItemTextEntryAnimationController
                                    .reset();
                                popularListItemTextEntryAnimationController
                                    .forward();
                              },
                              itemBuilder: (context, index) {
                                if (tvShowPopularList[index] != null) {
                                  if (index ==
                                      popularCurrentPage.floor()) {
                                    return Transform.scale(
                                      scale: (1.0 -
                                          (popularCurrentPage - index)),
                                      child: buildTvShowMainListItems(
                                        tvShowPopularList[index]
                                            .backdrop_path,
                                        tvShowPopularList[index].name,
                                        tvShowPopularList[index].id,
                                        popularListItemTextEntryAnimationController,
                                      ),
                                    );
                                  } else if (index ==
                                      popularCurrentPage.floor() + 1) {
                                    return Transform.scale(
                                      scale: (1.0 +
                                          (popularCurrentPage - index)),
                                      child: buildTvShowMainListItems(
                                        tvShowPopularList[index]
                                            .backdrop_path,
                                        tvShowPopularList[index].name,
                                        tvShowPopularList[index].id,
                                        popularListItemTextEntryAnimationController,
                                      ),
                                    );
                                  } else {
                                    return buildTvShowMainListItems(
                                      tvShowPopularList[index]
                                          .backdrop_path,
                                      tvShowPopularList[index].name,
                                      tvShowPopularList[index].id,
                                      popularListItemTextEntryAnimationController,
                                    );
                                  }
                                } else {
                                  return Container();
                                }
                              },
                              itemCount: tvShowPopularList.length,
                            ),
                          ),
                        ),
                      ),
                    ),
                  );
                },
              ),
              Container(
                height: 1.0,
                margin: EdgeInsets.only(bottom: 10.0),
                decoration: BoxDecoration(
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black,
                    ),
                  ],
                ),
              ),
              Container(
                margin: EdgeInsets.only(
                  top: 15,
                  left: 10.0,
                  bottom: 10.0,
                  right: 15.0,
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    AnimatedBuilder(
                      animation: mainPageTextEntryAnimationController,
                      builder: (context, wdiget) {
                        return Text(
                          "Top Rated",
                          textAlign: TextAlign.start,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 18,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w500,
                            letterSpacing: 0.3,
                            color: Colors.black.withOpacity(
                                mainPageTextEntryAnimationController.value),
                          ),
                        );
                      },
                    ),
                    Expanded(
                      child: Container(
                        margin: EdgeInsets.only(top: 10.0),
                        child: Text(
                          "View more >",
                          textAlign: TextAlign.end,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 14,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w100,
                            color: Colors.white.withOpacity(0.0),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              tvShowTopRatedList == null || tvShowTopRatedList.length == 0
                  ? Container(
                height: 200,
                color: Colors.transparent,
                child: Center(
                  child: LoadingBarIndicator(
                    numberOfBars: 5,
                    colors: _colors,
                    barSpacing: 5.0,
                    beginTweenValue: 10.0,
                    endTweenValue: 15.0,
                  ),
                ),
              )
                  : AnimatedBuilder(
                animation: listItemEntryAnimationController,
                builder: (context, widget) {
                  return Opacity(
                    opacity: listItemEntryAnimationController.value,
                    child: Transform(
                      transform: Matrix4.identity()
                        ..setEntry(
                            3,
                            0,
                            0.006 *
                                (1 -
                                    listItemEntryAnimationController
                                        .value)),
                      child: Transform.translate(
                        offset: Offset(
                            screenWidth *
                                (1 -
                                    listItemEntryAnimationController
                                        .value),
                            0.0),
                        child: Container(
                          height: 330,
                          color: Colors.transparent,
                          child: PageStorage(
                            bucket: storageBucket,
                            child: PageView.builder(
                              key: PageStorageKey("index1_top_rated"),
                              controller: topRatedPageController,
                              scrollDirection: Axis.horizontal,
                              physics: BouncingScrollPhysics(),
                              onPageChanged: (index) {
                                topRatedListItemTextEntryAnimationController
                                    .reset();
                                topRatedListItemTextEntryAnimationController
                                    .forward();
                              },
                              itemBuilder: (context, index) {
                                if (index ==
                                    topRatedCurrentPage.floor()) {
                                  return Transform.scale(
                                    scale: (1.0 -
                                        (topRatedCurrentPage - index)),
                                    child: buildTvShowMainListItems(
                                      tvShowTopRatedList[index]
                                          .backdrop_path,
                                      tvShowTopRatedList[index].name,
                                      tvShowTopRatedList[index].id,
                                      topRatedListItemTextEntryAnimationController,
                                    ),
                                  );
                                } else if (index ==
                                    topRatedCurrentPage.floor() + 1) {
                                  return Transform.scale(
                                    scale: (1.0 +
                                        (topRatedCurrentPage - index)),
                                    child: buildTvShowMainListItems(
                                      tvShowTopRatedList[index]
                                          .backdrop_path,
                                      tvShowTopRatedList[index].name,
                                      tvShowTopRatedList[index].id,
                                      topRatedListItemTextEntryAnimationController,
                                    ),
                                  );
                                } else {
                                  return buildTvShowMainListItems(
                                    tvShowTopRatedList[index]
                                        .backdrop_path,
                                    tvShowTopRatedList[index].name,
                                    tvShowTopRatedList[index].id,
                                    topRatedListItemTextEntryAnimationController,
                                  );
                                }
                              },
                              itemCount: tvShowTopRatedList.length,
                            ),
                          ),
                        ),
                      ),
                    ),
                  );
                },
              ),
              Container(
                height: 1.0,
                margin: EdgeInsets.only(bottom: 10.0),
                decoration: BoxDecoration(
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black,
                    ),
                  ],
                ),
              ),
              Container(
                margin: EdgeInsets.only(
                  top: 15,
                  left: 10.0,
                  bottom: 10.0,
                  right: 15.0,
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    AnimatedBuilder(
                      animation: mainPageTextEntryAnimationController,
                      builder: (context, wdiget) {
                        return Text(
                          "Releasing Today",
                          textAlign: TextAlign.start,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 18,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w500,
                            letterSpacing: 0.3,
                            color: Colors.black.withOpacity(
                                mainPageTextEntryAnimationController.value),
                          ),
                        );
                      },
                    ),
                    Expanded(
                      child: Container(
                        margin: EdgeInsets.only(top: 10.0),
                        child: Text(
                          "View more >",
                          textAlign: TextAlign.end,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 14,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w100,
                            color: Colors.white.withOpacity(0.0),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              tvShowReleasingTodayList == null ||
                  tvShowReleasingTodayList.length == 0
                  ? Container(
                height: 200,
                color: Colors.transparent,
                child: Center(
                  child: LoadingBarIndicator(
                    numberOfBars: 5,
                    colors: _colors,
                    barSpacing: 5.0,
                    beginTweenValue: 10.0,
                    endTweenValue: 15.0,
                  ),
                ),
              )
                  : AnimatedBuilder(
                animation: listItemEntryAnimationController,
                builder: (context, widget) {
                  return Opacity(
                    opacity: listItemEntryAnimationController.value,
                    child: Transform(
                      transform: Matrix4.identity()
                        ..setEntry(
                            3,
                            0,
                            0.006 *
                                (1 -
                                    listItemEntryAnimationController
                                        .value)),
                      child: Transform.translate(
                        offset: Offset(
                            screenWidth *
                                (1 -
                                    listItemEntryAnimationController
                                        .value),
                            0.0),
                        child: Container(
                          height: 330,
                          color: Colors.white,
                          child: PageStorage(
                            bucket: storageBucket,
                            child: PageView.builder(
                              key: PageStorageKey(
                                  "index1_releasing_today"),
                              controller: releasingTodayPageController,
                              scrollDirection: Axis.horizontal,
                              physics: BouncingScrollPhysics(),
                              onPageChanged: (index) {
                                releasingTodayListItemTextEntryAnimationController
                                    .reset();
                                releasingTodayListItemTextEntryAnimationController
                                    .forward();
                              },
                              itemBuilder: (context, index) {
                                if (index ==
                                    releasingTodayCurrentPage.floor()) {
                                  return Transform.scale(
                                    scale: (1.0 -
                                        (releasingTodayCurrentPage -
                                            index)),
                                    child: buildTvShowMainListItems(
                                      tvShowReleasingTodayList[index]
                                          .backdrop_path,
                                      tvShowReleasingTodayList[index]
                                          .name,
                                      tvShowReleasingTodayList[index].id,
                                      releasingTodayListItemTextEntryAnimationController,
                                    ),
                                  );
                                } else if (index ==
                                    releasingTodayCurrentPage.floor() +
                                        1) {
                                  return Transform.scale(
                                    scale: (1.0 +
                                        (releasingTodayCurrentPage -
                                            index)),
                                    child: buildTvShowMainListItems(
                                      tvShowReleasingTodayList[index]
                                          .backdrop_path,
                                      tvShowReleasingTodayList[index]
                                          .name,
                                      tvShowReleasingTodayList[index].id,
                                      releasingTodayListItemTextEntryAnimationController,
                                    ),
                                  );
                                } else {
                                  return buildTvShowMainListItems(
                                    tvShowReleasingTodayList[index]
                                        .backdrop_path,
                                    tvShowReleasingTodayList[index].name,
                                    tvShowReleasingTodayList[index].id,
                                    releasingTodayListItemTextEntryAnimationController,
                                  );
                                }
                              },
                              itemCount: tvShowReleasingTodayList.length,
                            ),
                          ),
                        ),
                      ),
                    ),
                  );
                },
              ),
              Container(
                height: 1.0,
                margin: EdgeInsets.only(bottom: 10.0),
                decoration: BoxDecoration(
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black,
                    ),
                  ],
                ),
              ),
              Container(
                margin: EdgeInsets.only(
                  top: 15,
                  left: 10.0,
                  bottom: 10.0,
                  right: 15.0,
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    AnimatedBuilder(
                      animation: mainPageTextEntryAnimationController,
                      builder: (context, wdiget) {
                        return Text(
                          "Now Playing",
                          textAlign: TextAlign.start,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 18,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w500,
                            letterSpacing: 0.3,
                            color: Colors.black.withOpacity(
                                mainPageTextEntryAnimationController.value),
                          ),
                        );
                      },
                    ),
                    Expanded(
                      child: Container(
                        margin: EdgeInsets.only(top: 10.0),
                        child: Text(
                          "View more >",
                          textAlign: TextAlign.end,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 14,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w100,
                            color: Colors.white.withOpacity(0.0),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              tvShowNowPlayingList == null || tvShowNowPlayingList.length == 0
                  ? Container(
                height: 200,
                color: Colors.transparent,
                child: Center(
                  child: LoadingBarIndicator(
                    numberOfBars: 5,
                    colors: _colors,
                    barSpacing: 5.0,
                    beginTweenValue: 10.0,
                    endTweenValue: 15.0,
                  ),
                ),
              )
                  : AnimatedBuilder(
                animation: listItemEntryAnimationController,
                builder: (context, widget) {
                  return Opacity(
                    opacity: listItemEntryAnimationController.value,
                    child: Transform(
                      transform: Matrix4.identity()
                        ..setEntry(
                            3,
                            0,
                            0.006 *
                                (1 -
                                    listItemEntryAnimationController
                                        .value)),
                      child: Transform.translate(
                        offset: Offset(
                            screenWidth *
                                (1 -
                                    listItemEntryAnimationController
                                        .value),
                            0.0),
                        child: Container(
                          height: 330,
                           width: screenWidth - 30,
                          color: Colors.white,
                          child: PageStorage(
                            bucket: storageBucket,
                            child: PageView.builder(
                              key: PageStorageKey("index1_now_playing"),
                              controller: nowPlayingPageController,
                              scrollDirection: Axis.horizontal,
                              physics: BouncingScrollPhysics(),
                              onPageChanged: (index) {
                                nowPlayingListItemTextEntryAnimationController
                                    .reset();
                                nowPlayingListItemTextEntryAnimationController
                                    .forward();
                              },
                              itemBuilder: (context, index) {
                                if (index ==
                                    nowPlayingCurrentPage.floor()) {
                                  return Transform.scale(
                                    scale: (1.0 -
                                        (nowPlayingCurrentPage - index)),
                                    child: buildTvShowMainListItems(
                                      tvShowNowPlayingList[index]
                                          .backdrop_path,
                                      tvShowNowPlayingList[index].name,
                                      tvShowNowPlayingList[index].id,
                                      nowPlayingListItemTextEntryAnimationController,
                                    ),
                                  );
                                } else if (index ==
                                    nowPlayingCurrentPage.floor() + 1) {
                                  return Transform.scale(
                                    scale: (1.0 +
                                        (nowPlayingCurrentPage - index)),
                                    child: buildTvShowMainListItems(
                                      tvShowNowPlayingList[index]
                                          .backdrop_path,
                                      tvShowNowPlayingList[index].name,
                                      tvShowNowPlayingList[index].id,
                                      nowPlayingListItemTextEntryAnimationController,
                                    ),
                                  );
                                } else {
                                  return buildTvShowMainListItems(
                                    tvShowNowPlayingList[index]
                                        .backdrop_path,
                                    tvShowNowPlayingList[index].name,
                                    tvShowNowPlayingList[index].id,
                                    nowPlayingListItemTextEntryAnimationController,
                                  );
                                }
                              },
                              itemCount: tvShowNowPlayingList.length,
                            ),
                          ),
                        ),
                      ),
                    ),
                  );
                },
              ),
            ],
          ),
        ),
      ),
    );

    return pageStorageList[currentPage];
  }

  Widget buildTvShowMainListItems(String imageUrl, String name, int id,
      AnimationController _animationController) {
    return GestureDetector(
      onTap: () {
        Navigator.push(
          context,
          NewPageTransition(
            widget: TvShowDetails(
              tvShowId: id,
            ),
          ),
        );
      },
      child: Container(
        margin: EdgeInsets.all(
          10.0,
        ),
        child: Stack(
          children: <Widget>[
            Align(
              alignment: Alignment.topCenter,
              child: Container(
                height: 200.0,
                width: screenWidth - 30,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.all(
                    Radius.circular(5.0),
                  ),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black,
                      spreadRadius: 1.0,
                      blurRadius: 1.0,
                    ),
                  ],
                  color: Colors.white,
                ),
                child: Align(
                  alignment: Alignment.bottomCenter,
                  child: Container(
                    width: screenWidth,
                    margin: EdgeInsets.only(
                      right: 20.0,
                      left: 20.0,
                      bottom: 15.0,
                    ),
                    child: AnimatedBuilder(
                      animation: _animationController,
                      builder: (context, wdiget) {
                        return Text(
                          name == null || name == "" ? "" : name,
                          textAlign: TextAlign.center,
                          maxLines: 1,
                          style: TextStyle(
                            fontFamily: "ConcertOne-Regular",
                            color: Colors.black
                                .withOpacity(_animationController.value),
                            fontSize: 18,
                          ),
                        );
                      },
                    ),
                  ),
                ),
              ),
            ),
            Align(
              alignment: Alignment.topLeft,   
              child: Transform.translate(
                offset: Offset(9.0, 3.0),
                child: Container(
                  transform: Matrix4.identity()
                    ..setEntry(3, 0, 0.001),
                  height: 170,
                  width: screenWidth - 110,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.all(
                      Radius.circular(5.0),
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.grey,
                        spreadRadius: 2,
                        blurRadius: 5.0,
                        offset: Offset(-2.0, 3.0),
                      ),
                    ],
                    color: Colors.white,
                  ),
                  child: ClipRRect(
                    borderRadius: BorderRadius.all(
                      Radius.circular(5.0),
                    ),
                    child: imageUrl == null || imageUrl == ""
                        ? Container(
                      color: Colors.grey,
                      child: Icon(
                        Icons.live_tv,
                        color: Colors.grey[100],
                        size: 80,
                      ),
                    )
                        : Image.network(
                      imageUrl,
                      fit: BoxFit.cover,
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}


import 'dart:async';
import 'dart:convert';
import 'dart:math';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:http/http.dart' as http;
import 'package:vector_math/vector_math_64.dart' as VectorMath64;

import 'Models/default_main_movie_model.dart';
import 'Models/default_main_movie_results_model.dart';
import 'Models/default_main_person_model.dart';
import 'Models/default_main_person_results_model.dart';
import 'Models/default_main_tv_show_model.dart';
import 'Models/default_main_tv_show_results_model.dart';

import 'Utils/loading_bar_indicator.dart';
import 'Utils/NewPageTransition.dart';
import 'Utils/custom_curved_navigation_bar.dart';

import 'tv_show_details.dart';

void main() => runApp(MaterialApp(
      title: "Media Base",
      debugShowCheckedModeBanner: false,
      home: MediaBase(),
    ));

class MediaBase extends StatefulWidget {
  MediaBase({Key key}) : super(key: key);

  _MediaBaseState createState() => _MediaBaseState();
}

class _MediaBaseState extends State<MediaBase> with TickerProviderStateMixin {
  MediaQueryData mediaQueryData;

  double screenWidth;
  double screenHeight;

  int _currentIndex = 1;

  int _currentSliderIndex = 0;

  List<Color> _bgColorList = [
    Colors.green[400],
    Colors.deepPurple[400],
    Colors.blue[400],
  ];

  List _tabBarTextList = ["Tv Shows", "Movies", "Celebrities"];

  List<Widget> iconList(double _size, Color _color) {
    var iconList = List<Widget>();

    iconList.add(Icon(
      Icons.live_tv,
      size: _size,
      color: _color,
    ));
    iconList.add(Icon(
      Icons.movie,
      size: _size,
      color: _color,
    ));
    iconList.add(Icon(
      Icons.people_outline,
      size: _size,
      color: _color,
    ));

    return iconList;
  }

  var _colors = List<Color>();

  var sliderItemDetailsList = List<Map<String, String>>();
  var customSliderItemDetailsList = List<Map<String, String>>();

  AnimationController dragAnimationController;
  AnimationController sliderAnimationController;
  AnimationController sliderEntryAnimationController;
  AnimationController sliderTextEntryAnimationController;

  AnimationController mainPageTextEntryAnimationController;

  AnimationController listItemEntryAnimationController;

  AnimationController popularListItemTextEntryAnimationController;
  AnimationController topRatedListItemTextEntryAnimationController;
  AnimationController releasingTodayListItemTextEntryAnimationController;
  AnimationController nowPlayingListItemTextEntryAnimationController;

  AnimationController backListItemChangeAnimationController;
  AnimationController frontListItemChangeAnimationController;

  double defaultSlidingValue = 1.0 / 4.0;

  double currentSlidingValue = 1.0 / 4.0;

  var randomSliderPosition = Random();

  var randomSliderPositionsList = List<int>();

  bool _animationStatus = false;

  int endTvRange;
  int beginMovieRange;
  int endMovieRange;
  int beginPersonRange;
  int endPersonRange;
  int beginGameRange;
  int endGameRange;

  Animation<double> heightFactorAnimation;
  Animation<double> cornerRadiusAnimation;
  Animation<double> colorOpacityAnimation;
  Animation<double> opacityAnimation;
  Animation<double> sliderTextEntryAnimation;
  Animation<double> sliderTopCenterOpacityAnimation;

  Animation<double> backListItemChangeAnimation;
  Animation<double> frontListItemChangeAnimation;

  double collapsedHeightFactor = 0.60;
  double expandedHeightFactor = 0.20;

  double collapsedCornerRadius = 0.0;
  double expandedCornerRadius = 30.0;

  double expandedColorOpacity = 0.0;
  double collapsedColorOpacity = 1.0;

  double expandedOpacity = 1.0;
  double collapsedOpacity = 0.0;

  double collapsedSliderTopCenterOpacity = 0.0;
  double expandedSliderTopCenterOpacity = 0.2;

  PageController mainSliderPageController;
  double mainSliderCurrentPage = 0.0;

  PageController popularPageController;
  double popularCurrentPage = 0.0;

  PageController topRatedPageController;
  double topRatedCurrentPage = 0.0;

  PageController releasingTodayPageController;
  double releasingTodayCurrentPage = 0.0;

  PageController nowPlayingPageController;
  double nowPlayingCurrentPage = 0.0;

  var tvTrendingList = List<DefaultMainTvShowResultsModel>();
  var movieTrendingList = List<DefaultMainMovieResultsModel>();
  var personTrendingList = List<DefaultMainPersonResultsModel>();

  var tvShowPopularList = List<DefaultMainTvShowResultsModel>();
  var tvShowTopRatedList = List<DefaultMainTvShowResultsModel>();
  var tvShowReleasingTodayList = List<DefaultMainTvShowResultsModel>();
  var tvShowNowPlayingList = List<DefaultMainTvShowResultsModel>();

  Future fetchMainSliderItems() async {
    var _sliderItemDetails = List<Map<String, String>>();

    DefaultMainTvShowModel tvResponseModel;
    DefaultMainMovieModel movieResponseModel;
    DefaultMainPersonModel personResponseModel;

    final tvResponse = await http.get(
      Uri.encodeFull(
          'https://api.themoviedb.org/3/trending/tv/day?api_key=63e2f7bc00c513994d63c9be541a08d1'),
      headers: {
        "Accept": "application/json",
      },
    );

    final movieResponse = await http.get(
      Uri.encodeFull(
          'https://api.themoviedb.org/3/trending/movie/day?api_key=63e2f7bc00c513994d63c9be541a08d1'),
      headers: {
        "Accept": "application/json",
      },
    );

    final personResponse = await http.get(
      Uri.encodeFull(
          'https://api.themoviedb.org/3/trending/person/day?api_key=63e2f7bc00c513994d63c9be541a08d1'),
      headers: {
        "Accept": "application/json",
      },
    );

    if (this.mounted) {
      setState(() {
        if (tvResponse.statusCode == 200) {
          tvResponseModel =
              DefaultMainTvShowModel.fromJson(json.decode(tvResponse.body));
        }

        if (movieResponse.statusCode == 200) {
          movieResponseModel =
              DefaultMainMovieModel.fromJson(json.decode(movieResponse.body));
        }

        if (personResponse.statusCode == 200) {
          personResponseModel =
              DefaultMainPersonModel.fromJson(json.decode(personResponse.body));
        }

        if (tvResponseModel != null && tvResponseModel.results.length > 0) {
          tvTrendingList = tvResponseModel.results;
        }

        if (movieResponseModel != null &&
            movieResponseModel.results.length > 0) {
          movieTrendingList = movieResponseModel.results;
        }

        if (personResponseModel != null &&
            personResponseModel.results.length > 0) {
          personTrendingList = personResponseModel.results;
        }

        if (tvTrendingList != null && tvTrendingList.length > 0) {
          for (DefaultMainTvShowResultsModel tvTrending in tvTrendingList) {
            if (tvTrending.name != null &&
                tvTrending.name != "" &&
                tvTrending.backdrop_path != null &&
                tvTrending.backdrop_path != "") {
              if (_sliderItemDetails.length <= 3) {
                _sliderItemDetails.add({
                  "imageUrl": tvTrending.backdrop_path,
                  "name": tvTrending.name
                });
              }
            }
          }

          if (_sliderItemDetails != null && _sliderItemDetails.length > 0) {
            sliderItemDetailsList.addAll(_sliderItemDetails);
            endTvRange = _sliderItemDetails.length;
            beginMovieRange = endTvRange;
            _sliderItemDetails.clear();
          }
        }

        if (movieTrendingList != null && movieTrendingList.length > 0) {
          for (DefaultMainMovieResultsModel movieTrending
              in movieTrendingList) {
            if (movieTrending.title != null &&
                movieTrending.title != "" &&
                movieTrending.backdrop_path != null &&
                movieTrending.backdrop_path != "") {
              if (_sliderItemDetails.length <= 3) {
                _sliderItemDetails.add({
                  "imageUrl": movieTrending.backdrop_path,
                  "name": movieTrending.title
                });
              }
            }
          }

          if (_sliderItemDetails != null && _sliderItemDetails.length > 0) {
            sliderItemDetailsList.addAll(_sliderItemDetails);
            endMovieRange = beginMovieRange + _sliderItemDetails.length;
            beginPersonRange = endMovieRange;
            _sliderItemDetails.clear();
          }
        }

        if (personTrendingList != null && personTrendingList.length > 0) {
          for (DefaultMainPersonResultsModel personTrending
              in personTrendingList) {
            if (personTrending.name != null &&
                personTrending.name != "" &&
                personTrending.profile_path != null &&
                personTrending.profile_path != "") {
              if (_sliderItemDetails.length <= 3) {
                _sliderItemDetails.add({
                  "imageUrl": personTrending.profile_path,
                  "name": personTrending.name
                });
              }
            }
          }

          if (_sliderItemDetails != null && _sliderItemDetails.length > 0) {
            sliderItemDetailsList.addAll(_sliderItemDetails);
            endPersonRange = beginPersonRange + _sliderItemDetails.length;
            beginGameRange = endPersonRange;
            _sliderItemDetails.clear();
          }
        }

        if (sliderItemDetailsList != null && sliderItemDetailsList.length > 0) {
          if (_currentIndex == 0) {
            customSliderItemDetailsList.clear();
            customSliderItemDetailsList =
                sliderItemDetailsList.sublist(0, endTvRange);

            customSliderItemDetailsList.shuffle();
          } else if (_currentIndex == 1) {
            customSliderItemDetailsList.clear();
            customSliderItemDetailsList =
                sliderItemDetailsList.sublist(beginMovieRange, endMovieRange);

            customSliderItemDetailsList.shuffle();
          } else if (_currentIndex == 2) {
            customSliderItemDetailsList.clear();
            customSliderItemDetailsList =
                sliderItemDetailsList.sublist(beginPersonRange, endPersonRange);

            customSliderItemDetailsList.shuffle();
          }

          if (customSliderItemDetailsList != null &&
              customSliderItemDetailsList.length > 0) {
            for (int i = 0; i < customSliderItemDetailsList.length; i++) {
              randomSliderPositionsList.add(i);
            }

            double sliderLength = customSliderItemDetailsList.length.toDouble();

            defaultSlidingValue = 1.0 / sliderLength;
            currentSlidingValue = 1.0 / sliderLength;
          }
        }
      });
    }
  }

  Future fetchPopularItems(int page) async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/popular?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    DefaultMainTvShowModel defaultTvShowMainModel =
        DefaultMainTvShowModel.fromJson(json.decode(response.body));

    if (this.mounted) {
      setState(() {
        tvShowPopularList.addAll(defaultTvShowMainModel.results);
        tvShowPopularList.shuffle();
      });
    }

    listItemEntryAnimationController.forward();
    popularListItemTextEntryAnimationController.forward();
  }

  Future fetchTopRatedItems() async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/top_rated?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    if (this.mounted) {
      setState(() {
        DefaultMainTvShowModel defaultTvShowMainModel =
            DefaultMainTvShowModel.fromJson(json.decode(response.body));
        tvShowTopRatedList = defaultTvShowMainModel.results;
        tvShowTopRatedList.shuffle();
      });
    }

    topRatedListItemTextEntryAnimationController.forward();
  }

  Future fetchReleasingTodayItems() async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/airing_today?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    if (this.mounted) {
      setState(() {
        DefaultMainTvShowModel defaultTvShowMainModel =
            DefaultMainTvShowModel.fromJson(json.decode(response.body));
        tvShowReleasingTodayList = defaultTvShowMainModel.results;
        tvShowReleasingTodayList.shuffle();
      });
    }

    releasingTodayListItemTextEntryAnimationController.forward();
  }

  Future fetchNowPlayingItems() async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/on_the_air?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    if (this.mounted) {
      setState(() {
        DefaultMainTvShowModel defaultTvShowMainModel =
            DefaultMainTvShowModel.fromJson(json.decode(response.body));
        tvShowNowPlayingList = defaultTvShowMainModel.results;
        tvShowNowPlayingList.shuffle();
      });
    }

    nowPlayingListItemTextEntryAnimationController.forward();
  }

  ScrollController mainTvPageController;

  PageStorageBucket storageBucket = PageStorageBucket();

  @override
  void initState() {
    super.initState();

    this.fetchMainSliderItems();

    mainSliderPageController = PageController();
    mainSliderPageController.addListener(() {
      setState(() {
        mainSliderCurrentPage = mainSliderPageController.page;
      });
    });

    dragAnimationController = AnimationController(
      vsync: this,
    );

    heightFactorAnimation =
        Tween(begin: collapsedHeightFactor, end: expandedHeightFactor)
            .animate(dragAnimationController);

    cornerRadiusAnimation =
        Tween(begin: expandedCornerRadius, end: collapsedCornerRadius)
            .animate(dragAnimationController);

    colorOpacityAnimation =
        Tween(begin: expandedColorOpacity, end: collapsedColorOpacity)
            .animate(dragAnimationController);

    opacityAnimation = Tween(begin: expandedOpacity, end: collapsedOpacity)
        .animate(dragAnimationController);

    sliderTopCenterOpacityAnimation = Tween(
            begin: expandedSliderTopCenterOpacity,
            end: collapsedSliderTopCenterOpacity)
        .animate(dragAnimationController);

    sliderAnimationController = AnimationController(
      duration: Duration(seconds: 60),
      vsync: this,
    );
    sliderAnimationController.forward();

    sliderAnimationController.addStatusListener((status) {
      if (status == AnimationStatus.completed) {
        sliderAnimationController.reverse();
        setState(() {
          _animationStatus = true;
        });
      } else if (status == AnimationStatus.dismissed) {
        sliderAnimationController.forward();
        setState(() {
          _animationStatus = false;
        });
      }
    });

    sliderAnimationController.addListener(() {
      if (sliderAnimationController.value >= defaultSlidingValue) {
        if (_animationStatus) {
          if (sliderAnimationController.value <= currentSlidingValue) {
            if (this.mounted) {
              setState(() {
                currentSlidingValue = currentSlidingValue - defaultSlidingValue;

                randomSliderPositionsList.shuffle();

                int randomSlider = randomSliderPosition
                    .nextInt(randomSliderPositionsList.length - 1);

                mainSliderPageController.animateToPage(
                  randomSliderPositionsList[randomSlider],
                  duration: Duration(seconds: 1),
                  curve: Curves.easeInOutCubic,
                );
              });
            }
          }
        } else {
          if (sliderAnimationController.value > currentSlidingValue) {
            if (this.mounted) {
              setState(() {
                currentSlidingValue = currentSlidingValue + defaultSlidingValue;

                randomSliderPositionsList.shuffle();

                int randomSlider = randomSliderPosition
                    .nextInt(randomSliderPositionsList.length - 1);

                mainSliderPageController.animateToPage(
                  randomSliderPositionsList[randomSlider],
                  duration: Duration(seconds: 1),
                  curve: Curves.easeInOutCubic,
                );
              });
            }
          }
        }
      }
    });

    sliderEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1000),
    );

    sliderEntryAnimationController.forward();

    sliderTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 500),
    );
    sliderTextEntryAnimationController.forward();

    sliderTextEntryAnimation = Tween(
      begin: 0.0,
      end: 1.0,
    ).animate(sliderTextEntryAnimationController);

    mainPageTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 2000),
    );

    mainPageTextEntryAnimationController.forward();

    listItemEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 2000),
    );

    popularListItemTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1000),
    );

    topRatedListItemTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1000),
    );

    releasingTodayListItemTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1000),
    );

    nowPlayingListItemTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1000),
    );

    backListItemChangeAnimationController = AnimationController(
      vsync: this,
    );

    backListItemChangeAnimation = Tween(
      begin: 1.0,
      end: 0.8,
    ).animate(backListItemChangeAnimationController);

    frontListItemChangeAnimationController = AnimationController(
      vsync: this,
    );

    frontListItemChangeAnimation = Tween(
      begin: 0.2,
      end: 0.0,
    ).animate(frontListItemChangeAnimationController);

    Timer(Duration(seconds: 2), () {
      this.fetchPopularItems(1);
    });

    Timer(Duration(seconds: 4), () {
      this.fetchTopRatedItems();
    });

    Timer(Duration(seconds: 6), () {
      this.fetchReleasingTodayItems();
    });

    Timer(Duration(seconds: 8), () {
      this.fetchNowPlayingItems();
    });

    popularPageController = PageController();
    popularPageController.addListener(() {
      setState(() {
        popularCurrentPage = popularPageController.page;
      });
    });

    topRatedPageController = PageController();
    topRatedPageController.addListener(() {
      setState(() {
        topRatedCurrentPage = topRatedPageController.page;
      });
    });

    releasingTodayPageController = PageController();
    releasingTodayPageController.addListener(() {
      setState(() {
        releasingTodayCurrentPage = releasingTodayPageController.page;
      });
    });

    nowPlayingPageController = PageController(viewportFraction: 0.9);
    nowPlayingPageController.addListener(() {
      setState(() {
        nowPlayingCurrentPage = nowPlayingPageController.page;
      });
    });

    mainTvPageController = ScrollController();

    _colors.add(Colors.green);
    _colors.add(Colors.blue);
    _colors.add(Colors.yellow);
    _colors.add(Colors.purple);
    _colors.add(Colors.deepOrange);
  }

  @override
  void dispose() {
    dragAnimationController.dispose();
    sliderAnimationController.dispose();
    sliderEntryAnimationController.dispose();
    sliderTextEntryAnimationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    mediaQueryData = MediaQuery.of(context);

    screenWidth = mediaQueryData.size.width;
    screenHeight = mediaQueryData.size.height;

    return AnimatedBuilder(
      animation: sliderEntryAnimationController,
      builder: (context, widget) {
        return Scaffold(
          bottomNavigationBar: CustomCurvedNavigationBar(
            index: _currentIndex,
            buttonBackgroundColor: _bgColorList[_currentIndex],
            color: _bgColorList[_currentIndex],
            animationCurve: Curves.easeInOut,
            height: 60.0,
            items: iconList(25.0, Colors.white),
            onTap: (index) {
              if (this.mounted) {
                setState(() {
                  _currentIndex = index;

                  if (sliderItemDetailsList != null &&
                      sliderItemDetailsList.length > 0) {
                    if (_currentIndex == 0) {
                      customSliderItemDetailsList.clear();
                      customSliderItemDetailsList =
                          sliderItemDetailsList.sublist(0, endTvRange);
                      customSliderItemDetailsList.shuffle();
                    } else if (_currentIndex == 1) {
                      customSliderItemDetailsList.clear();
                      customSliderItemDetailsList = sliderItemDetailsList
                          .sublist(beginMovieRange, endMovieRange);
                      customSliderItemDetailsList.shuffle();
                    } else if (_currentIndex == 2) {
                      customSliderItemDetailsList.clear();
                      customSliderItemDetailsList = sliderItemDetailsList
                          .sublist(beginPersonRange, endPersonRange);
                      customSliderItemDetailsList.shuffle();
                    }
                  }
                });
              }

              if (tvShowNowPlayingList != null &&
                  tvShowNowPlayingList.length > 0) {
                tvShowNowPlayingList.shuffle();
              }
              if (tvShowReleasingTodayList != null &&
                  tvShowReleasingTodayList.length > 0) {
                tvShowReleasingTodayList.shuffle();
              }
              if (tvShowPopularList != null && tvShowPopularList.length > 0) {
                tvShowPopularList.shuffle();
              }
              if (tvShowTopRatedList != null && tvShowTopRatedList.length > 0) {
                tvShowTopRatedList.shuffle();
              }

              sliderEntryAnimationController.reset();
              sliderEntryAnimationController.forward();

              sliderTextEntryAnimationController.reset();
              sliderTextEntryAnimationController.forward();

              mainPageTextEntryAnimationController.reset();
              mainPageTextEntryAnimationController.forward();

              listItemEntryAnimationController.reset();
              listItemEntryAnimationController.forward();

              topRatedListItemTextEntryAnimationController.reset();
              topRatedListItemTextEntryAnimationController.forward();

              popularListItemTextEntryAnimationController.reset();
              popularListItemTextEntryAnimationController.forward();

              releasingTodayListItemTextEntryAnimationController.reset();
              releasingTodayListItemTextEntryAnimationController.forward();

              nowPlayingListItemTextEntryAnimationController.reset();
              nowPlayingListItemTextEntryAnimationController.forward();
            },
          ),
          body: Container(
            color: _bgColorList[_currentIndex],
            child: AnimatedBuilder(
              animation: dragAnimationController,
              builder: (context, widget) {
                return Stack(
                  fit: StackFit.expand,
                  children: <Widget>[
                    FractionallySizedBox(
                      alignment: Alignment.topCenter,
                      heightFactor: heightFactorAnimation.value,
                      child: customSliderItemDetailsList == null ||
                              customSliderItemDetailsList.length <= 0
                          ? iconList(
                              80.0,
                              Colors.white.withOpacity(opacityAnimation.value),
                            )[_currentIndex]
                          : PageView.builder(
                              physics: BouncingScrollPhysics(),
                              controller: mainSliderPageController,
                              onPageChanged: (index) {
                                setState(() {
                                  _currentSliderIndex = index;
                                });
                                sliderTextEntryAnimationController.reset();
                                sliderTextEntryAnimationController.forward();
                              },
                              itemBuilder: (context, index) {
                                if (customSliderItemDetailsList[index]
                                            ["imageUrl"] ==
                                        null ||
                                    customSliderItemDetailsList[index]
                                            ["imageUrl"] ==
                                        "") {
                                  return iconList(
                                      80.0,
                                      Colors.white.withOpacity(opacityAnimation
                                          .value))[_currentIndex];
                                }
                                return AnimatedBuilder(
                                  animation: sliderEntryAnimationController,
                                  builder: (context, widget) {
                                    return buildMainSliderListItems(
                                      customSliderItemDetailsList[index],
                                      mainSliderCurrentPage,
                                      index,
                                    );
                                  },
                                );
                              },
                              itemCount: customSliderItemDetailsList.length,
                            ),
                    ),
                    FractionallySizedBox(
                      alignment: Alignment.topCenter,
                      heightFactor: expandedHeightFactor - 0.01,
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: <Widget>[
                          Expanded(
                            flex: 1,
                            child: Container(
                              child: Icon(
                                Icons.menu,
                                color: Colors.white,
                              ),
                            ),
                          ),
                          Expanded(
                            flex: 5,
                            child: Container(
                              padding: EdgeInsets.only(
                                left: 15.0,
                                bottom: 6.0,
                              ),
                              child: Text(
                                _tabBarTextList[_currentIndex],
                                textAlign: TextAlign.start,
                                style: TextStyle(
                                  fontFamily: "ConcertOne-Regular",
                                  color: Colors.white,
                                  fontSize: 20,
                                ),
                              ),
                            ),
                          ),
                          Expanded(
                            flex: 1,
                            child: Container(
                              child: Icon(
                                Icons.search,
                                color: Colors.white,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                    FractionallySizedBox(
                      alignment: Alignment.bottomCenter,
                      heightFactor: 1.16 - heightFactorAnimation.value,
                      child: _currentSliderIndex == null ||
                              customSliderItemDetailsList == null ||
                              customSliderItemDetailsList.length <= 0
                          ? Container()
                          : AnimatedBuilder(
                              animation: sliderTextEntryAnimationController,
                              builder: (context, widget) {
                                return Opacity(
                                  opacity: sliderTextEntryAnimation.value,
                                  child: Container(
                                    decoration: BoxDecoration(
                                      gradient: LinearGradient(
                                        begin: Alignment.center,
                                        end: Alignment.topCenter,
                                        colors: [
                                          Colors.black.withOpacity(
                                              opacityAnimation.value),
                                          Colors.black.withOpacity(
                                            sliderTopCenterOpacityAnimation
                                                .value,
                                          ),
                                        ],
                                      ),
                                    ),
                                    child: Opacity(
                                      opacity: opacityAnimation.value,
                                      child: Column(
                                        crossAxisAlignment:
                                            CrossAxisAlignment.center,
                                        children: <Widget>[
                                          Container(
                                            alignment: Alignment.topCenter,
                                            child: Text(
                                              _currentSliderIndex == null
                                                  ? ""
                                                  : customSliderItemDetailsList[
                                                                      _currentSliderIndex]
                                                                  ["name"] ==
                                                              null ||
                                                          customSliderItemDetailsList[
                                                                      _currentSliderIndex]
                                                                  ["name"] ==
                                                              ""
                                                      ? ""
                                                      : customSliderItemDetailsList[
                                                              _currentSliderIndex]
                                                          ["name"],
                                              maxLines: 1,
                                              textAlign: TextAlign.center,
                                              style: TextStyle(
                                                fontFamily:
                                                    "ConcertOne-Regular",
                                                color: Colors.white.withOpacity(
                                                    sliderTextEntryAnimation
                                                        .value),
                                                fontSize: 20,
                                              ),
                                            ),
                                          ),
                                          _currentSliderIndex == null ||
                                                  customSliderItemDetailsList ==
                                                      null ||
                                                  customSliderItemDetailsList
                                                          .length <=
                                                      0
                                              ? Container()
                                              : Expanded(
                                                  child: Container(
                                                    width: screenWidth - 245,
                                                    margin:
                                                        EdgeInsets.all(10.0),
                                                    child: ListView.builder(
                                                      scrollDirection:
                                                          Axis.horizontal,
                                                      itemBuilder:
                                                          (context, index) {
                                                        if (_currentSliderIndex ==
                                                            index) {
                                                          return GestureDetector(
                                                            onTap: () {
                                                              mainSliderPageController
                                                                  .animateToPage(
                                                                index,
                                                                duration:
                                                                    Duration(
                                                                        seconds:
                                                                            1),
                                                                curve: Curves
                                                                    .easeInOutCubic,
                                                              );
                                                            },
                                                            child: Align(
                                                              alignment:
                                                                  Alignment
                                                                      .topCenter,
                                                              child:
                                                                  AnimatedContainer(
                                                                duration: Duration(
                                                                    milliseconds:
                                                                        300),
                                                                height: 10.0,
                                                                width: 10.0,
                                                                margin:
                                                                    EdgeInsets
                                                                        .only(
                                                                  left: 10.0,
                                                                  right: 10.0,
                                                                  top: 5.0,
                                                                ),
                                                                decoration: BoxDecoration(
                                                                    shape: BoxShape
                                                                        .circle,
                                                                    color: Colors
                                                                        .white,
                                                                    boxShadow: [
                                                                      BoxShadow(
                                                                        color: Colors
                                                                            .white,
                                                                        spreadRadius:
                                                                            1.0,
                                                                      ),
                                                                    ]),
                                                              ),
                                                            ),
                                                          );
                                                        } else {
                                                          return GestureDetector(
                                                            onTap: () {
                                                              mainSliderPageController
                                                                  .animateToPage(
                                                                index,
                                                                duration:
                                                                    Duration(
                                                                        seconds:
                                                                            1),
                                                                curve: Curves
                                                                    .easeInOutCubic,
                                                              );
                                                            },
                                                            child: Align(
                                                              alignment:
                                                                  Alignment
                                                                      .topCenter,
                                                              child:
                                                                  AnimatedContainer(
                                                                duration: Duration(
                                                                    milliseconds:
                                                                        400),
                                                                height: 8.0,
                                                                width: 8.0,
                                                                margin: EdgeInsets
                                                                    .all(10.0),
                                                                decoration:
                                                                    BoxDecoration(
                                                                  shape: BoxShape
                                                                      .circle,
                                                                  border: Border
                                                                      .all(
                                                                    width: 1.0,
                                                                    color: Colors
                                                                        .white,
                                                                  ),
                                                                ),
                                                              ),
                                                            ),
                                                          );
                                                        }
                                                      },
                                                      itemCount:
                                                          customSliderItemDetailsList
                                                              .length,
                                                    ),
                                                  ),
                                                ),
                                        ],
                                      ),
                                    ),
                                  ),
                                );
                              },
                            ),
                    ),
                    FractionallySizedBox(
                      alignment: Alignment.bottomCenter,
                      heightFactor: 1.05 - heightFactorAnimation.value,
                      child: Container(
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.only(
                            topLeft:
                                Radius.circular(cornerRadiusAnimation.value),
                            topRight:
                                Radius.circular(cornerRadiusAnimation.value),
                          ),
                        ),
                        child: buildMainPageItems(0),
                      ),
                    ),
                  ],
                );
              },
            ),
          ),
        );
      },
    );
  }

  Widget buildMainSliderListItems(Map<String, String> sliderDetails,
      double mainSliderCurrentPage, int index) {
    if (index == mainSliderCurrentPage.floor()) {
      return Container(
        transform: Matrix4.identity()
          ..setFromTranslationRotationScale(
            VectorMath64.Vector3(
              -screenWidth * (index - mainSliderCurrentPage),
              0.0,
              0.0,
            ),
            VectorMath64.Quaternion(
              0.0,
              0.0,
              0.0,
              0.0,
            ),
            VectorMath64.Vector3(
              1 - (mainSliderCurrentPage - index),
              1,
              1,
            ),
          ),
        decoration: BoxDecoration(
          image: DecorationImage(
            image: NetworkImage(
              sliderDetails["imageUrl"],
            ),
            fit: BoxFit.cover,
            colorFilter: ColorFilter.mode(
              _bgColorList[_currentIndex]
                  .withOpacity(colorOpacityAnimation.value),
              BlendMode.srcOver,
            ),
          ),
        ),
        child: Container(
          color: Colors.white
              .withOpacity(1 - sliderEntryAnimationController.value),
        ),
      );
    } else if (index == mainSliderCurrentPage.floor() + 1) {
      return Container(
        transform: Matrix4.identity()
          ..setEntry(3, 0, 0.006 * -(mainSliderCurrentPage - index)),
        decoration: BoxDecoration(
          image: DecorationImage(
            image: NetworkImage(
              sliderDetails["imageUrl"],
            ),
            fit: BoxFit.cover,
            colorFilter: ColorFilter.mode(
              _bgColorList[_currentIndex]
                  .withOpacity(colorOpacityAnimation.value),
              BlendMode.srcOver,
            ),
          ),
        ),
        child: Container(
          color: Colors.white
              .withOpacity(1 - sliderEntryAnimationController.value),
        ),
      );
    } else {
      return Container(
        decoration: BoxDecoration(
          image: DecorationImage(
            image: NetworkImage(
              sliderDetails["imageUrl"],
            ),
            fit: BoxFit.cover,
            colorFilter: ColorFilter.mode(
              _bgColorList[_currentIndex]
                  .withOpacity(colorOpacityAnimation.value),
              BlendMode.srcOver,
            ),
          ),
        ),
        child: Container(
          color: Colors.white
              .withOpacity(1.0 - sliderEntryAnimationController.value),
        ),
      );
    }
  }

  PageStorage buildMainPageItems(int currentPage) {
    var pageStorageList = List<PageStorage>();

    pageStorageList.add(
      PageStorage(
        bucket: storageBucket,
        child: NotificationListener(
          onNotification: (scrollNotification) {
            if (scrollNotification is ScrollUpdateNotification) {
              if (scrollNotification.metrics.axis == Axis.vertical) {
                if (scrollNotification.metrics.pixels <
                    screenHeight -
                        scrollNotification.metrics.viewportDimension) {
                  double fractionalDragged =
                      scrollNotification.scrollDelta / screenHeight;
                  dragAnimationController.value =
                      dragAnimationController.value + (5 * fractionalDragged);
                }
              }
            }
          },
          child: ListView(
            key: PageStorageKey("tv_index1"),
            controller: mainTvPageController,
            children: <Widget>[
              Container(
                margin: EdgeInsets.only(
                  top: 15,
                  left: 10.0,
                  bottom: 10.0,
                  right: 15.0,
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    AnimatedBuilder(
                      animation: mainPageTextEntryAnimationController,
                      builder: (context, wdiget) {
                        return Text(
                          "Most Popular",
                          textAlign: TextAlign.start,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 18,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w500,
                            letterSpacing: 0.3,
                            color: Colors.black.withOpacity(
                                mainPageTextEntryAnimationController.value),
                          ),
                        );
                      },
                    ),
                    Expanded(
                      child: Container(
                        margin: EdgeInsets.only(top: 10.0),
                        child: Text(
                          "View more >",
                          textAlign: TextAlign.end,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 14,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w100,
                            color: Colors.white.withOpacity(0.0),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              tvShowPopularList == null || tvShowPopularList.length == 0
                  ? Container(
                      height: 200,
                      color: Colors.transparent,
                      child: Center(
                        child: LoadingBarIndicator(
                          numberOfBars: 5,
                          colors: _colors,
                          barSpacing: 5.0,
                          beginTweenValue: 10.0,
                          endTweenValue: 15.0,
                        ),
                      ),
                    )
                  : AnimatedBuilder(
                      animation: listItemEntryAnimationController,
                      builder: (context, widget) {
                        return Opacity(
                          opacity: listItemEntryAnimationController.value,
                          child: Transform(
                            transform: Matrix4.identity()
                              ..setEntry(
                                  3,
                                  0,
                                  0.006 *
                                      (1 -
                                          listItemEntryAnimationController
                                              .value)),
                            child: Transform.translate(
                              offset: Offset(
                                  screenWidth *
                                      (1 -
                                          listItemEntryAnimationController
                                              .value),
                                  0.0),
                              child: Container(
                                height: 330,
                                color: Colors.transparent,
                                child: PageStorage(
                                  bucket: storageBucket,
                                  child: PageView.builder(
                                    key: PageStorageKey("index1_most_popular"),
                                    controller: popularPageController,
                                    scrollDirection: Axis.horizontal,
                                    physics: BouncingScrollPhysics(),
                                    onPageChanged: (index) {
                                      popularListItemTextEntryAnimationController
                                          .reset();
                                      popularListItemTextEntryAnimationController
                                          .forward();
                                    },
                                    itemBuilder: (context, index) {
                                      if (tvShowPopularList[index] != null) {
                                        if (index ==
                                            popularCurrentPage.floor()) {
                                          return Transform.scale(
                                            scale: (1.0 -
                                                (popularCurrentPage - index)),
                                            child: buildTvShowMainListItems(
                                              tvShowPopularList[index]
                                                  .backdrop_path,
                                              tvShowPopularList[index].name,
                                              tvShowPopularList[index].id,
                                              popularListItemTextEntryAnimationController,
                                            ),
                                          );
                                        } else if (index ==
                                            popularCurrentPage.floor() + 1) {
                                          return Transform.scale(
                                            scale: (1.0 +
                                                (popularCurrentPage - index)),
                                            child: buildTvShowMainListItems(
                                              tvShowPopularList[index]
                                                  .backdrop_path,
                                              tvShowPopularList[index].name,
                                              tvShowPopularList[index].id,
                                              popularListItemTextEntryAnimationController,
                                            ),
                                          );
                                        } else {
                                          return buildTvShowMainListItems(
                                            tvShowPopularList[index]
                                                .backdrop_path,
                                            tvShowPopularList[index].name,
                                            tvShowPopularList[index].id,
                                            popularListItemTextEntryAnimationController,
                                          );
                                        }
                                      } else {
                                        return Container();
                                      }
                                    },
                                    itemCount: tvShowPopularList.length,
                                  ),
                                ),
                              ),
                            ),
                          ),
                        );
                      },
                    ),
              Container(
                height: 1.0,
                margin: EdgeInsets.only(bottom: 10.0),
                decoration: BoxDecoration(
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black,
                    ),
                  ],
                ),
              ),
              Container(
                margin: EdgeInsets.only(
                  top: 15,
                  left: 10.0,
                  bottom: 10.0,
                  right: 15.0,
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    AnimatedBuilder(
                      animation: mainPageTextEntryAnimationController,
                      builder: (context, wdiget) {
                        return Text(
                          "Top Rated",
                          textAlign: TextAlign.start,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 18,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w500,
                            letterSpacing: 0.3,
                            color: Colors.black.withOpacity(
                                mainPageTextEntryAnimationController.value),
                          ),
                        );
                      },
                    ),
                    Expanded(
                      child: Container(
                        margin: EdgeInsets.only(top: 10.0),
                        child: Text(
                          "View more >",
                          textAlign: TextAlign.end,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 14,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w100,
                            color: Colors.white.withOpacity(0.0),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              tvShowTopRatedList == null || tvShowTopRatedList.length == 0
                  ? Container(
                      height: 200,
                      color: Colors.transparent,
                      child: Center(
                        child: LoadingBarIndicator(
                          numberOfBars: 5,
                          colors: _colors,
                          barSpacing: 5.0,
                          beginTweenValue: 10.0,
                          endTweenValue: 15.0,
                        ),
                      ),
                    )
                  : AnimatedBuilder(
                      animation: listItemEntryAnimationController,
                      builder: (context, widget) {
                        return Opacity(
                          opacity: listItemEntryAnimationController.value,
                          child: Transform(
                            transform: Matrix4.identity()
                              ..setEntry(
                                  3,
                                  0,
                                  0.006 *
                                      (1 -
                                          listItemEntryAnimationController
                                              .value)),
                            child: Transform.translate(
                              offset: Offset(
                                  screenWidth *
                                      (1 -
                                          listItemEntryAnimationController
                                              .value),
                                  0.0),
                              child: Container(
                                height: 330,
                                color: Colors.transparent,
                                child: PageStorage(
                                  bucket: storageBucket,
                                  child: PageView.builder(
                                    key: PageStorageKey("index1_top_rated"),
                                    controller: topRatedPageController,
                                    scrollDirection: Axis.horizontal,
                                    physics: BouncingScrollPhysics(),
                                    onPageChanged: (index) {
                                      topRatedListItemTextEntryAnimationController
                                          .reset();
                                      topRatedListItemTextEntryAnimationController
                                          .forward();
                                    },
                                    itemBuilder: (context, index) {
                                      if (index ==
                                          topRatedCurrentPage.floor()) {
                                        return Transform.scale(
                                          scale: (1.0 -
                                              (topRatedCurrentPage - index)),
                                          child: buildTvShowMainListItems(
                                            tvShowTopRatedList[index]
                                                .backdrop_path,
                                            tvShowTopRatedList[index].name,
                                            tvShowTopRatedList[index].id,
                                            topRatedListItemTextEntryAnimationController,
                                          ),
                                        );
                                      } else if (index ==
                                          topRatedCurrentPage.floor() + 1) {
                                        return Transform.scale(
                                          scale: (1.0 +
                                              (topRatedCurrentPage - index)),
                                          child: buildTvShowMainListItems(
                                            tvShowTopRatedList[index]
                                                .backdrop_path,
                                            tvShowTopRatedList[index].name,
                                            tvShowTopRatedList[index].id,
                                            topRatedListItemTextEntryAnimationController,
                                          ),
                                        );
                                      } else {
                                        return buildTvShowMainListItems(
                                          tvShowTopRatedList[index]
                                              .backdrop_path,
                                          tvShowTopRatedList[index].name,
                                          tvShowTopRatedList[index].id,
                                          topRatedListItemTextEntryAnimationController,
                                        );
                                      }
                                    },
                                    itemCount: tvShowTopRatedList.length,
                                  ),
                                ),
                              ),
                            ),
                          ),
                        );
                      },
                    ),
              Container(
                height: 1.0,
                margin: EdgeInsets.only(bottom: 10.0),
                decoration: BoxDecoration(
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black,
                    ),
                  ],
                ),
              ),
              Container(
                margin: EdgeInsets.only(
                  top: 15,
                  left: 10.0,
                  bottom: 10.0,
                  right: 15.0,
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    AnimatedBuilder(
                      animation: mainPageTextEntryAnimationController,
                      builder: (context, wdiget) {
                        return Text(
                          "Releasing Today",
                          textAlign: TextAlign.start,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 18,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w500,
                            letterSpacing: 0.3,
                            color: Colors.black.withOpacity(
                                mainPageTextEntryAnimationController.value),
                          ),
                        );
                      },
                    ),
                    Expanded(
                      child: Container(
                        margin: EdgeInsets.only(top: 10.0),
                        child: Text(
                          "View more >",
                          textAlign: TextAlign.end,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 14,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w100,
                            color: Colors.white.withOpacity(0.0),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              tvShowReleasingTodayList == null ||
                      tvShowReleasingTodayList.length == 0
                  ? Container(
                      height: 200,
                      color: Colors.transparent,
                      child: Center(
                        child: LoadingBarIndicator(
                          numberOfBars: 5,
                          colors: _colors,
                          barSpacing: 5.0,
                          beginTweenValue: 10.0,
                          endTweenValue: 15.0,
                        ),
                      ),
                    )
                  : AnimatedBuilder(
                      animation: listItemEntryAnimationController,
                      builder: (context, widget) {
                        return Opacity(
                          opacity: listItemEntryAnimationController.value,
                          child: Transform(
                            transform: Matrix4.identity()
                              ..setEntry(
                                  3,
                                  0,
                                  0.006 *
                                      (1 -
                                          listItemEntryAnimationController
                                              .value)),
                            child: Transform.translate(
                              offset: Offset(
                                  screenWidth *
                                      (1 -
                                          listItemEntryAnimationController
                                              .value),
                                  0.0),
                              child: Container(
                                height: 330,
                                color: Colors.white,
                                child: PageStorage(
                                  bucket: storageBucket,
                                  child: PageView.builder(
                                    key: PageStorageKey(
                                        "index1_releasing_today"),
                                    controller: releasingTodayPageController,
                                    scrollDirection: Axis.horizontal,
                                    physics: BouncingScrollPhysics(),
                                    onPageChanged: (index) {
                                      releasingTodayListItemTextEntryAnimationController
                                          .reset();
                                      releasingTodayListItemTextEntryAnimationController
                                          .forward();
                                    },
                                    itemBuilder: (context, index) {
                                      if (index ==
                                          releasingTodayCurrentPage.floor()) {
                                        return Transform.scale(
                                          scale: (1.0 -
                                              (releasingTodayCurrentPage -
                                                  index)),
                                          child: buildTvShowMainListItems(
                                            tvShowReleasingTodayList[index]
                                                .backdrop_path,
                                            tvShowReleasingTodayList[index]
                                                .name,
                                            tvShowReleasingTodayList[index].id,
                                            releasingTodayListItemTextEntryAnimationController,
                                          ),
                                        );
                                      } else if (index ==
                                          releasingTodayCurrentPage.floor() +
                                              1) {
                                        return Transform.scale(
                                          scale: (1.0 +
                                              (releasingTodayCurrentPage -
                                                  index)),
                                          child: buildTvShowMainListItems(
                                            tvShowReleasingTodayList[index]
                                                .backdrop_path,
                                            tvShowReleasingTodayList[index]
                                                .name,
                                            tvShowReleasingTodayList[index].id,
                                            releasingTodayListItemTextEntryAnimationController,
                                          ),
                                        );
                                      } else {
                                        return buildTvShowMainListItems(
                                          tvShowReleasingTodayList[index]
                                              .backdrop_path,
                                          tvShowReleasingTodayList[index].name,
                                          tvShowReleasingTodayList[index].id,
                                          releasingTodayListItemTextEntryAnimationController,
                                        );
                                      }
                                    },
                                    itemCount: tvShowReleasingTodayList.length,
                                  ),
                                ),
                              ),
                            ),
                          ),
                        );
                      },
                    ),
              Container(
                height: 1.0,
                margin: EdgeInsets.only(bottom: 10.0),
                decoration: BoxDecoration(
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black,
                    ),
                  ],
                ),
              ),
              Container(
                margin: EdgeInsets.only(
                  top: 15,
                  left: 10.0,
                  bottom: 10.0,
                  right: 15.0,
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    AnimatedBuilder(
                      animation: mainPageTextEntryAnimationController,
                      builder: (context, wdiget) {
                        return Text(
                          "Now Playing",
                          textAlign: TextAlign.start,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 18,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w500,
                            letterSpacing: 0.2,
                            color: Colors.black.withOpacity(
                                mainPageTextEntryAnimationController.value),
                          ),
                        );
                      },
                    ),
                    Expanded(
                      child: Container(
                        margin: EdgeInsets.only(top: 10.0),
                        child: Text(
                          "View more >",
                          textAlign: TextAlign.end,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 14,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w100,
                            color: Colors.white.withOpacity(0.0),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              tvShowNowPlayingList == null || tvShowNowPlayingList.length == 0
                  ? Container(
                      height: 200,
                      color: Colors.transparent,
                      child: Center(
                        child: LoadingBarIndicator(
                          numberOfBars: 5,
                          colors: _colors,
                          barSpacing: 5.0,
                          beginTweenValue: 10.0,
                          endTweenValue: 15.0,
                        ),
                      ),
                    )
                  : AnimatedBuilder(
                      animation: listItemEntryAnimationController,
                      builder: (context, widget) {
                        return Opacity(
                          opacity: listItemEntryAnimationController.value,
                          child: Transform(
                            transform: Matrix4.identity()
                              ..setEntry(
                                  3,
                                  0,
                                  0.006 *
                                      (1 -
                                          listItemEntryAnimationController
                                              .value)),
                            child: Transform.translate(
                              offset: Offset(
                                  screenWidth *
                                      (1 -
                                          listItemEntryAnimationController
                                              .value),
                                  0.0),
                              child: Container(
                                height: 250,
                                color: Colors.white,
                                child: PageStorage(
                                  bucket: storageBucket,
                                  child: PageView.builder(
                                    key: PageStorageKey("index1_now_playing"),
                                    controller: nowPlayingPageController,
                                    scrollDirection: Axis.horizontal,
                                    physics: BouncingScrollPhysics(),
                                    onPageChanged: (index) {
                                      nowPlayingListItemTextEntryAnimationController
                                          .reset();
                                      nowPlayingListItemTextEntryAnimationController
                                          .forward();
                                    },
                                    itemBuilder: (context, index) {
                                      if (index ==
                                          nowPlayingCurrentPage.floor()) {
                                        frontListItemChangeAnimationController
                                                .value = 
                                          (nowPlayingCurrentPage - index);

                                        // print("frontListItemChangeAnimationController===========>>>>>" +
                                        //     frontListItemChangeAnimationController
                                        //         .value
                                        //         .toString());

                                        // print("index----====>>>>>>>>>>>>" +
                                        //     index.toString());

                                        return Transform.scale(
                                          scale: (1 - frontListItemChangeAnimation
                                              .value),
                                          child: buildTvShowMainListItems(
                                            tvShowNowPlayingList[index]
                                                .backdrop_path,
                                            tvShowNowPlayingList[index].name,
                                            tvShowNowPlayingList[index].id,
                                            nowPlayingListItemTextEntryAnimationController,
                                          ),
                                        );
                                      } else if (index ==
                                          nowPlayingCurrentPage.floor() + 1) {
                                        print(
                                            "index222222----====>>>>>>>>>>>>" +
                                                (index - nowPlayingCurrentPage).toString());

                                        backListItemChangeAnimationController
                                                .value = 1 - 
                                            (index - nowPlayingCurrentPage);

                                        return Transform.scale(
                                          scale: (backListItemChangeAnimation
                                              .value),
                                          child: buildTvShowMainListItems(
                                            tvShowNowPlayingList[index]
                                                .backdrop_path,
                                            tvShowNowPlayingList[index].name,
                                            tvShowNowPlayingList[index].id,
                                            nowPlayingListItemTextEntryAnimationController,
                                          ),
                                        );
                                      } else {
                                     

                                        return buildTvShowMainListItems(
                                          tvShowNowPlayingList[index]
                                              .backdrop_path,
                                          tvShowNowPlayingList[index].name,
                                          tvShowNowPlayingList[index].id,
                                          nowPlayingListItemTextEntryAnimationController,
                                        );
                                      }
                                    },
                                    itemCount: tvShowNowPlayingList.length,
                                  ),
                                ),
                              ),
                            ),
                          ),
                        );
                      },
                    ),
            ],
          ),
        ),
      ),
    );

    return pageStorageList[currentPage];
  }

  Widget buildTvShowMainListItems(String imageUrl, String name, int id,
      AnimationController _animationController) {
    return GestureDetector(
      onTap: () {
        Navigator.push(
          context,
          NewPageTransition(
            widget: TvShowDetails(
              tvShowId: id,
            ),
          ),
        );
      },
      child: Card(
        margin: EdgeInsets.only(
          top: 5.0,
          left: 5.0,
          right: 5.0,
          bottom: 20.0,
        ),
        elevation: 3.0,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.all(
            Radius.circular(10.0),
          ),
          side: BorderSide(
            width: 0.5,
          ),
        ),
        child: Stack(
          children: <Widget>[
            Align(
              alignment: Alignment.bottomCenter,
              child: Container(
                width: screenWidth,
                margin: EdgeInsets.only(
                  right: 20.0,
                  left: 20.0,
                  bottom: 15.0,
                ),
                child: AnimatedBuilder(
                  animation: _animationController,
                  builder: (context, wdiget) {
                    return Text(
                      name == null || name == "" ? "" : name,
                      textAlign: TextAlign.center,
                      maxLines: 1,
                      style: TextStyle(
                        fontFamily: "ConcertOne-Regular",
                        color: Colors.black
                            .withOpacity(_animationController.value),
                        fontSize: 18,
                      ),
                    );
                  },
                ),
              ),
            ),
            Align(
              alignment: Alignment.topLeft,
              child: Transform.translate(
                offset: Offset(9.0, 3.0),
                child: Container(
                  transform: Matrix4.identity()..setEntry(3, 0, 0.001),
                  height: 170,
                  width: screenWidth - 110,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.all(
                      Radius.circular(5.0),
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.grey,
                        spreadRadius: 2,
                        blurRadius: 5.0,
                        offset: Offset(-4.0, 3.0),
                      ),
                    ],
                    color: Colors.white,
                  ),
                  child: ClipRRect(
                    borderRadius: BorderRadius.all(
                      Radius.circular(5.0),
                    ),
                    child: imageUrl == null || imageUrl == ""
                        ? Container(
                            color: Colors.grey,
                            child: Icon(
                              Icons.live_tv,
                              color: Colors.grey[100],
                              size: 80,
                            ),
                          )
                        : Image.network(
                            imageUrl,
                            fit: BoxFit.cover,
                          ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}



import 'dart:async';
import 'dart:convert';
import 'dart:math';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:http/http.dart' as http;
import 'package:vector_math/vector_math_64.dart' as VectorMath64;

import 'Models/default_main_movie_model.dart';
import 'Models/default_main_movie_results_model.dart';
import 'Models/default_main_person_model.dart';
import 'Models/default_main_person_results_model.dart';
import 'Models/default_main_tv_show_model.dart';
import 'Models/default_main_tv_show_results_model.dart';

import 'Utils/loading_bar_indicator.dart';
import 'Utils/NewPageTransition.dart';
import 'Utils/custom_curved_navigation_bar.dart';

import 'Utils/slider_paint.dart';
import 'tv_show_details.dart';

void main() => runApp(MaterialApp(
      title: "Media Base",
      debugShowCheckedModeBanner: false,
      home: MediaBase(),
    ));

class MediaBase extends StatefulWidget {
  MediaBase({Key key}) : super(key: key);

  _MediaBaseState createState() => _MediaBaseState();
}

class _MediaBaseState extends State<MediaBase> with TickerProviderStateMixin {
  MediaQueryData mediaQueryData;

  double screenWidth;
  double screenHeight;

  int _currentIndex = 1;

  int _currentSliderIndex = 0;

  List<Color> _bgColorList = [
    Colors.green[400],
    Colors.deepPurple[400],
    Colors.blue[400],
  ];

  List _tabBarTextList = ["Tv Shows", "Movies", "Celebrities"];

  List<Widget> iconList(double _size, Color _color) {
    var iconList = List<Widget>();

    iconList.add(Icon(
      Icons.live_tv,
      size: _size,
      color: _color,
    ));
    iconList.add(Icon(
      Icons.movie,
      size: _size,
      color: _color,
    ));
    iconList.add(Icon(
      Icons.people_outline,
      size: _size,
      color: _color,
    ));

    return iconList;
  }

  var _colors = List<Color>();

  var sliderItemDetailsList = List<Map<String, String>>();
  var customSliderItemDetailsList = List<Map<String, String>>();

  AnimationController dragAnimationController;
  AnimationController sliderAnimationController;
  AnimationController sliderEntryAnimationController;
  AnimationController sliderTextEntryAnimationController;

  AnimationController mainPageTextEntryAnimationController;

  AnimationController listItemEntryAnimationController;

  AnimationController popularListItemTextEntryAnimationController;
  AnimationController topRatedListItemTextEntryAnimationController;
  AnimationController releasingTodayListItemTextEntryAnimationController;
  AnimationController nowPlayingListItemTextEntryAnimationController;

  AnimationController backListItemChangeAnimationController;
  AnimationController frontListItemChangeAnimationController;

  AnimationController progressSliderAnimationController;

  double defaultSlidingValue = 1.0 / 4.0;

  double currentSlidingValue = 1.0 / 4.0;

  var randomSliderPosition = Random();

  var randomSliderPositionsList = List<int>();

  bool _animationStatus = false;

  int endTvRange;
  int beginMovieRange;
  int endMovieRange;
  int beginPersonRange;
  int endPersonRange;
  int beginGameRange;
  int endGameRange;

  Animation<double> heightFactorAnimation;
  Animation<double> cornerRadiusAnimation;
  Animation<double> colorOpacityAnimation;
  Animation<double> opacityAnimation;
  Animation<double> sliderTextEntryAnimation;
  Animation<double> sliderTopCenterOpacityAnimation;

  Animation<double> backListItemChangeAnimation;
  Animation<double> frontListItemChangeAnimation;

  Animation<double> percentageAnimation;

  double collapsedHeightFactor = 0.60;
  double expandedHeightFactor = 0.20;

  double collapsedCornerRadius = 0.0;
  double expandedCornerRadius = 30.0;

  double expandedColorOpacity = 0.0;
  double collapsedColorOpacity = 1.0;

  double expandedOpacity = 1.0;
  double collapsedOpacity = 0.0;

  double collapsedSliderTopCenterOpacity = 0.0;
  double expandedSliderTopCenterOpacity = 0.2;

  PageController mainSliderPageController;
  double mainSliderCurrentPage = 0.0;

  PageController popularPageController;
  double popularCurrentPage = 0.0;

  PageController topRatedPageController;
  double topRatedCurrentPage = 0.0;

  PageController releasingTodayPageController;
  double releasingTodayCurrentPage = 0.0;

  PageController nowPlayingPageController;
  double nowPlayingCurrentPage = 0.0;

  var tvTrendingList = List<DefaultMainTvShowResultsModel>();
  var movieTrendingList = List<DefaultMainMovieResultsModel>();
  var personTrendingList = List<DefaultMainPersonResultsModel>();

  var tvShowPopularList = List<DefaultMainTvShowResultsModel>();
  var tvShowTopRatedList = List<DefaultMainTvShowResultsModel>();
  var tvShowReleasingTodayList = List<DefaultMainTvShowResultsModel>();
  var tvShowNowPlayingList = List<DefaultMainTvShowResultsModel>();

  Future fetchMainSliderItems() async {
    var _sliderItemDetails = List<Map<String, String>>();

    DefaultMainTvShowModel tvResponseModel;
    DefaultMainMovieModel movieResponseModel;
    DefaultMainPersonModel personResponseModel;

    final tvResponse = await http.get(
      Uri.encodeFull(
          'https://api.themoviedb.org/3/trending/tv/day?api_key=63e2f7bc00c513994d63c9be541a08d1'),
      headers: {
        "Accept": "application/json",
      },
    );

    final movieResponse = await http.get(
      Uri.encodeFull(
          'https://api.themoviedb.org/3/trending/movie/day?api_key=63e2f7bc00c513994d63c9be541a08d1'),
      headers: {
        "Accept": "application/json",
      },
    );

    final personResponse = await http.get(
      Uri.encodeFull(
          'https://api.themoviedb.org/3/trending/person/day?api_key=63e2f7bc00c513994d63c9be541a08d1'),
      headers: {
        "Accept": "application/json",
      },
    );

    if (this.mounted) {
      setState(() {
        if (tvResponse.statusCode == 200) {
          tvResponseModel =
              DefaultMainTvShowModel.fromJson(json.decode(tvResponse.body));
        }

        if (movieResponse.statusCode == 200) {
          movieResponseModel =
              DefaultMainMovieModel.fromJson(json.decode(movieResponse.body));
        }

        if (personResponse.statusCode == 200) {
          personResponseModel =
              DefaultMainPersonModel.fromJson(json.decode(personResponse.body));
        }

        if (tvResponseModel != null && tvResponseModel.results.length > 0) {
          tvTrendingList = tvResponseModel.results;
        }

        if (movieResponseModel != null &&
            movieResponseModel.results.length > 0) {
          movieTrendingList = movieResponseModel.results;
        }

        if (personResponseModel != null &&
            personResponseModel.results.length > 0) {
          personTrendingList = personResponseModel.results;
        }

        if (tvTrendingList != null && tvTrendingList.length > 0) {
          for (DefaultMainTvShowResultsModel tvTrending in tvTrendingList) {
            if (tvTrending.name != null &&
                tvTrending.name != "" &&
                tvTrending.backdrop_path != null &&
                tvTrending.backdrop_path != "") {
              if (_sliderItemDetails.length <= 3) {
                _sliderItemDetails.add({
                  "imageUrl": tvTrending.backdrop_path,
                  "name": tvTrending.name
                });
              }
            }
          }

          if (_sliderItemDetails != null && _sliderItemDetails.length > 0) {
            sliderItemDetailsList.addAll(_sliderItemDetails);
            endTvRange = _sliderItemDetails.length;
            beginMovieRange = endTvRange;
            _sliderItemDetails.clear();
          }
        }

        if (movieTrendingList != null && movieTrendingList.length > 0) {
          for (DefaultMainMovieResultsModel movieTrending
              in movieTrendingList) {
            if (movieTrending.title != null &&
                movieTrending.title != "" &&
                movieTrending.backdrop_path != null &&
                movieTrending.backdrop_path != "") {
              if (_sliderItemDetails.length <= 3) {
                _sliderItemDetails.add({
                  "imageUrl": movieTrending.backdrop_path,
                  "name": movieTrending.title
                });
              }
            }
          }

          if (_sliderItemDetails != null && _sliderItemDetails.length > 0) {
            sliderItemDetailsList.addAll(_sliderItemDetails);
            endMovieRange = beginMovieRange + _sliderItemDetails.length;
            beginPersonRange = endMovieRange;
            _sliderItemDetails.clear();
          }
        }

        if (personTrendingList != null && personTrendingList.length > 0) {
          for (DefaultMainPersonResultsModel personTrending
              in personTrendingList) {
            if (personTrending.name != null &&
                personTrending.name != "" &&
                personTrending.profile_path != null &&
                personTrending.profile_path != "") {
              if (_sliderItemDetails.length <= 3) {
                _sliderItemDetails.add({
                  "imageUrl": personTrending.profile_path,
                  "name": personTrending.name
                });
              }
            }
          }

          if (_sliderItemDetails != null && _sliderItemDetails.length > 0) {
            sliderItemDetailsList.addAll(_sliderItemDetails);
            endPersonRange = beginPersonRange + _sliderItemDetails.length;
            beginGameRange = endPersonRange;
            _sliderItemDetails.clear();
          }
        }

        if (sliderItemDetailsList != null && sliderItemDetailsList.length > 0) {
          if (_currentIndex == 0) {
            customSliderItemDetailsList.clear();
            customSliderItemDetailsList =
                sliderItemDetailsList.sublist(0, endTvRange);

            customSliderItemDetailsList.shuffle();
          } else if (_currentIndex == 1) {
            customSliderItemDetailsList.clear();
            customSliderItemDetailsList =
                sliderItemDetailsList.sublist(beginMovieRange, endMovieRange);

            customSliderItemDetailsList.shuffle();
          } else if (_currentIndex == 2) {
            customSliderItemDetailsList.clear();
            customSliderItemDetailsList =
                sliderItemDetailsList.sublist(beginPersonRange, endPersonRange);

            customSliderItemDetailsList.shuffle();
          }

          if (customSliderItemDetailsList != null &&
              customSliderItemDetailsList.length > 0) {
            for (int i = 0; i < customSliderItemDetailsList.length; i++) {
              randomSliderPositionsList.add(i);
            }

            double sliderLength = customSliderItemDetailsList.length.toDouble();

            defaultSlidingValue = 1.0 / sliderLength;
            currentSlidingValue = 1.0 / sliderLength;
          }
        }
      });
    }
  }

  Future fetchPopularItems(int page) async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/popular?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    DefaultMainTvShowModel defaultTvShowMainModel =
        DefaultMainTvShowModel.fromJson(json.decode(response.body));

    if (this.mounted) {
      setState(() {
        tvShowPopularList.addAll(defaultTvShowMainModel.results);
        tvShowPopularList.shuffle();
      });
    }

    listItemEntryAnimationController.forward();
    popularListItemTextEntryAnimationController.forward();
  }

  Future fetchTopRatedItems() async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/top_rated?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    if (this.mounted) {
      setState(() {
        DefaultMainTvShowModel defaultTvShowMainModel =
            DefaultMainTvShowModel.fromJson(json.decode(response.body));
        tvShowTopRatedList = defaultTvShowMainModel.results;
        tvShowTopRatedList.shuffle();
      });
    }

    topRatedListItemTextEntryAnimationController.forward();
  }

  Future fetchReleasingTodayItems() async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/airing_today?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    if (this.mounted) {
      setState(() {
        DefaultMainTvShowModel defaultTvShowMainModel =
            DefaultMainTvShowModel.fromJson(json.decode(response.body));
        tvShowReleasingTodayList = defaultTvShowMainModel.results;
        tvShowReleasingTodayList.shuffle();
      });
    }

    releasingTodayListItemTextEntryAnimationController.forward();
  }

  Future fetchNowPlayingItems() async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/on_the_air?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    if (this.mounted) {
      setState(() {
        DefaultMainTvShowModel defaultTvShowMainModel =
            DefaultMainTvShowModel.fromJson(json.decode(response.body));
        tvShowNowPlayingList = defaultTvShowMainModel.results;
        tvShowNowPlayingList.shuffle();
      });
    }

    nowPlayingListItemTextEntryAnimationController.forward();
  }

  ScrollController mainTvPageController;

  PageStorageBucket storageBucket = PageStorageBucket();

  @override
  void initState() {
    super.initState();

    this.fetchMainSliderItems();

    mainSliderPageController = PageController();
    mainSliderPageController.addListener(() {
      setState(() {
        mainSliderCurrentPage = mainSliderPageController.page;
      });
    });

    dragAnimationController = AnimationController(
      vsync: this,
    );

    heightFactorAnimation =
        Tween(begin: collapsedHeightFactor, end: expandedHeightFactor)
            .animate(dragAnimationController);

    cornerRadiusAnimation =
        Tween(begin: expandedCornerRadius, end: collapsedCornerRadius)
            .animate(dragAnimationController);

    colorOpacityAnimation =
        Tween(begin: expandedColorOpacity, end: collapsedColorOpacity)
            .animate(dragAnimationController);

    opacityAnimation = Tween(begin: expandedOpacity, end: collapsedOpacity)
        .animate(dragAnimationController);

    sliderTopCenterOpacityAnimation = Tween(
            begin: expandedSliderTopCenterOpacity,
            end: collapsedSliderTopCenterOpacity)
        .animate(dragAnimationController);

    sliderAnimationController = AnimationController(
      duration: Duration(seconds: 60),
      vsync: this,
    );
    sliderAnimationController.forward();

    sliderAnimationController.addStatusListener((status) {
      if (status == AnimationStatus.completed) {
        sliderAnimationController.reverse();
        setState(() {
          _animationStatus = true;
        });
      } else if (status == AnimationStatus.dismissed) {
        sliderAnimationController.forward();
        setState(() {
          _animationStatus = false;
        });
      }
    });

    sliderAnimationController.addListener(() {
      if (sliderAnimationController.value >= defaultSlidingValue) {
        if (_animationStatus) {
          if (sliderAnimationController.value <= currentSlidingValue) {
            if (this.mounted) {
              setState(() {
                currentSlidingValue = currentSlidingValue - defaultSlidingValue;

                randomSliderPositionsList.shuffle();

                int randomSlider = randomSliderPosition
                    .nextInt(randomSliderPositionsList.length - 1);

                mainSliderPageController.animateToPage(
                  randomSliderPositionsList[randomSlider],
                  duration: Duration(seconds: 1),
                  curve: Curves.easeInOutCubic,
                );
              });
            }
          }
        } else {
          if (sliderAnimationController.value > currentSlidingValue) {
            if (this.mounted) {
              setState(() {
                currentSlidingValue = currentSlidingValue + defaultSlidingValue;

                randomSliderPositionsList.shuffle();

                int randomSlider = randomSliderPosition
                    .nextInt(randomSliderPositionsList.length - 1);

                mainSliderPageController.animateToPage(
                  randomSliderPositionsList[randomSlider],
                  duration: Duration(seconds: 1),
                  curve: Curves.easeInOutCubic,
                );
              });
            }
          }
        }
      }
    });

    sliderEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1000),
    );

    sliderEntryAnimationController.forward();

    sliderTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 500),
    );
    sliderTextEntryAnimationController.forward();

    sliderTextEntryAnimation = Tween(
      begin: 0.0,
      end: 1.0,
    ).animate(sliderTextEntryAnimationController);

    mainPageTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 2000),
    );

    mainPageTextEntryAnimationController.forward();

    listItemEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 2000),
    );

    popularListItemTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1000),
    );

    topRatedListItemTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1000),
    );

    releasingTodayListItemTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1000),
    );

    nowPlayingListItemTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1000),
    );

    backListItemChangeAnimationController = AnimationController(
      vsync: this,
    );

    backListItemChangeAnimation = Tween(
      begin: 0.8,
      end: 1.0,
    ).animate(backListItemChangeAnimationController);

    frontListItemChangeAnimationController = AnimationController(
      vsync: this,
    );

    frontListItemChangeAnimation = Tween(
      begin: 1.0,
      end: 0.8,
    ).animate(frontListItemChangeAnimationController);

    Timer(Duration(seconds: 2), () {
      this.fetchPopularItems(1);
    });

    Timer(Duration(seconds: 4), () {
      this.fetchTopRatedItems();
    });

    Timer(Duration(seconds: 6), () {
      this.fetchReleasingTodayItems();
    });

    Timer(Duration(seconds: 8), () {
      this.fetchNowPlayingItems();
    });

    popularPageController = PageController();
    popularPageController.addListener(() {
      setState(() {
        popularCurrentPage = popularPageController.page;
      });
    });

    topRatedPageController = PageController();
    topRatedPageController.addListener(() {
      setState(() {
        topRatedCurrentPage = topRatedPageController.page;
      });
    });

    releasingTodayPageController = PageController();
    releasingTodayPageController.addListener(() {
      setState(() {
        releasingTodayCurrentPage = releasingTodayPageController.page;
      });
    });

    nowPlayingPageController = PageController(viewportFraction: 0.75);
    nowPlayingPageController.addListener(() {
      setState(() {
        nowPlayingCurrentPage = nowPlayingPageController.page;
      });
    });

    mainTvPageController = ScrollController();

    _colors.add(Colors.green);
    _colors.add(Colors.blue);
    _colors.add(Colors.yellow);
    _colors.add(Colors.purple);
    _colors.add(Colors.deepOrange);

    progressSliderAnimationController = AnimationController(
      vsync: this,
      duration: Duration(
        seconds: 2,
      ),
    );

    progressSliderAnimationController.forward();

    percentageAnimation = Tween(
      begin: 0.0,
      end: 1.0,
    ).animate(sliderAnimationController);
  }

  @override
  void dispose() {
    dragAnimationController.dispose();
    sliderAnimationController.dispose();
    sliderEntryAnimationController.dispose();
    sliderTextEntryAnimationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    mediaQueryData = MediaQuery.of(context);

    screenWidth = mediaQueryData.size.width;
    screenHeight = mediaQueryData.size.height;

    return AnimatedBuilder(
      animation: sliderEntryAnimationController,
      builder: (context, widget) {
        return Scaffold(
          bottomNavigationBar: CustomCurvedNavigationBar(
            index: _currentIndex,
            buttonBackgroundColor: _bgColorList[_currentIndex],
            color: _bgColorList[_currentIndex],
            animationCurve: Curves.easeInOut,
            height: 60.0,
            items: iconList(25.0, Colors.white),
            onTap: (index) {
              if (this.mounted) {
                setState(() {
                  _currentIndex = index;

                  if (sliderItemDetailsList != null &&
                      sliderItemDetailsList.length > 0) {
                    if (_currentIndex == 0) {
                      customSliderItemDetailsList.clear();
                      customSliderItemDetailsList =
                          sliderItemDetailsList.sublist(0, endTvRange);
                      customSliderItemDetailsList.shuffle();
                    } else if (_currentIndex == 1) {
                      customSliderItemDetailsList.clear();
                      customSliderItemDetailsList = sliderItemDetailsList
                          .sublist(beginMovieRange, endMovieRange);
                      customSliderItemDetailsList.shuffle();
                    } else if (_currentIndex == 2) {
                      customSliderItemDetailsList.clear();
                      customSliderItemDetailsList = sliderItemDetailsList
                          .sublist(beginPersonRange, endPersonRange);
                      customSliderItemDetailsList.shuffle();
                    }
                  }
                });
              }

              if (tvShowNowPlayingList != null &&
                  tvShowNowPlayingList.length > 0) {
                tvShowNowPlayingList.shuffle();
              }
              if (tvShowReleasingTodayList != null &&
                  tvShowReleasingTodayList.length > 0) {
                tvShowReleasingTodayList.shuffle();
              }
              if (tvShowPopularList != null && tvShowPopularList.length > 0) {
                tvShowPopularList.shuffle();
              }
              if (tvShowTopRatedList != null && tvShowTopRatedList.length > 0) {
                tvShowTopRatedList.shuffle();
              }

              sliderEntryAnimationController.reset();
              sliderEntryAnimationController.forward();

              sliderTextEntryAnimationController.reset();
              sliderTextEntryAnimationController.forward();

              mainPageTextEntryAnimationController.reset();
              mainPageTextEntryAnimationController.forward();

              listItemEntryAnimationController.reset();
              listItemEntryAnimationController.forward();

              topRatedListItemTextEntryAnimationController.reset();
              topRatedListItemTextEntryAnimationController.forward();

              popularListItemTextEntryAnimationController.reset();
              popularListItemTextEntryAnimationController.forward();

              releasingTodayListItemTextEntryAnimationController.reset();
              releasingTodayListItemTextEntryAnimationController.forward();

              nowPlayingListItemTextEntryAnimationController.reset();
              nowPlayingListItemTextEntryAnimationController.forward();
            },
          ),
          body: Container(
            color: _bgColorList[_currentIndex],
            child: AnimatedBuilder(
              animation: dragAnimationController,
              builder: (context, widget) {
                return Stack(
                  fit: StackFit.expand,
                  children: <Widget>[
                    FractionallySizedBox(
                      alignment: Alignment.topCenter,
                      heightFactor: heightFactorAnimation.value,
                      child: customSliderItemDetailsList == null ||
                              customSliderItemDetailsList.length <= 0
                          ? iconList(
                              80.0,
                              Colors.white.withOpacity(opacityAnimation.value),
                            )[_currentIndex]
                          : PageView.builder(
                              physics: BouncingScrollPhysics(),
                              controller: mainSliderPageController,
                              onPageChanged: (index) {
                                setState(() {
                                  _currentSliderIndex = index;
                                });
                                sliderTextEntryAnimationController.reset();
                                sliderTextEntryAnimationController.forward();
                              },
                              itemBuilder: (context, index) {
                                if (customSliderItemDetailsList[index]
                                            ["imageUrl"] ==
                                        null ||
                                    customSliderItemDetailsList[index]
                                            ["imageUrl"] ==
                                        "") {
                                  return iconList(
                                      80.0,
                                      Colors.white.withOpacity(opacityAnimation
                                          .value))[_currentIndex];
                                }
                                return AnimatedBuilder(
                                  animation: sliderEntryAnimationController,
                                  builder: (context, widget) {
                                    return buildMainSliderListItems(
                                      customSliderItemDetailsList[index],
                                      mainSliderCurrentPage,
                                      index,
                                    );
                                  },
                                );
                              },
                              itemCount: customSliderItemDetailsList.length,
                            ),
                    ),
                    FractionallySizedBox(
                      alignment: Alignment.topCenter,
                      heightFactor: expandedHeightFactor - 0.01,
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: <Widget>[
                          Expanded(
                            flex: 1,
                            child: Container(
                              child: Icon(
                                Icons.menu,
                                color: Colors.white,
                              ),
                            ),
                          ),
                          Expanded(
                            flex: 5,
                            child: Container(
                              padding: EdgeInsets.only(
                                left: 15.0,
                                bottom: 6.0,
                              ),
                              child: Text(
                                _tabBarTextList[_currentIndex],
                                textAlign: TextAlign.start,
                                style: TextStyle(
                                  fontFamily: "ConcertOne-Regular",
                                  color: Colors.white,
                                  fontSize: 20,
                                ),
                              ),
                            ),
                          ),
                          Expanded(
                            flex: 1,
                            child: Container(
                              child: Icon(
                                Icons.search,
                                color: Colors.white,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                    FractionallySizedBox(
                      alignment: Alignment.bottomCenter,
                      heightFactor: 1.16 - heightFactorAnimation.value,
                      child: _currentSliderIndex == null ||
                              customSliderItemDetailsList == null ||
                              customSliderItemDetailsList.length <= 0
                          ? Container()
                          : AnimatedBuilder(
                              animation: sliderTextEntryAnimationController,
                              builder: (context, widget) {
                                return Opacity(
                                  opacity: sliderTextEntryAnimation.value,
                                  child: Container(
                                    decoration: BoxDecoration(
                                      gradient: LinearGradient(
                                        begin: Alignment.center,
                                        end: Alignment.topCenter,
                                        colors: [
                                          Colors.black.withOpacity(
                                              opacityAnimation.value),
                                          Colors.black.withOpacity(
                                            sliderTopCenterOpacityAnimation
                                                .value,
                                          ),
                                        ],
                                      ),
                                    ),
                                    child: Opacity(
                                      opacity: opacityAnimation.value,
                                      child: Column(
                                        crossAxisAlignment:
                                            CrossAxisAlignment.center,
                                        children: <Widget>[
                                          Container(
                                            alignment: Alignment.topCenter,
                                            child: Text(
                                              _currentSliderIndex == null
                                                  ? ""
                                                  : customSliderItemDetailsList[
                                                                      _currentSliderIndex]
                                                                  ["name"] ==
                                                              null ||
                                                          customSliderItemDetailsList[
                                                                      _currentSliderIndex]
                                                                  ["name"] ==
                                                              ""
                                                      ? ""
                                                      : customSliderItemDetailsList[
                                                              _currentSliderIndex]
                                                          ["name"],
                                              maxLines: 1,
                                              textAlign: TextAlign.center,
                                              style: TextStyle(
                                                fontFamily:
                                                    "ConcertOne-Regular",
                                                color: Colors.white.withOpacity(
                                                    sliderTextEntryAnimation
                                                        .value),
                                                fontSize: 20,
                                              ),
                                            ),
                                          ),
                                          _currentSliderIndex == null ||
                                                  customSliderItemDetailsList ==
                                                      null ||
                                                  customSliderItemDetailsList
                                                          .length <=
                                                      0
                                              ? Container()
                                              : Expanded(
                                                  child: Container(
                                                    width: screenWidth - 245,
                                                    margin:
                                                        EdgeInsets.all(10.0),
                                                    child: ListView.builder(
                                                      scrollDirection:
                                                          Axis.horizontal,
                                                      itemBuilder:
                                                          (context, index) {
                                                        if (_currentSliderIndex ==
                                                            index) {
                                                          return GestureDetector(
                                                            onTap: () {
                                                              mainSliderPageController
                                                                  .animateToPage(
                                                                index,
                                                                duration:
                                                                    Duration(
                                                                        seconds:
                                                                            1),
                                                                curve: Curves
                                                                    .easeInOutCubic,
                                                              );
                                                            },
                                                            child: Align(
                                                              alignment:
                                                                  Alignment
                                                                      .topCenter,
                                                              child:
                                                                  AnimatedContainer(
                                                                duration: Duration(
                                                                    milliseconds:
                                                                        300),
                                                                height: 10.0,
                                                                width: 10.0,
                                                                margin:
                                                                    EdgeInsets
                                                                        .only(
                                                                  left: 10.0,
                                                                  right: 10.0,
                                                                  top: 5.0,
                                                                ),
                                                                decoration: BoxDecoration(
                                                                    shape: BoxShape
                                                                        .circle,
                                                                    color: Colors
                                                                        .white,
                                                                    boxShadow: [
                                                                      BoxShadow(
                                                                        color: Colors
                                                                            .white,
                                                                        spreadRadius:
                                                                            1.0,
                                                                      ),
                                                                    ]),
                                                              ),
                                                            ),
                                                          );
                                                        } else {
                                                          return GestureDetector(
                                                            onTap: () {
                                                              mainSliderPageController
                                                                  .animateToPage(
                                                                index,
                                                                duration:
                                                                    Duration(
                                                                        seconds:
                                                                            1),
                                                                curve: Curves
                                                                    .easeInOutCubic,
                                                              );
                                                            },
                                                            child: Align(
                                                              alignment:
                                                                  Alignment
                                                                      .topCenter,
                                                              child:
                                                                  AnimatedContainer(
                                                                duration: Duration(
                                                                    milliseconds:
                                                                        400),
                                                                height: 8.0,
                                                                width: 8.0,
                                                                margin: EdgeInsets
                                                                    .all(10.0),
                                                                decoration:
                                                                    BoxDecoration(
                                                                  shape: BoxShape
                                                                      .circle,
                                                                  border: Border
                                                                      .all(
                                                                    width: 1.0,
                                                                    color: Colors
                                                                        .white,
                                                                  ),
                                                                ),
                                                              ),
                                                            ),
                                                          );
                                                        }
                                                      },
                                                      itemCount:
                                                          customSliderItemDetailsList
                                                              .length,
                                                    ),
                                                  ),
                                                ),
                                        ],
                                      ),
                                    ),
                                  ),
                                );
                              },
                            ),
                    ),
                    FractionallySizedBox(
                      alignment: Alignment.bottomCenter,
                      heightFactor: 1.05 - heightFactorAnimation.value,
                      child: Container(
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.only(
                            topLeft:
                                Radius.circular(cornerRadiusAnimation.value),
                            topRight:
                                Radius.circular(cornerRadiusAnimation.value),
                          ),
                        ),
                        child: buildMainPageItems(0),
                      ),
                    ),
                  ],
                );
              },
            ),
          ),
        );
      },
    );
  }

  Widget buildMainSliderListItems(Map<String, String> sliderDetails,
      double mainSliderCurrentPage, int index) {
    if (index == mainSliderCurrentPage.floor()) {
      return Container(
        transform: Matrix4.identity()
          ..setFromTranslationRotationScale(
            VectorMath64.Vector3(
              -screenWidth * (index - mainSliderCurrentPage),
              0.0,
              0.0,
            ),
            VectorMath64.Quaternion(
              0.0,
              0.0,
              0.0,
              0.0,
            ),
            VectorMath64.Vector3(
              1 - (mainSliderCurrentPage - index),
              1,
              1,
            ),
          ),
        decoration: BoxDecoration(
          image: DecorationImage(
            image: NetworkImage(
              sliderDetails["imageUrl"],
            ),
            fit: BoxFit.cover,
            colorFilter: ColorFilter.mode(
              _bgColorList[_currentIndex]
                  .withOpacity(colorOpacityAnimation.value),
              BlendMode.srcOver,
            ),
          ),
        ),
        child: Container(
          color: Colors.white
              .withOpacity(1 - sliderEntryAnimationController.value),
        ),
      );
    } else if (index == mainSliderCurrentPage.floor() + 1) {
      return Container(
        transform: Matrix4.identity()
          ..setEntry(3, 0, 0.006 * -(mainSliderCurrentPage - index)),
        decoration: BoxDecoration(
          image: DecorationImage(
            image: NetworkImage(
              sliderDetails["imageUrl"],
            ),
            fit: BoxFit.cover,
            colorFilter: ColorFilter.mode(
              _bgColorList[_currentIndex]
                  .withOpacity(colorOpacityAnimation.value),
              BlendMode.srcOver,
            ),
          ),
        ),
        child: Container(
          color: Colors.white
              .withOpacity(1 - sliderEntryAnimationController.value),
        ),
      );
    } else {
      return Container(
        decoration: BoxDecoration(
          image: DecorationImage(
            image: NetworkImage(
              sliderDetails["imageUrl"],
            ),
            fit: BoxFit.cover,
            colorFilter: ColorFilter.mode(
              _bgColorList[_currentIndex]
                  .withOpacity(colorOpacityAnimation.value),
              BlendMode.srcOver,
            ),
          ),
        ),
        child: Container(
          color: Colors.white
              .withOpacity(1.0 - sliderEntryAnimationController.value),
        ),
      );
    }
  }

  PageStorage buildMainPageItems(int currentPage) {
    var pageStorageList = List<PageStorage>();

    pageStorageList.add(
      PageStorage(
        bucket: storageBucket,
        child: NotificationListener(
          onNotification: (scrollNotification) {
            if (scrollNotification is ScrollUpdateNotification) {
              if (scrollNotification.metrics.axis == Axis.vertical) {
                if (scrollNotification.metrics.pixels <
                    screenHeight -
                        scrollNotification.metrics.viewportDimension) {
                  double fractionalDragged =
                      scrollNotification.scrollDelta / screenHeight;
                  dragAnimationController.value =
                      dragAnimationController.value + (5 * fractionalDragged);
                }
              }
            }
          },
          child: ListView(
            key: PageStorageKey("tv_index1"),
            controller: mainTvPageController,
            children: <Widget>[
              Container(
                margin: EdgeInsets.only(
                  top: 15,
                  left: 10.0,
                  bottom: 10.0,
                  right: 15.0,
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    AnimatedBuilder(
                      animation: mainPageTextEntryAnimationController,
                      builder: (context, wdiget) {
                        return Text(
                          "Most Popular",
                          textAlign: TextAlign.start,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 18,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w500,
                            letterSpacing: 0.3,
                            color: Colors.black.withOpacity(
                                mainPageTextEntryAnimationController.value),
                          ),
                        );
                      },
                    ),
                    Expanded(
                      child: Container(
                        margin: EdgeInsets.only(top: 10.0),
                        child: Text(
                          "View more >",
                          textAlign: TextAlign.end,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 14,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w100,
                            color: Colors.white.withOpacity(0.0),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              tvShowPopularList == null || tvShowPopularList.length == 0
                  ? Container(
                      height: 200,
                      color: Colors.transparent,
                      child: Center(
                        child: LoadingBarIndicator(
                          numberOfBars: 5,
                          colors: _colors,
                          barSpacing: 5.0,
                          beginTweenValue: 10.0,
                          endTweenValue: 15.0,
                        ),
                      ),
                    )
                  : AnimatedBuilder(
                      animation: listItemEntryAnimationController,
                      builder: (context, widget) {
                        return Opacity(
                          opacity: listItemEntryAnimationController.value,
                          child: Transform(
                            transform: Matrix4.identity()
                              ..setEntry(
                                  3,
                                  0,
                                  0.006 *
                                      (1 -
                                          listItemEntryAnimationController
                                              .value)),
                            child: Transform.translate(
                              offset: Offset(
                                  screenWidth *
                                      (1 -
                                          listItemEntryAnimationController
                                              .value),
                                  0.0),
                              child: Container(
                                height: 330,
                                color: Colors.transparent,
                                child: PageStorage(
                                  bucket: storageBucket,
                                  child: PageView.builder(
                                    key: PageStorageKey("index1_most_popular"),
                                    controller: popularPageController,
                                    scrollDirection: Axis.horizontal,
                                    physics: BouncingScrollPhysics(),
                                    onPageChanged: (index) {
                                      popularListItemTextEntryAnimationController
                                          .reset();
                                      popularListItemTextEntryAnimationController
                                          .forward();
                                    },
                                    itemBuilder: (context, index) {
                                      if (tvShowPopularList[index] != null) {
                                        if (index ==
                                            popularCurrentPage.floor()) {
                                          return Transform.scale(
                                            scale: (1.0 -
                                                (popularCurrentPage - index)),
                                            child: buildTvShowMainListItems(
                                              tvShowPopularList[index]
                                                  .backdrop_path,
                                              tvShowPopularList[index].name,
                                              tvShowPopularList[index].id,
                                              tvShowPopularList[index]
                                                  .vote_average,
                                              popularListItemTextEntryAnimationController,
                                            ),
                                          );
                                        } else if (index ==
                                            popularCurrentPage.floor() + 1) {
                                          return Transform.scale(
                                            scale: (1.0 +
                                                (popularCurrentPage - index)),
                                            child: buildTvShowMainListItems(
                                              tvShowPopularList[index]
                                                  .backdrop_path,
                                              tvShowPopularList[index].name,
                                              tvShowPopularList[index].id,
                                              tvShowPopularList[index]
                                                  .vote_average,
                                              popularListItemTextEntryAnimationController,
                                            ),
                                          );
                                        } else {
                                          return buildTvShowMainListItems(
                                            tvShowPopularList[index]
                                                .backdrop_path,
                                            tvShowPopularList[index].name,
                                            tvShowPopularList[index].id,
                                            tvShowPopularList[index]
                                                .vote_average,
                                            popularListItemTextEntryAnimationController,
                                          );
                                        }
                                      } else {
                                        return Container();
                                      }
                                    },
                                    itemCount: tvShowPopularList.length,
                                  ),
                                ),
                              ),
                            ),
                          ),
                        );
                      },
                    ),
              Container(
                height: 1.0,
                margin: EdgeInsets.only(bottom: 10.0),
                decoration: BoxDecoration(
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black,
                    ),
                  ],
                ),
              ),
              Container(
                margin: EdgeInsets.only(
                  top: 15,
                  left: 10.0,
                  bottom: 10.0,
                  right: 15.0,
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    AnimatedBuilder(
                      animation: mainPageTextEntryAnimationController,
                      builder: (context, wdiget) {
                        return Text(
                          "Top Rated",
                          textAlign: TextAlign.start,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 18,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w500,
                            letterSpacing: 0.3,
                            color: Colors.black.withOpacity(
                                mainPageTextEntryAnimationController.value),
                          ),
                        );
                      },
                    ),
                    Expanded(
                      child: Container(
                        margin: EdgeInsets.only(top: 10.0),
                        child: Text(
                          "View more >",
                          textAlign: TextAlign.end,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 14,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w100,
                            color: Colors.white.withOpacity(0.0),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              tvShowTopRatedList == null || tvShowTopRatedList.length == 0
                  ? Container(
                      height: 200,
                      color: Colors.transparent,
                      child: Center(
                        child: LoadingBarIndicator(
                          numberOfBars: 5,
                          colors: _colors,
                          barSpacing: 5.0,
                          beginTweenValue: 10.0,
                          endTweenValue: 15.0,
                        ),
                      ),
                    )
                  : AnimatedBuilder(
                      animation: listItemEntryAnimationController,
                      builder: (context, widget) {
                        return Opacity(
                          opacity: listItemEntryAnimationController.value,
                          child: Transform(
                            transform: Matrix4.identity()
                              ..setEntry(
                                  3,
                                  0,
                                  0.006 *
                                      (1 -
                                          listItemEntryAnimationController
                                              .value)),
                            child: Transform.translate(
                              offset: Offset(
                                  screenWidth *
                                      (1 -
                                          listItemEntryAnimationController
                                              .value),
                                  0.0),
                              child: Container(
                                height: 330,
                                color: Colors.transparent,
                                child: PageStorage(
                                  bucket: storageBucket,
                                  child: PageView.builder(
                                    key: PageStorageKey("index1_top_rated"),
                                    controller: topRatedPageController,
                                    scrollDirection: Axis.horizontal,
                                    physics: BouncingScrollPhysics(),
                                    onPageChanged: (index) {
                                      topRatedListItemTextEntryAnimationController
                                          .reset();
                                      topRatedListItemTextEntryAnimationController
                                          .forward();
                                    },
                                    itemBuilder: (context, index) {
                                      if (index ==
                                          topRatedCurrentPage.floor()) {
                                        return Transform.scale(
                                          scale: (1.0 -
                                              (topRatedCurrentPage - index)),
                                          child: buildTvShowMainListItems(
                                            tvShowTopRatedList[index]
                                                .backdrop_path,
                                            tvShowTopRatedList[index].name,
                                            tvShowTopRatedList[index].id,
                                            tvShowTopRatedList[index]
                                                .vote_average,
                                            topRatedListItemTextEntryAnimationController,
                                          ),
                                        );
                                      } else if (index ==
                                          topRatedCurrentPage.floor() + 1) {
                                        return Transform.scale(
                                          scale: (1.0 +
                                              (topRatedCurrentPage - index)),
                                          child: buildTvShowMainListItems(
                                            tvShowTopRatedList[index]
                                                .backdrop_path,
                                            tvShowTopRatedList[index].name,
                                            tvShowTopRatedList[index].id,
                                            tvShowTopRatedList[index]
                                                .vote_average,
                                            topRatedListItemTextEntryAnimationController,
                                          ),
                                        );
                                      } else {
                                        return buildTvShowMainListItems(
                                          tvShowTopRatedList[index]
                                              .backdrop_path,
                                          tvShowTopRatedList[index].name,
                                          tvShowTopRatedList[index].id,
                                          tvShowTopRatedList[index]
                                              .vote_average,
                                          topRatedListItemTextEntryAnimationController,
                                        );
                                      }
                                    },
                                    itemCount: tvShowTopRatedList.length,
                                  ),
                                ),
                              ),
                            ),
                          ),
                        );
                      },
                    ),
              Container(
                height: 1.0,
                margin: EdgeInsets.only(bottom: 10.0),
                decoration: BoxDecoration(
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black,
                    ),
                  ],
                ),
              ),
              Container(
                margin: EdgeInsets.only(
                  top: 15,
                  left: 10.0,
                  bottom: 10.0,
                  right: 15.0,
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    AnimatedBuilder(
                      animation: mainPageTextEntryAnimationController,
                      builder: (context, wdiget) {
                        return Text(
                          "Releasing Today",
                          textAlign: TextAlign.start,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 18,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w500,
                            letterSpacing: 0.3,
                            color: Colors.black.withOpacity(
                                mainPageTextEntryAnimationController.value),
                          ),
                        );
                      },
                    ),
                    Expanded(
                      child: Container(
                        margin: EdgeInsets.only(top: 10.0),
                        child: Text(
                          "View more >",
                          textAlign: TextAlign.end,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 14,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w100,
                            color: Colors.white.withOpacity(0.0),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              tvShowReleasingTodayList == null ||
                      tvShowReleasingTodayList.length == 0
                  ? Container(
                      height: 200,
                      color: Colors.transparent,
                      child: Center(
                        child: LoadingBarIndicator(
                          numberOfBars: 5,
                          colors: _colors,
                          barSpacing: 5.0,
                          beginTweenValue: 10.0,
                          endTweenValue: 15.0,
                        ),
                      ),
                    )
                  : AnimatedBuilder(
                      animation: listItemEntryAnimationController,
                      builder: (context, widget) {
                        return Opacity(
                          opacity: listItemEntryAnimationController.value,
                          child: Transform(
                            transform: Matrix4.identity()
                              ..setEntry(
                                  3,
                                  0,
                                  0.006 *
                                      (1 -
                                          listItemEntryAnimationController
                                              .value)),
                            child: Transform.translate(
                              offset: Offset(
                                  screenWidth *
                                      (1 -
                                          listItemEntryAnimationController
                                              .value),
                                  0.0),
                              child: Container(
                                height: 330,
                                color: Colors.white,
                                child: PageStorage(
                                  bucket: storageBucket,
                                  child: PageView.builder(
                                    key: PageStorageKey(
                                        "index1_releasing_today"),
                                    controller: releasingTodayPageController,
                                    scrollDirection: Axis.horizontal,
                                    physics: BouncingScrollPhysics(),
                                    onPageChanged: (index) {
                                      releasingTodayListItemTextEntryAnimationController
                                          .reset();
                                      releasingTodayListItemTextEntryAnimationController
                                          .forward();
                                    },
                                    itemBuilder: (context, index) {
                                      if (index ==
                                          releasingTodayCurrentPage.floor()) {
                                        return Transform.scale(
                                          scale: (1.0 -
                                              (releasingTodayCurrentPage -
                                                  index)),
                                          child: buildTvShowMainListItems(
                                            tvShowReleasingTodayList[index]
                                                .backdrop_path,
                                            tvShowReleasingTodayList[index]
                                                .name,
                                            tvShowReleasingTodayList[index].id,
                                            tvShowReleasingTodayList[index]
                                                .vote_average,
                                            releasingTodayListItemTextEntryAnimationController,
                                          ),
                                        );
                                      } else if (index ==
                                          releasingTodayCurrentPage.floor() +
                                              1) {
                                        return Transform.scale(
                                          scale: (1.0 +
                                              (releasingTodayCurrentPage -
                                                  index)),
                                          child: buildTvShowMainListItems(
                                            tvShowReleasingTodayList[index]
                                                .backdrop_path,
                                            tvShowReleasingTodayList[index]
                                                .name,
                                            tvShowReleasingTodayList[index].id,
                                            tvShowReleasingTodayList[index]
                                                .vote_average,
                                            releasingTodayListItemTextEntryAnimationController,
                                          ),
                                        );
                                      } else {
                                        return buildTvShowMainListItems(
                                          tvShowReleasingTodayList[index]
                                              .backdrop_path,
                                          tvShowReleasingTodayList[index].name,
                                          tvShowReleasingTodayList[index].id,
                                          tvShowReleasingTodayList[index]
                                              .vote_average,
                                          releasingTodayListItemTextEntryAnimationController,
                                        );
                                      }
                                    },
                                    itemCount: tvShowReleasingTodayList.length,
                                  ),
                                ),
                              ),
                            ),
                          ),
                        );
                      },
                    ),
              Container(
                height: 1.0,
                margin: EdgeInsets.only(bottom: 10.0),
                decoration: BoxDecoration(
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black,
                    ),
                  ],
                ),
              ),
              Container(
                margin: EdgeInsets.only(
                  top: 15,
                  left: 10.0,
                  bottom: 10.0,
                  right: 15.0,
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    AnimatedBuilder(
                      animation: mainPageTextEntryAnimationController,
                      builder: (context, wdiget) {
                        return Text(
                          "Now Playing",
                          textAlign: TextAlign.start,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 18,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w500,
                            letterSpacing: 0.2,
                            color: Colors.black.withOpacity(
                                mainPageTextEntryAnimationController.value),
                          ),
                        );
                      },
                    ),
                    Expanded(
                      child: Container(
                        margin: EdgeInsets.only(top: 10.0),
                        child: Text(
                          "View more >",
                          textAlign: TextAlign.end,
                          style: TextStyle(
                            decoration: TextDecoration.none,
                            fontSize: 14,
                            fontFamily: 'ConcertOne-Regular',
                            fontWeight: FontWeight.w100,
                            color: Colors.white.withOpacity(0.0),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              tvShowNowPlayingList == null || tvShowNowPlayingList.length == 0
                  ? Container(
                      height: 200,
                      color: Colors.transparent,
                      child: Center(
                        child: LoadingBarIndicator(
                          numberOfBars: 5,
                          colors: _colors,
                          barSpacing: 5.0,
                          beginTweenValue: 10.0,
                          endTweenValue: 15.0,
                        ),
                      ),
                    )
                  : AnimatedBuilder(
                      animation: listItemEntryAnimationController,
                      builder: (context, widget) {
                        return Opacity(
                          opacity: listItemEntryAnimationController.value,
                          child: Transform(
                            transform: Matrix4.identity()
                              ..setEntry(
                                  3,
                                  0,
                                  0.006 *
                                      (1 -
                                          listItemEntryAnimationController
                                              .value)),
                            child: Transform.translate(
                              offset: Offset(
                                  screenWidth *
                                      (1 -
                                          listItemEntryAnimationController
                                              .value),
                                  0.0),
                              child: Container(
                                height: 250,
                                color: Colors.white,
                                child: PageStorage(
                                  bucket: storageBucket,
                                  child: PageView.builder(
                                    key: PageStorageKey("index1_now_playing"),
                                    controller: nowPlayingPageController,
                                    scrollDirection: Axis.horizontal,
                                    physics: BouncingScrollPhysics(),
                                    onPageChanged: (index) {
                                      nowPlayingListItemTextEntryAnimationController
                                          .reset();
                                      nowPlayingListItemTextEntryAnimationController
                                          .forward();

                                      progressSliderAnimationController.reset();
                                      progressSliderAnimationController
                                          .forward();
                                    },
                                    itemBuilder: (context, index) {
                                      if (index ==
                                          nowPlayingCurrentPage.floor()) {
                                        frontListItemChangeAnimationController
                                                .value =
                                            (nowPlayingCurrentPage - index);

                                        return Transform.scale(
                                          scale: (frontListItemChangeAnimation
                                              .value),
                                          child: buildTvShowMainListItems(
                                            tvShowNowPlayingList[index]
                                                .backdrop_path,
                                            tvShowNowPlayingList[index].name,
                                            tvShowNowPlayingList[index].id,
                                            tvShowNowPlayingList[index]
                                                .vote_average,
                                            nowPlayingListItemTextEntryAnimationController,
                                          ),
                                        );
                                      } else if (index ==
                                          nowPlayingCurrentPage.floor() + 1) {
                                        backListItemChangeAnimationController
                                                .value =
                                            1 - (index - nowPlayingCurrentPage);

                                        return Transform.scale(
                                          scale: (backListItemChangeAnimation
                                              .value),
                                          child: buildTvShowMainListItems(
                                            tvShowNowPlayingList[index]
                                                .backdrop_path,
                                            tvShowNowPlayingList[index].name,
                                            tvShowNowPlayingList[index].id,
                                            tvShowNowPlayingList[index]
                                                .vote_average,
                                            nowPlayingListItemTextEntryAnimationController,
                                          ),
                                        );
                                      } else {
                                        return Transform.scale(
                                          scale: 0.8,
                                          child: buildTvShowMainListItems(
                                            tvShowNowPlayingList[index]
                                                .backdrop_path,
                                            tvShowNowPlayingList[index].name,
                                            tvShowNowPlayingList[index].id,
                                            tvShowNowPlayingList[index]
                                                .vote_average,
                                            nowPlayingListItemTextEntryAnimationController,
                                          ),
                                        );
                                      }
                                    },
                                    itemCount: tvShowNowPlayingList.length,
                                  ),
                                ),
                              ),
                            ),
                          ),
                        );
                      },
                    ),
            ],
          ),
        ),
      ),
    );

    return pageStorageList[currentPage];
  }

  Widget buildTvShowMainListItems(String imageUrl, String name, int id,
      double rating, AnimationController _animationController) {
    percentageAnimation = Tween(
      begin: 0.0,
      end: rating *10,
    ).animate(sliderAnimationController);

    return GestureDetector(
      onTap: () {
        Navigator.push(
          context,
          NewPageTransition(
            widget: TvShowDetails(
              tvShowId: id,
            ),
          ),
        );
      },
      child: Container(
        margin: EdgeInsets.only(
          bottom: 20.0,
          top: 5.0,
        ),
        child: Stack(
          children: <Widget>[
            Align(
              alignment: Alignment.topCenter,
              child: Container(
                height: 250.0,
                width: screenWidth - 30,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.all(
                    Radius.circular(5.0),
                  ),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.grey,
                      spreadRadius: 1.5,
                      blurRadius: 2.0,
                    ),
                  ],
                  color: Colors.white,
                ),
                child: Stack(
                  children: <Widget>[
                    Align(
                      alignment: Alignment.topRight,
                      child: AnimatedBuilder(
                        animation: progressSliderAnimationController,
                        builder: (context, widget) {
                          return CustomPaint(
                            painter: SliderPaint(
                              percentageAnimation.value,
                              30.0,
                              Colors.deepPurple,
                            ),
                            child: Container(
                              width: 100,
                              height: 100,
                              child: Center(
                                child: Text(
                                  percentageAnimation.value.floor().toString() +
                                      "%",
                                  style: TextStyle(
                                    fontSize: 15,
                                    color: Colors.black,
                                    fontFamily: "ConcertOne-Regular",
                                  ),
                                ),
                              ),
                            ),
                          );
                        },
                      ),
                    ),
                    Align(
                      alignment: Alignment.bottomCenter,
                      child: Container(
                        width: screenWidth,
                        margin: EdgeInsets.only(
                          right: 20.0,
                          left: 20.0,
                          bottom: 20.0,
                        ),
                        child: AnimatedBuilder(
                          animation: _animationController,
                          builder: (context, wdiget) {
                            return Text(
                              name == null || name == "" ? "" : name,
                              textAlign: TextAlign.center,
                              maxLines: 1,
                              style: TextStyle(
                                fontFamily: "ConcertOne-Regular",
                                color: Colors.black
                                    .withOpacity(_animationController.value),
                                fontSize: 18,
                              ),
                            );
                          },
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
            Align(
              alignment: Alignment.topLeft,
              child: Transform.translate(
                offset: Offset(-15.0, 5.0),
                child: Container(
                  transform: Matrix4.identity()..setEntry(3, 0, 0.0015),
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.all(
                      Radius.circular(5.0),
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.grey,
                        spreadRadius: 2,
                        blurRadius: 5.0,
                        offset: Offset(-4.0, 3.0),
                      ),
                    ],
                    color: Colors.white,
                  ),
                  child: ClipRRect(
                    borderRadius: BorderRadius.all(
                      Radius.circular(5.0),
                    ),
                    child: imageUrl == null || imageUrl == ""
                        ? Container(
                            color: Colors.grey,
                            child: Icon(
                              Icons.live_tv,
                              color: Colors.grey[100],
                              size: 80,
                            ),
                          )
                        : Image.network(
                            imageUrl,
                            fit: BoxFit.cover,
                          ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}













import 'dart:async';
import 'dart:convert';
import 'dart:math';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:http/http.dart' as http;
import 'package:vector_math/vector_math_64.dart' as VectorMath64;
import 'package:date_format/date_format.dart' as DateFormat;

import 'Models/default_main_movie_model.dart';
import 'Models/default_main_movie_results_model.dart';
import 'Models/default_main_person_model.dart';
import 'Models/default_main_person_results_model.dart';
import 'Models/default_main_tv_show_model.dart';
import 'Models/default_main_tv_show_results_model.dart';

import 'Utils/circle_slider.dart';
import 'Utils/loading_bar_indicator.dart';
import 'Utils/NewPageTransition.dart';
import 'Utils/custom_curved_navigation_bar.dart';

import 'tv_show_details.dart';

void main() => runApp(MaterialApp(
      title: "Media Base",
      debugShowCheckedModeBanner: false,
      home: MediaBase(),
    ));

class MediaBase extends StatefulWidget {
  MediaBase({Key key}) : super(key: key);

  _MediaBaseState createState() => _MediaBaseState();
}

class _MediaBaseState extends State<MediaBase> with TickerProviderStateMixin {
  MediaQueryData mediaQueryData;

  double screenWidth;
  double screenHeight;

  int _currentIndex = 1;

  int _currentSliderIndex = 0;

  List<Color> _bgColorList = [
    Colors.green[400],
    Colors.deepPurple[400],
    Colors.blue[400],
  ];

  List _tabBarTextList = ["Tv Shows", "Movies", "Celebrities"];

  List<Widget> iconList(double _size, Color _color) {
    var iconList = List<Widget>();

    iconList.add(Icon(
      Icons.live_tv,
      size: _size,
      color: _color,
    ));
    iconList.add(Icon(
      Icons.movie,
      size: _size,
      color: _color,
    ));
    iconList.add(Icon(
      Icons.people_outline,
      size: _size,
      color: _color,
    ));

    return iconList;
  }

  var _colors = List<Color>();

  var sliderItemDetailsList = List<Map<String, String>>();
  var customSliderItemDetailsList = List<Map<String, String>>();

  AnimationController dragAnimationController;
  AnimationController sliderAnimationController;
  AnimationController sliderEntryAnimationController;
  AnimationController sliderTextEntryAnimationController;

  AnimationController mainPageTextEntryAnimationController;

  AnimationController listItemEntryAnimationController;

  AnimationController popularListItemTextEntryAnimationController;
  AnimationController topRatedListItemTextEntryAnimationController;
  AnimationController releasingTodayListItemTextEntryAnimationController;
  AnimationController nowPlayingListItemTextEntryAnimationController;

  AnimationController backPopularListItemChangeAnimationController;
  AnimationController frontPopularListItemChangeAnimationController;

  AnimationController backAnticipatedListItemChangeAnimationController;
  AnimationController frontAnticipatedListItemChangeAnimationController;

  AnimationController backUpcomingListItemChangeAnimationController;
  AnimationController frontUpcomingListItemChangeAnimationController;

  AnimationController backNowPlayingListItemChangeAnimationController;
  AnimationController frontNowPlayingItemChangeAnimationController;

  double defaultSlidingValue = 1.0 / 4.0;

  double currentSlidingValue = 1.0 / 4.0;

  var randomSliderPosition = Random();

  var randomSliderPositionsList = List<int>();

  bool _animationStatus = false;

  int endTvRange;
  int beginMovieRange;
  int endMovieRange;
  int beginPersonRange;
  int endPersonRange;
  int beginGameRange;
  int endGameRange;

  Animation<double> heightFactorAnimation;
  Animation<double> cornerRadiusAnimation;
  Animation<double> colorOpacityAnimation;
  Animation<double> opacityAnimation;
  Animation<double> sliderTextEntryAnimation;
  Animation<double> sliderTopCenterOpacityAnimation;

  Animation<double> backPopularListItemChangeAnimation;
  Animation<double> frontPopularListItemChangeAnimation;

  Animation<double> backAnticipatedListItemChangeAnimation;
  Animation<double> frontAnticipatedListItemChangeAnimation;

  Animation<double> backUpcomingListItemChangeAnimation;
  Animation<double> frontUpcomingListItemChangeAnimation;

  Animation<double> backNowPlayingListItemChangeAnimation;
  Animation<double> frontNowPlayingListItemChangeAnimation;

  double collapsedHeightFactor = 0.60;
  double expandedHeightFactor = 0.20;

  double collapsedCornerRadius = 0.0;
  double expandedCornerRadius = 30.0;

  double expandedColorOpacity = 0.0;
  double collapsedColorOpacity = 1.0;

  double expandedOpacity = 1.0;
  double collapsedOpacity = 0.0;

  double collapsedSliderTopCenterOpacity = 0.0;
  double expandedSliderTopCenterOpacity = 0.2;

  PageController mainSliderPageController;
  double mainSliderCurrentPage = 0.0;

  PageController popularPageController;
  double popularCurrentPage = 0.0;

  PageController topRatedPageController;
  double topRatedCurrentPage = 0.0;

  PageController releasingTodayPageController;
  double releasingTodayCurrentPage = 0.0;

  PageController nowPlayingPageController;
  double nowPlayingCurrentPage = 0.0;

  var tvTrendingList = List<DefaultMainTvShowResultsModel>();
  var movieTrendingList = List<DefaultMainMovieResultsModel>();
  var personTrendingList = List<DefaultMainPersonResultsModel>();

  var tvShowPopularList = List<DefaultMainTvShowResultsModel>();
  var tvShowTopRatedList = List<DefaultMainTvShowResultsModel>();
  var tvShowReleasingTodayList = List<DefaultMainTvShowResultsModel>();
  var tvShowNowPlayingList = List<DefaultMainTvShowResultsModel>();

  Future fetchMainSliderItems() async {
    var _sliderItemDetails = List<Map<String, String>>();

    DefaultMainTvShowModel tvResponseModel;
    DefaultMainMovieModel movieResponseModel;
    DefaultMainPersonModel personResponseModel;

    final tvResponse = await http.get(
      Uri.encodeFull(
          'https://api.themoviedb.org/3/trending/tv/day?api_key=63e2f7bc00c513994d63c9be541a08d1'),
      headers: {
        "Accept": "application/json",
      },
    );

    final movieResponse = await http.get(
      Uri.encodeFull(
          'https://api.themoviedb.org/3/trending/movie/day?api_key=63e2f7bc00c513994d63c9be541a08d1'),
      headers: {
        "Accept": "application/json",
      },
    );

    final personResponse = await http.get(
      Uri.encodeFull(
          'https://api.themoviedb.org/3/trending/person/day?api_key=63e2f7bc00c513994d63c9be541a08d1'),
      headers: {
        "Accept": "application/json",
      },
    );

    if (this.mounted) {
      setState(() {
        if (tvResponse.statusCode == 200) {
          tvResponseModel =
              DefaultMainTvShowModel.fromJson(json.decode(tvResponse.body));
        }

        if (movieResponse.statusCode == 200) {
          movieResponseModel =
              DefaultMainMovieModel.fromJson(json.decode(movieResponse.body));
        }

        if (personResponse.statusCode == 200) {
          personResponseModel =
              DefaultMainPersonModel.fromJson(json.decode(personResponse.body));
        }

        if (tvResponseModel != null && tvResponseModel.results.length > 0) {
          tvTrendingList = tvResponseModel.results;
        }

        if (movieResponseModel != null &&
            movieResponseModel.results.length > 0) {
          movieTrendingList = movieResponseModel.results;
        }

        if (personResponseModel != null &&
            personResponseModel.results.length > 0) {
          personTrendingList = personResponseModel.results;
        }

        if (tvTrendingList != null && tvTrendingList.length > 0) {
          for (DefaultMainTvShowResultsModel tvTrending in tvTrendingList) {
            if (tvTrending.name != null &&
                tvTrending.name != "" &&
                tvTrending.backdrop_path != null &&
                tvTrending.backdrop_path != "") {
              if (_sliderItemDetails.length <= 3) {
                _sliderItemDetails.add({
                  "imageUrl": tvTrending.backdrop_path,
                  "name": tvTrending.name
                });
              }
            }
          }

          if (_sliderItemDetails != null && _sliderItemDetails.length > 0) {
            sliderItemDetailsList.addAll(_sliderItemDetails);
            endTvRange = _sliderItemDetails.length;
            beginMovieRange = endTvRange;
            _sliderItemDetails.clear();
          }
        }

        if (movieTrendingList != null && movieTrendingList.length > 0) {
          for (DefaultMainMovieResultsModel movieTrending
              in movieTrendingList) {
            if (movieTrending.title != null &&
                movieTrending.title != "" &&
                movieTrending.backdrop_path != null &&
                movieTrending.backdrop_path != "") {
              if (_sliderItemDetails.length <= 3) {
                _sliderItemDetails.add({
                  "imageUrl": movieTrending.backdrop_path,
                  "name": movieTrending.title
                });
              }
            }
          }

          if (_sliderItemDetails != null && _sliderItemDetails.length > 0) {
            sliderItemDetailsList.addAll(_sliderItemDetails);
            endMovieRange = beginMovieRange + _sliderItemDetails.length;
            beginPersonRange = endMovieRange;
            _sliderItemDetails.clear();
          }
        }

        if (personTrendingList != null && personTrendingList.length > 0) {
          for (DefaultMainPersonResultsModel personTrending
              in personTrendingList) {
            if (personTrending.name != null &&
                personTrending.name != "" &&
                personTrending.profile_path != null &&
                personTrending.profile_path != "") {
              if (_sliderItemDetails.length <= 3) {
                _sliderItemDetails.add({
                  "imageUrl": personTrending.profile_path,
                  "name": personTrending.name
                });
              }
            }
          }

          if (_sliderItemDetails != null && _sliderItemDetails.length > 0) {
            sliderItemDetailsList.addAll(_sliderItemDetails);
            endPersonRange = beginPersonRange + _sliderItemDetails.length;
            beginGameRange = endPersonRange;
            _sliderItemDetails.clear();
          }
        }

        if (sliderItemDetailsList != null && sliderItemDetailsList.length > 0) {
          if (_currentIndex == 0) {
            customSliderItemDetailsList.clear();
            customSliderItemDetailsList =
                sliderItemDetailsList.sublist(0, endTvRange);

            customSliderItemDetailsList.shuffle();
          } else if (_currentIndex == 1) {
            customSliderItemDetailsList.clear();
            customSliderItemDetailsList =
                sliderItemDetailsList.sublist(beginMovieRange, endMovieRange);

            customSliderItemDetailsList.shuffle();
          } else if (_currentIndex == 2) {
            customSliderItemDetailsList.clear();
            customSliderItemDetailsList =
                sliderItemDetailsList.sublist(beginPersonRange, endPersonRange);

            customSliderItemDetailsList.shuffle();
          }

          if (customSliderItemDetailsList != null &&
              customSliderItemDetailsList.length > 0) {
            for (int i = 0; i < customSliderItemDetailsList.length; i++) {
              randomSliderPositionsList.add(i);
            }

            double sliderLength = customSliderItemDetailsList.length.toDouble();

            defaultSlidingValue = 1.0 / sliderLength;
            currentSlidingValue = 1.0 / sliderLength;
          }
        }
      });
    }
  }

  Future fetchPopularItems(int page) async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/popular?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    DefaultMainTvShowModel defaultTvShowMainModel =
        DefaultMainTvShowModel.fromJson(json.decode(response.body));

    if (this.mounted) {
      setState(() {
        tvShowPopularList.addAll(defaultTvShowMainModel.results);
        tvShowPopularList.shuffle();
      });
    }

    listItemEntryAnimationController.forward();
    popularListItemTextEntryAnimationController.forward();
  }

  Future fetchTopRatedItems() async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/top_rated?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    if (this.mounted) {
      setState(() {
        DefaultMainTvShowModel defaultTvShowMainModel =
            DefaultMainTvShowModel.fromJson(json.decode(response.body));
        tvShowTopRatedList = defaultTvShowMainModel.results;
        tvShowTopRatedList.shuffle();
      });
    }

    topRatedListItemTextEntryAnimationController.forward();
  }

  Future fetchReleasingTodayItems() async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/airing_today?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    if (this.mounted) {
      setState(() {
        DefaultMainTvShowModel defaultTvShowMainModel =
            DefaultMainTvShowModel.fromJson(json.decode(response.body));
        tvShowReleasingTodayList = defaultTvShowMainModel.results;
        tvShowReleasingTodayList.shuffle();
      });
    }

    releasingTodayListItemTextEntryAnimationController.forward();
  }

  Future fetchNowPlayingItems() async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/on_the_air?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    if (this.mounted) {
      setState(() {
        DefaultMainTvShowModel defaultTvShowMainModel =
            DefaultMainTvShowModel.fromJson(json.decode(response.body));
        tvShowNowPlayingList = defaultTvShowMainModel.results;
        tvShowNowPlayingList.shuffle();
      });
    }

    nowPlayingListItemTextEntryAnimationController.forward();
  }

  ScrollController mainTvPageController;

  PageStorageBucket storageBucket = PageStorageBucket();

  @override
  void initState() {
    super.initState();

    this.fetchMainSliderItems();

    mainSliderPageController = PageController();
    mainSliderPageController.addListener(() {
      setState(() {
        mainSliderCurrentPage = mainSliderPageController.page;
      });
    });

    dragAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 100),
    );

    heightFactorAnimation =
        Tween(begin: collapsedHeightFactor, end: expandedHeightFactor)
            .animate(dragAnimationController);

    cornerRadiusAnimation =
        Tween(begin: expandedCornerRadius, end: collapsedCornerRadius)
            .animate(dragAnimationController);

    colorOpacityAnimation =
        Tween(begin: expandedColorOpacity, end: collapsedColorOpacity)
            .animate(dragAnimationController);

    opacityAnimation = Tween(begin: expandedOpacity, end: collapsedOpacity)
        .animate(dragAnimationController);

    sliderTopCenterOpacityAnimation = Tween(
            begin: expandedSliderTopCenterOpacity,
            end: collapsedSliderTopCenterOpacity)
        .animate(dragAnimationController);

    sliderAnimationController = AnimationController(
      duration: Duration(seconds: 60),
      vsync: this,
    );
    sliderAnimationController.forward();

    sliderAnimationController.addStatusListener((status) {
      if (status == AnimationStatus.completed) {
        sliderAnimationController.reverse();
        setState(() {
          _animationStatus = true;
        });
      } else if (status == AnimationStatus.dismissed) {
        sliderAnimationController.forward();
        setState(() {
          _animationStatus = false;
        });
      }
    });

    sliderAnimationController.addListener(() {
      if (sliderAnimationController.value >= defaultSlidingValue) {
        if (_animationStatus) {
          if (sliderAnimationController.value <= currentSlidingValue) {
            if (this.mounted) {
              setState(() {
                currentSlidingValue = currentSlidingValue - defaultSlidingValue;

                randomSliderPositionsList.shuffle();

                int randomSlider = randomSliderPosition
                    .nextInt(randomSliderPositionsList.length - 1);

                mainSliderPageController.animateToPage(
                  randomSliderPositionsList[randomSlider],
                  duration: Duration(seconds: 1),
                  curve: Curves.easeInOutCubic,
                );
              });
            }
          }
        } else {
          if (sliderAnimationController.value > currentSlidingValue) {
            if (this.mounted) {
              setState(() {
                currentSlidingValue = currentSlidingValue + defaultSlidingValue;

                randomSliderPositionsList.shuffle();

                int randomSlider = randomSliderPosition
                    .nextInt(randomSliderPositionsList.length - 1);

                mainSliderPageController.animateToPage(
                  randomSliderPositionsList[randomSlider],
                  duration: Duration(seconds: 1),
                  curve: Curves.easeInOutCubic,
                );
              });
            }
          }
        }
      }
    });

    sliderEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1000),
    );

    sliderEntryAnimationController.forward();

    sliderTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 500),
    );
    sliderTextEntryAnimationController.forward();

    sliderTextEntryAnimation = Tween(
      begin: 0.0,
      end: 1.0,
    ).animate(sliderTextEntryAnimationController);

    mainPageTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 2000),
    );

    mainPageTextEntryAnimationController.forward();

    listItemEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 2000),
    );

    popularListItemTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 2000),
    );

    popularListItemTextEntryAnimationController.forward();

    topRatedListItemTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 2000),
    );

    topRatedListItemTextEntryAnimationController.forward();

    releasingTodayListItemTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 2000),
    );

    releasingTodayListItemTextEntryAnimationController.forward();

    nowPlayingListItemTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 2000),
    );

    nowPlayingListItemTextEntryAnimationController.forward();

    backPopularListItemChangeAnimationController = AnimationController(
      vsync: this,
    );

    backPopularListItemChangeAnimation = Tween(
      begin: 0.8,
      end: 1.0,
    ).animate(backPopularListItemChangeAnimationController);

    frontPopularListItemChangeAnimationController = AnimationController(
      vsync: this,
    );

    frontPopularListItemChangeAnimation = Tween(
      begin: 1.0,
      end: 0.75,
    ).animate(frontPopularListItemChangeAnimationController);

    backAnticipatedListItemChangeAnimationController = AnimationController(
      vsync: this,
    );

    backAnticipatedListItemChangeAnimation = Tween(
      begin: 0.8,
      end: 1.0,
    ).animate(backAnticipatedListItemChangeAnimationController);

    frontAnticipatedListItemChangeAnimationController = AnimationController(
      vsync: this,
    );

    frontAnticipatedListItemChangeAnimation = Tween(
      begin: 1.0,
      end: 0.75,
    ).animate(frontAnticipatedListItemChangeAnimationController);

    backUpcomingListItemChangeAnimationController = AnimationController(
      vsync: this,
    );

    backUpcomingListItemChangeAnimation = Tween(
      begin: 0.8,
      end: 1.0,
    ).animate(backUpcomingListItemChangeAnimationController);

    frontUpcomingListItemChangeAnimationController = AnimationController(
      vsync: this,
    );

    frontUpcomingListItemChangeAnimation = Tween(
      begin: 1.0,
      end: 0.75,
    ).animate(frontUpcomingListItemChangeAnimationController);

    backNowPlayingListItemChangeAnimationController = AnimationController(
      vsync: this,
    );

    backNowPlayingListItemChangeAnimation = Tween(
      begin: 0.8,
      end: 1.0,
    ).animate(backNowPlayingListItemChangeAnimationController);

    frontNowPlayingItemChangeAnimationController = AnimationController(
      vsync: this,
    );

    frontNowPlayingListItemChangeAnimation = Tween(
      begin: 1.0,
      end: 0.75,
    ).animate(frontNowPlayingItemChangeAnimationController);

    Timer(Duration(seconds: 2), () {
      this.fetchPopularItems(1);
    });

    Timer(Duration(seconds: 4), () {
      this.fetchTopRatedItems();
    });

    Timer(Duration(seconds: 6), () {
      this.fetchReleasingTodayItems();
    });

    Timer(Duration(seconds: 8), () {
      this.fetchNowPlayingItems();
    });

    popularPageController = PageController(viewportFraction: 0.75);
    popularPageController.addListener(() {
      setState(() {
        popularCurrentPage = popularPageController.page;
      });
    });

    topRatedPageController = PageController(viewportFraction: 0.75);
    topRatedPageController.addListener(() {
      setState(() {
        topRatedCurrentPage = topRatedPageController.page;
      });
    });

    releasingTodayPageController = PageController(viewportFraction: 0.75);
    releasingTodayPageController.addListener(() {
      setState(() {
        releasingTodayCurrentPage = releasingTodayPageController.page;
      });
    });

    nowPlayingPageController = PageController(viewportFraction: 0.75);
    nowPlayingPageController.addListener(() {
      setState(() {
        nowPlayingCurrentPage = nowPlayingPageController.page;
      });
    });

    mainTvPageController = ScrollController();
    mainTvPageController.addListener(() {
      if (this.mounted) {
        double startAt = ((1.05 - heightFactorAnimation.value) * 100) + 100;

        if (mainTvPageController.offset > startAt) {
          dragAnimationController.forward();
        } else if (mainTvPageController.offset <= 0.0) {
          dragAnimationController.reverse();
        }

        if (mainTvPageController.offset <= startAt) {
          dragAnimationController.value = mainTvPageController.offset / startAt;
        }
      }
    });

    _colors.add(Colors.green);
    _colors.add(Colors.blue);
    _colors.add(Colors.yellow);
    _colors.add(Colors.purple);
    _colors.add(Colors.deepOrange);
  }

  @override
  void dispose() {
    dragAnimationController.dispose();
    sliderAnimationController.dispose();
    sliderEntryAnimationController.dispose();
    sliderTextEntryAnimationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    mediaQueryData = MediaQuery.of(context);

    screenWidth = mediaQueryData.size.width;
    screenHeight = mediaQueryData.size.height;

    return AnimatedBuilder(
      animation: sliderEntryAnimationController,
      builder: (context, widget) {
        return Scaffold(
          bottomNavigationBar: CustomCurvedNavigationBar(
            index: _currentIndex,
            buttonBackgroundColor: _bgColorList[_currentIndex],
            color: _bgColorList[_currentIndex],
            animationCurve: Curves.easeInOut,
            height: 60.0,
            items: iconList(25.0, Colors.white),
            onTap: (index) {
              if (this.mounted) {
                setState(() {
                  _currentIndex = index;

                  if (sliderItemDetailsList != null &&
                      sliderItemDetailsList.length > 0) {
                    if (_currentIndex == 0) {
                      customSliderItemDetailsList.clear();
                      customSliderItemDetailsList =
                          sliderItemDetailsList.sublist(0, endTvRange);
                      customSliderItemDetailsList.shuffle();
                    } else if (_currentIndex == 1) {
                      customSliderItemDetailsList.clear();
                      customSliderItemDetailsList = sliderItemDetailsList
                          .sublist(beginMovieRange, endMovieRange);
                      customSliderItemDetailsList.shuffle();
                    } else if (_currentIndex == 2) {
                      customSliderItemDetailsList.clear();
                      customSliderItemDetailsList = sliderItemDetailsList
                          .sublist(beginPersonRange, endPersonRange);
                      customSliderItemDetailsList.shuffle();
                    }
                  }
                });
              }

              if (tvShowNowPlayingList != null &&
                  tvShowNowPlayingList.length > 0) {
                tvShowNowPlayingList.shuffle();
              }
              if (tvShowReleasingTodayList != null &&
                  tvShowReleasingTodayList.length > 0) {
                tvShowReleasingTodayList.shuffle();
              }
              if (tvShowPopularList != null && tvShowPopularList.length > 0) {
                tvShowPopularList.shuffle();
              }
              if (tvShowTopRatedList != null && tvShowTopRatedList.length > 0) {
                tvShowTopRatedList.shuffle();
              }

              sliderEntryAnimationController.reset();
              sliderEntryAnimationController.forward();

              sliderTextEntryAnimationController.reset();
              sliderTextEntryAnimationController.forward();

              mainPageTextEntryAnimationController.reset();
              mainPageTextEntryAnimationController.forward();

              listItemEntryAnimationController.reset();
              listItemEntryAnimationController.forward();

              topRatedListItemTextEntryAnimationController.reset();
              topRatedListItemTextEntryAnimationController.forward();

              popularListItemTextEntryAnimationController.reset();
              popularListItemTextEntryAnimationController.forward();

              releasingTodayListItemTextEntryAnimationController.reset();
              releasingTodayListItemTextEntryAnimationController.forward();

              nowPlayingListItemTextEntryAnimationController.reset();
              nowPlayingListItemTextEntryAnimationController.forward();

              backPopularListItemChangeAnimationController.reset();
              backPopularListItemChangeAnimationController.forward();

              frontPopularListItemChangeAnimationController.reset();
              frontPopularListItemChangeAnimationController.forward();

              backAnticipatedListItemChangeAnimationController.reset();
              backAnticipatedListItemChangeAnimationController.forward();

              frontAnticipatedListItemChangeAnimationController.reset();
              frontAnticipatedListItemChangeAnimationController.forward();

              backUpcomingListItemChangeAnimationController.reset();
              backUpcomingListItemChangeAnimationController.forward();

              frontUpcomingListItemChangeAnimationController.reset();
              frontUpcomingListItemChangeAnimationController.forward();

              backNowPlayingListItemChangeAnimationController.reset();
              backNowPlayingListItemChangeAnimationController.forward();

              frontNowPlayingItemChangeAnimationController.reset();
              frontNowPlayingItemChangeAnimationController.forward();
            },
          ),
          body: Container(
            color: _bgColorList[_currentIndex],
            child: AnimatedBuilder(
              animation: dragAnimationController,
              builder: (context, widget) {
                return Stack(
                  fit: StackFit.expand,
                  children: <Widget>[
                    FractionallySizedBox(
                      alignment: Alignment.topCenter,
                      heightFactor: heightFactorAnimation.value,
                      child: customSliderItemDetailsList == null ||
                              customSliderItemDetailsList.length <= 0
                          ? iconList(
                              80.0,
                              Colors.white.withOpacity(opacityAnimation.value),
                            )[_currentIndex]
                          : PageView.builder(
                              physics: BouncingScrollPhysics(),
                              controller: mainSliderPageController,
                              onPageChanged: (index) {
                                setState(() {
                                  _currentSliderIndex = index;
                                });
                                sliderTextEntryAnimationController.reset();
                                sliderTextEntryAnimationController.forward();
                              },
                              itemBuilder: (context, index) {
                                if (customSliderItemDetailsList[index]
                                            ["imageUrl"] ==
                                        null ||
                                    customSliderItemDetailsList[index]
                                            ["imageUrl"] ==
                                        "") {
                                  return iconList(
                                      80.0,
                                      Colors.white.withOpacity(opacityAnimation
                                          .value))[_currentIndex];
                                }
                                return AnimatedBuilder(
                                  animation: sliderEntryAnimationController,
                                  builder: (context, widget) {
                                    return buildMainSliderListItems(
                                      customSliderItemDetailsList[index],
                                      mainSliderCurrentPage,
                                      index,
                                    );
                                  },
                                );
                              },
                              itemCount: customSliderItemDetailsList.length,
                            ),
                    ),
                    FractionallySizedBox(
                      alignment: Alignment.topCenter,
                      heightFactor: expandedHeightFactor - 0.01,
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: <Widget>[
                          Expanded(
                            flex: 1,
                            child: Container(
                              child: Icon(
                                Icons.menu,
                                color: Colors.white,
                              ),
                            ),
                          ),
                          Expanded(
                            flex: 5,
                            child: Container(
                              padding: EdgeInsets.only(
                                left: 15.0,
                                bottom: 6.0,
                              ),
                              child: Text(
                                _tabBarTextList[_currentIndex],
                                textAlign: TextAlign.start,
                                style: TextStyle(
                                  fontFamily: "ConcertOne-Regular",
                                  color: Colors.white,
                                  fontSize: 20,
                                ),
                              ),
                            ),
                          ),
                          Expanded(
                            flex: 1,
                            child: Container(
                              child: Icon(
                                Icons.search,
                                color: Colors.white,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                    FractionallySizedBox(
                      alignment: Alignment.bottomCenter,
                      heightFactor: 1.16 - heightFactorAnimation.value,
                      child: _currentSliderIndex == null ||
                              customSliderItemDetailsList == null ||
                              customSliderItemDetailsList.length <= 0
                          ? Container()
                          : AnimatedBuilder(
                              animation: sliderTextEntryAnimationController,
                              builder: (context, widget) {
                                return Opacity(
                                  opacity: sliderTextEntryAnimation.value,
                                  child: Container(
                                    decoration: BoxDecoration(
                                      gradient: LinearGradient(
                                        begin: Alignment.center,
                                        end: Alignment.topCenter,
                                        colors: [
                                          Colors.black.withOpacity(
                                              opacityAnimation.value),
                                          Colors.black.withOpacity(
                                            sliderTopCenterOpacityAnimation
                                                .value,
                                          ),
                                        ],
                                      ),
                                    ),
                                    child: Opacity(
                                      opacity: opacityAnimation.value,
                                      child: Column(
                                        crossAxisAlignment:
                                            CrossAxisAlignment.center,
                                        children: <Widget>[
                                          Container(
                                            alignment: Alignment.topCenter,
                                            child: Text(
                                              _currentSliderIndex == null
                                                  ? ""
                                                  : customSliderItemDetailsList[
                                                                      _currentSliderIndex]
                                                                  ["name"] ==
                                                              null ||
                                                          customSliderItemDetailsList[
                                                                      _currentSliderIndex]
                                                                  ["name"] ==
                                                              ""
                                                      ? ""
                                                      : customSliderItemDetailsList[
                                                              _currentSliderIndex]
                                                          ["name"],
                                              maxLines: 1,
                                              textAlign: TextAlign.center,
                                              style: TextStyle(
                                                fontFamily:
                                                    "ConcertOne-Regular",
                                                color: Colors.white.withOpacity(
                                                    sliderTextEntryAnimation
                                                        .value),
                                                fontSize: 20,
                                              ),
                                            ),
                                          ),
                                          _currentSliderIndex == null ||
                                                  customSliderItemDetailsList ==
                                                      null ||
                                                  customSliderItemDetailsList
                                                          .length <=
                                                      0
                                              ? Container()
                                              : Expanded(
                                                  child: Container(
                                                    width: screenWidth - 245,
                                                    margin:
                                                        EdgeInsets.all(10.0),
                                                    child: ListView.builder(
                                                      scrollDirection:
                                                          Axis.horizontal,
                                                      itemBuilder:
                                                          (context, index) {
                                                        if (_currentSliderIndex ==
                                                            index) {
                                                          return GestureDetector(
                                                            onTap: () {
                                                              mainSliderPageController
                                                                  .animateToPage(
                                                                index,
                                                                duration:
                                                                    Duration(
                                                                        seconds:
                                                                            1),
                                                                curve: Curves
                                                                    .easeInOutCubic,
                                                              );
                                                            },
                                                            child: Align(
                                                              alignment:
                                                                  Alignment
                                                                      .topCenter,
                                                              child:
                                                                  AnimatedContainer(
                                                                duration: Duration(
                                                                    milliseconds:
                                                                        300),
                                                                height: 10.0,
                                                                width: 10.0,
                                                                margin:
                                                                    EdgeInsets
                                                                        .only(
                                                                  left: 10.0,
                                                                  right: 10.0,
                                                                  top: 5.0,
                                                                ),
                                                                decoration: BoxDecoration(
                                                                    shape: BoxShape
                                                                        .circle,
                                                                    color: Colors
                                                                        .white,
                                                                    boxShadow: [
                                                                      BoxShadow(
                                                                        color: Colors
                                                                            .white,
                                                                        spreadRadius:
                                                                            1.0,
                                                                      ),
                                                                    ]),
                                                              ),
                                                            ),
                                                          );
                                                        } else {
                                                          return GestureDetector(
                                                            onTap: () {
                                                              mainSliderPageController
                                                                  .animateToPage(
                                                                index,
                                                                duration:
                                                                    Duration(
                                                                        seconds:
                                                                            1),
                                                                curve: Curves
                                                                    .easeInOutCubic,
                                                              );
                                                            },
                                                            child: Align(
                                                              alignment:
                                                                  Alignment
                                                                      .topCenter,
                                                              child:
                                                                  AnimatedContainer(
                                                                duration: Duration(
                                                                    milliseconds:
                                                                        400),
                                                                height: 8.0,
                                                                width: 8.0,
                                                                margin: EdgeInsets
                                                                    .all(10.0),
                                                                decoration:
                                                                    BoxDecoration(
                                                                  shape: BoxShape
                                                                      .circle,
                                                                  border: Border
                                                                      .all(
                                                                    width: 1.0,
                                                                    color: Colors
                                                                        .white,
                                                                  ),
                                                                ),
                                                              ),
                                                            ),
                                                          );
                                                        }
                                                      },
                                                      itemCount:
                                                          customSliderItemDetailsList
                                                              .length,
                                                    ),
                                                  ),
                                                ),
                                        ],
                                      ),
                                    ),
                                  ),
                                );
                              },
                            ),
                    ),
                    FractionallySizedBox(
                      alignment: Alignment.bottomCenter,
                      heightFactor: 1.05 - heightFactorAnimation.value,
                      child: Container(
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.only(
                            topLeft:
                                Radius.circular(cornerRadiusAnimation.value),
                            topRight:
                                Radius.circular(cornerRadiusAnimation.value),
                          ),
                        ),
                        child: buildMainPageItems(0),
                      ),
                    ),
                  ],
                );
              },
            ),
          ),
        );
      },
    );
  }

  Widget buildMainSliderListItems(Map<String, String> sliderDetails,
      double mainSliderCurrentPage, int index) {
    if (index == mainSliderCurrentPage.floor()) {
      return Container(
        transform: Matrix4.identity()
          ..setFromTranslationRotationScale(
            VectorMath64.Vector3(
              -screenWidth * (index - mainSliderCurrentPage),
              0.0,
              0.0,
            ),
            VectorMath64.Quaternion(
              0.0,
              0.0,
              0.0,
              0.0,
            ),
            VectorMath64.Vector3(
              1 - (mainSliderCurrentPage - index),
              1,
              1,
            ),
          ),
        decoration: BoxDecoration(
          image: DecorationImage(
            image: NetworkImage(
              sliderDetails["imageUrl"],
            ),
            fit: BoxFit.cover,
            colorFilter: ColorFilter.mode(
              _bgColorList[_currentIndex]
                  .withOpacity(colorOpacityAnimation.value),
              BlendMode.srcOver,
            ),
          ),
        ),
        child: Container(
          color: Colors.white
              .withOpacity(1 - sliderEntryAnimationController.value),
        ),
      );
    } else if (index == mainSliderCurrentPage.floor() + 1) {
      return Container(
        transform: Matrix4.identity()
          ..setEntry(3, 0, 0.006 * -(mainSliderCurrentPage - index)),
        decoration: BoxDecoration(
          image: DecorationImage(
            image: NetworkImage(
              sliderDetails["imageUrl"],
            ),
            fit: BoxFit.cover,
            colorFilter: ColorFilter.mode(
              _bgColorList[_currentIndex]
                  .withOpacity(colorOpacityAnimation.value),
              BlendMode.srcOver,
            ),
          ),
        ),
        child: Container(
          color: Colors.white
              .withOpacity(1 - sliderEntryAnimationController.value),
        ),
      );
    } else {
      return Container(
        decoration: BoxDecoration(
          image: DecorationImage(
            image: NetworkImage(
              sliderDetails["imageUrl"],
            ),
            fit: BoxFit.cover,
            colorFilter: ColorFilter.mode(
              _bgColorList[_currentIndex]
                  .withOpacity(colorOpacityAnimation.value),
              BlendMode.srcOver,
            ),
          ),
        ),
        child: Container(
          color: Colors.white
              .withOpacity(1.0 - sliderEntryAnimationController.value),
        ),
      );
    }
  }

  PageStorage buildMainPageItems(int currentPage) {
    var pageStorageList = List<PageStorage>();

    pageStorageList.add(
      PageStorage(
        bucket: storageBucket,
        child: ListView(
          key: PageStorageKey("tv_index1"),
          controller: mainTvPageController,
          children: <Widget>[
            Container(
              margin: EdgeInsets.only(
                top: 10.0,
                left: 10.0,
                bottom: 10.0,
                right: 15.0,
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
                  AnimatedBuilder(
                    animation: mainPageTextEntryAnimationController,
                    builder: (context, wdiget) {
                      return Text(
                        "Most Popular",
                        textAlign: TextAlign.start,
                        style: TextStyle(
                          decoration: TextDecoration.none,
                          fontSize: 18,
                          fontFamily: 'ConcertOne-Regular',
                          fontWeight: FontWeight.w500,
                          letterSpacing: 0.3,
                          color: Colors.black.withOpacity(
                              mainPageTextEntryAnimationController.value),
                        ),
                      );
                    },
                  ),
                  Expanded(
                    child: Container(
                      margin: EdgeInsets.only(top: 10.0),
                      child: Text(
                        "View more >",
                        textAlign: TextAlign.end,
                        style: TextStyle(
                          decoration: TextDecoration.none,
                          fontSize: 14,
                          fontFamily: 'ConcertOne-Regular',
                          fontWeight: FontWeight.w100,
                          color: Colors.white.withOpacity(0.0),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
            tvShowPopularList == null || tvShowPopularList.length == 0
                ? Container(
                    height: 200,
                    color: Colors.transparent,
                    child: Center(
                      child: LoadingBarIndicator(
                        numberOfBars: 5,
                        colors: _colors,
                        barSpacing: 5.0,
                        beginTweenValue: 10.0,
                        endTweenValue: 15.0,
                      ),
                    ),
                  )
                : AnimatedBuilder(
                    animation: listItemEntryAnimationController,
                    builder: (context, widget) {
                      return Opacity(
                        opacity: listItemEntryAnimationController.value,
                        child: Transform(
                          transform: Matrix4.identity()
                            ..setEntry(
                                3,
                                0,
                                0.006 *
                                    (1 -
                                        listItemEntryAnimationController
                                            .value)),
                          child: Transform.translate(
                            offset: Offset(
                                screenWidth *
                                    (1 -
                                        listItemEntryAnimationController.value),
                                0.0),
                            child: Container(
                              height: 260,
                              color: Colors.transparent,
                              child: PageStorage(
                                bucket: storageBucket,
                                child: PageView.builder(
                                  key: PageStorageKey("index1_most_popular"),
                                  controller: popularPageController,
                                  scrollDirection: Axis.horizontal,
                                  physics: BouncingScrollPhysics(),
                                  onPageChanged: (index) {
                                    popularListItemTextEntryAnimationController
                                        .reset();
                                    popularListItemTextEntryAnimationController
                                        .forward();
                                  },
                                  itemBuilder: (context, index) {
                                    if (tvShowPopularList[index] != null) {
                                      if (index == popularCurrentPage.floor()) {
                                        frontPopularListItemChangeAnimationController
                                                .value =
                                            (popularCurrentPage - index);

                                        return Transform.scale(
                                          scale:
                                              frontPopularListItemChangeAnimation
                                                  .value,
                                          child: buildTvShowMainListItems(
                                            tvShowPopularList[index].id,
                                            tvShowPopularList[index]
                                                .backdrop_path,
                                            tvShowPopularList[index].name,
                                            tvShowPopularList[index]
                                                .first_air_date
                                                .toString(),
                                            tvShowPopularList[index]
                                                .vote_average,
                                            tvShowPopularList[index].vote_count,
                                            popularListItemTextEntryAnimationController,
                                          ),
                                        );
                                      } else if (index ==
                                          popularCurrentPage.floor() + 1) {
                                        backPopularListItemChangeAnimationController
                                                .value =
                                            1 - (index - popularCurrentPage);
                                        return Opacity(
                                          opacity:
                                              backPopularListItemChangeAnimation
                                                  .value,
                                          child: Transform.scale(
                                            scale:
                                                backPopularListItemChangeAnimation
                                                    .value,
                                            child: buildTvShowMainListItems(
                                              tvShowPopularList[index].id,
                                              tvShowPopularList[index]
                                                  .backdrop_path,
                                              tvShowPopularList[index].name,
                                              tvShowPopularList[index]
                                                  .first_air_date
                                                  .toString(),
                                              tvShowPopularList[index]
                                                  .vote_average,
                                              tvShowPopularList[index]
                                                  .vote_count,
                                              popularListItemTextEntryAnimationController,
                                            ),
                                          ),
                                        );
                                      } else {
                                        return Transform.scale(
                                          scale: 0.75,
                                          child: buildTvShowMainListItems(
                                            tvShowPopularList[index].id,
                                            tvShowPopularList[index]
                                                .backdrop_path,
                                            tvShowPopularList[index].name,
                                            tvShowPopularList[index]
                                                .first_air_date
                                                .toString(),
                                            tvShowPopularList[index]
                                                .vote_average,
                                            tvShowPopularList[index].vote_count,
                                            popularListItemTextEntryAnimationController,
                                          ),
                                        );
                                      }
                                    } else {
                                      return Container();
                                    }
                                  },
                                  itemCount: tvShowPopularList.length,
                                ),
                              ),
                            ),
                          ),
                        ),
                      );
                    },
                  ),
            Container(
              height: 1.0,
              margin: EdgeInsets.only(bottom: 10.0),
              decoration: BoxDecoration(
                boxShadow: [
                  BoxShadow(
                    color: Colors.black,
                  ),
                ],
              ),
            ),
            Container(
              margin: EdgeInsets.only(
                top: 10.0,
                left: 10.0,
                bottom: 10.0,
                right: 15.0,
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
                  AnimatedBuilder(
                    animation: mainPageTextEntryAnimationController,
                    builder: (context, wdiget) {
                      return Text(
                        "Most Anticipated",
                        textAlign: TextAlign.start,
                        style: TextStyle(
                          decoration: TextDecoration.none,
                          fontSize: 18,
                          fontFamily: 'ConcertOne-Regular',
                          fontWeight: FontWeight.w500,
                          letterSpacing: 0.3,
                          color: Colors.black.withOpacity(
                              mainPageTextEntryAnimationController.value),
                        ),
                      );
                    },
                  ),
                  Expanded(
                    child: Container(
                      margin: EdgeInsets.only(top: 10.0),
                      child: Text(
                        "View more >",
                        textAlign: TextAlign.end,
                        style: TextStyle(
                          decoration: TextDecoration.none,
                          fontSize: 14,
                          fontFamily: 'ConcertOne-Regular',
                          fontWeight: FontWeight.w100,
                          color: Colors.white.withOpacity(0.0),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
            tvShowTopRatedList == null || tvShowTopRatedList.length == 0
                ? Container(
                    height: 200,
                    color: Colors.transparent,
                    child: Center(
                      child: LoadingBarIndicator(
                        numberOfBars: 5,
                        colors: _colors,
                        barSpacing: 5.0,
                        beginTweenValue: 10.0,
                        endTweenValue: 15.0,
                      ),
                    ),
                  )
                : AnimatedBuilder(
                    animation: listItemEntryAnimationController,
                    builder: (context, widget) {
                      return Opacity(
                        opacity: listItemEntryAnimationController.value,
                        child: Transform(
                          transform: Matrix4.identity()
                            ..setEntry(
                                3,
                                0,
                                0.006 *
                                    (1 -
                                        listItemEntryAnimationController
                                            .value)),
                          child: Transform.translate(
                            offset: Offset(
                                screenWidth *
                                    (1 -
                                        listItemEntryAnimationController.value),
                                0.0),
                            child: Container(
                              height: 260,
                              color: Colors.transparent,
                              child: PageStorage(
                                bucket: storageBucket,
                                child: PageView.builder(
                                  key: PageStorageKey("index1_top_rated"),
                                  controller: topRatedPageController,
                                  scrollDirection: Axis.horizontal,
                                  physics: BouncingScrollPhysics(),
                                  onPageChanged: (index) {
                                    topRatedListItemTextEntryAnimationController
                                        .reset();
                                    topRatedListItemTextEntryAnimationController
                                        .forward();
                                  },
                                  itemBuilder: (context, index) {
                                    if (index == topRatedCurrentPage.floor()) {
                                      frontAnticipatedListItemChangeAnimationController
                                              .value =
                                          (topRatedCurrentPage - index);

                                      return Transform.scale(
                                        scale:
                                            frontAnticipatedListItemChangeAnimation
                                                .value,
                                        child: buildTvShowMainListItems(
                                          tvShowTopRatedList[index].id,
                                          tvShowTopRatedList[index]
                                              .backdrop_path,
                                          tvShowTopRatedList[index].name,
                                          tvShowTopRatedList[index]
                                              .first_air_date
                                              .toString(),
                                          tvShowTopRatedList[index]
                                              .vote_average,
                                          tvShowTopRatedList[index].vote_count,
                                          topRatedListItemTextEntryAnimationController,
                                        ),
                                      );
                                    } else if (index ==
                                        topRatedCurrentPage.floor() + 1) {
                                      backAnticipatedListItemChangeAnimationController
                                              .value =
                                          1 - (index - topRatedCurrentPage);

                                      return Opacity(
                                        opacity:
                                            backAnticipatedListItemChangeAnimation
                                                .value,
                                        child: Transform.scale(
                                          scale:
                                              backAnticipatedListItemChangeAnimation
                                                  .value,
                                          child: buildTvShowMainListItems(
                                            tvShowTopRatedList[index].id,
                                            tvShowTopRatedList[index]
                                                .backdrop_path,
                                            tvShowTopRatedList[index].name,
                                            tvShowTopRatedList[index]
                                                .first_air_date
                                                .toString(),
                                            tvShowTopRatedList[index]
                                                .vote_average,
                                            tvShowTopRatedList[index]
                                                .vote_count,
                                            topRatedListItemTextEntryAnimationController,
                                          ),
                                        ),
                                      );
                                    } else {
                                      return Transform.scale(
                                        scale: 0.75,
                                        child: buildTvShowMainListItems(
                                          tvShowTopRatedList[index].id,
                                          tvShowTopRatedList[index]
                                              .backdrop_path,
                                          tvShowTopRatedList[index].name,
                                          tvShowTopRatedList[index]
                                              .first_air_date
                                              .toString(),
                                          tvShowTopRatedList[index]
                                              .vote_average,
                                          tvShowTopRatedList[index].vote_count,
                                          topRatedListItemTextEntryAnimationController,
                                        ),
                                      );
                                    }
                                  },
                                  itemCount: tvShowTopRatedList.length,
                                ),
                              ),
                            ),
                          ),
                        ),
                      );
                    },
                  ),
            Container(
              height: 1.0,
              margin: EdgeInsets.only(bottom: 10.0),
              decoration: BoxDecoration(
                boxShadow: [
                  BoxShadow(
                    color: Colors.black,
                  ),
                ],
              ),
            ),
            Container(
              margin: EdgeInsets.only(
                top: 10.0,
                left: 10.0,
                bottom: 10.0,
                right: 15.0,
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
                  AnimatedBuilder(
                    animation: mainPageTextEntryAnimationController,
                    builder: (context, wdiget) {
                      return Text(
                        "Upcoming",
                        textAlign: TextAlign.start,
                        style: TextStyle(
                          decoration: TextDecoration.none,
                          fontSize: 18,
                          fontFamily: 'ConcertOne-Regular',
                          fontWeight: FontWeight.w500,
                          letterSpacing: 0.3,
                          color: Colors.black.withOpacity(
                              mainPageTextEntryAnimationController.value),
                        ),
                      );
                    },
                  ),
                  Expanded(
                    child: Container(
                      margin: EdgeInsets.only(top: 10.0),
                      child: Text(
                        "View more >",
                        textAlign: TextAlign.end,
                        style: TextStyle(
                          decoration: TextDecoration.none,
                          fontSize: 14,
                          fontFamily: 'ConcertOne-Regular',
                          fontWeight: FontWeight.w100,
                          color: Colors.white.withOpacity(0.0),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
            tvShowReleasingTodayList == null ||
                    tvShowReleasingTodayList.length == 0
                ? Container(
                    height: 200,
                    color: Colors.transparent,
                    child: Center(
                      child: LoadingBarIndicator(
                        numberOfBars: 5,
                        colors: _colors,
                        barSpacing: 5.0,
                        beginTweenValue: 10.0,
                        endTweenValue: 15.0,
                      ),
                    ),
                  )
                : AnimatedBuilder(
                    animation: listItemEntryAnimationController,
                    builder: (context, widget) {
                      return Opacity(
                        opacity: listItemEntryAnimationController.value,
                        child: Transform(
                          transform: Matrix4.identity()
                            ..setEntry(
                                3,
                                0,
                                0.006 *
                                    (1 -
                                        listItemEntryAnimationController
                                            .value)),
                          child: Transform.translate(
                            offset: Offset(
                                screenWidth *
                                    (1 -
                                        listItemEntryAnimationController.value),
                                0.0),
                            child: Container(
                              height: 250,
                              color: Colors.white,
                              child: PageStorage(
                                bucket: storageBucket,
                                child: PageView.builder(
                                  key: PageStorageKey("index1_releasing_today"),
                                  controller: releasingTodayPageController,
                                  scrollDirection: Axis.horizontal,
                                  physics: BouncingScrollPhysics(),
                                  onPageChanged: (index) {
                                    releasingTodayListItemTextEntryAnimationController
                                        .reset();
                                    releasingTodayListItemTextEntryAnimationController
                                        .forward();
                                  },
                                  itemBuilder: (context, index) {
                                    if (index ==
                                        releasingTodayCurrentPage.floor()) {
                                      frontUpcomingListItemChangeAnimationController
                                              .value =
                                          (releasingTodayCurrentPage - index);

                                      return Transform.scale(
                                        scale:
                                            frontUpcomingListItemChangeAnimation
                                                .value,
                                        child: buildTvShowMainListItems(
                                          tvShowNowPlayingList[index].id,
                                          tvShowReleasingTodayList[index]
                                              .backdrop_path,
                                          tvShowReleasingTodayList[index].name,
                                          tvShowReleasingTodayList[index]
                                              .first_air_date
                                              .toString(),
                                          tvShowReleasingTodayList[index]
                                              .vote_average,
                                          tvShowReleasingTodayList[index]
                                              .vote_count,
                                          releasingTodayListItemTextEntryAnimationController,
                                        ),
                                      );
                                    } else if (index ==
                                        releasingTodayCurrentPage.floor() + 1) {
                                      backUpcomingListItemChangeAnimationController
                                              .value =
                                          1 -
                                              (index -
                                                  releasingTodayCurrentPage);

                                      return Opacity(
                                        opacity:
                                            backUpcomingListItemChangeAnimation
                                                .value,
                                        child: Transform.scale(
                                          scale:
                                              backUpcomingListItemChangeAnimation
                                                  .value,
                                          child: buildTvShowMainListItems(
                                            tvShowNowPlayingList[index].id,
                                            tvShowReleasingTodayList[index]
                                                .backdrop_path,
                                            tvShowReleasingTodayList[index]
                                                .name,
                                            tvShowReleasingTodayList[index]
                                                .first_air_date
                                                .toString(),
                                            tvShowReleasingTodayList[index]
                                                .vote_average,
                                            tvShowReleasingTodayList[index]
                                                .vote_count,
                                            releasingTodayListItemTextEntryAnimationController,
                                          ),
                                        ),
                                      );
                                    } else {
                                      return Transform.scale(
                                        scale: 0.75,
                                        child: buildTvShowMainListItems(
                                          tvShowNowPlayingList[index].id,
                                          tvShowReleasingTodayList[index]
                                              .backdrop_path,
                                          tvShowReleasingTodayList[index].name,
                                          tvShowReleasingTodayList[index]
                                              .first_air_date
                                              .toString(),
                                          tvShowReleasingTodayList[index]
                                              .vote_average,
                                          tvShowReleasingTodayList[index]
                                              .vote_count,
                                          releasingTodayListItemTextEntryAnimationController,
                                        ),
                                      );
                                    }
                                  },
                                  itemCount: tvShowReleasingTodayList.length,
                                ),
                              ),
                            ),
                          ),
                        ),
                      );
                    },
                  ),
            Container(
              height: 1.0,
              margin: EdgeInsets.only(bottom: 10.0),
              decoration: BoxDecoration(
                boxShadow: [
                  BoxShadow(
                    color: Colors.black,
                  ),
                ],
              ),
            ),
            Container(
              margin: EdgeInsets.only(
                top: 10.0,
                left: 10.0,
                bottom: 10.0,
                right: 15.0,
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
                  AnimatedBuilder(
                    animation: mainPageTextEntryAnimationController,
                    builder: (context, wdiget) {
                      return Text(
                        "Now Playing",
                        textAlign: TextAlign.start,
                        style: TextStyle(
                          decoration: TextDecoration.none,
                          fontSize: 18,
                          fontFamily: 'ConcertOne-Regular',
                          fontWeight: FontWeight.w500,
                          letterSpacing: 0.2,
                          color: Colors.black.withOpacity(
                              mainPageTextEntryAnimationController.value),
                        ),
                      );
                    },
                  ),
                  Expanded(
                    child: Container(
                      margin: EdgeInsets.only(top: 10.0),
                      child: Text(
                        "View more >",
                        textAlign: TextAlign.end,
                        style: TextStyle(
                          decoration: TextDecoration.none,
                          fontSize: 14,
                          fontFamily: 'ConcertOne-Regular',
                          fontWeight: FontWeight.w100,
                          color: Colors.white.withOpacity(0.0),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
            tvShowNowPlayingList == null || tvShowNowPlayingList.length == 0
                ? Container(
                    height: 200,
                    color: Colors.transparent,
                    child: Center(
                      child: LoadingBarIndicator(
                        numberOfBars: 5,
                        colors: _colors,
                        barSpacing: 5.0,
                        beginTweenValue: 10.0,
                        endTweenValue: 15.0,
                      ),
                    ),
                  )
                : AnimatedBuilder(
                    animation: listItemEntryAnimationController,
                    builder: (context, widget) {
                      return Opacity(
                        opacity: listItemEntryAnimationController.value,
                        child: Transform(
                          transform: Matrix4.identity()
                            ..setEntry(
                                3,
                                0,
                                0.006 *
                                    (1 -
                                        listItemEntryAnimationController
                                            .value)),
                          child: Transform.translate(
                            offset: Offset(
                                screenWidth *
                                    (1 -
                                        listItemEntryAnimationController.value),
                                0.0),
                            child: Container(
                              height: 260,
                              color: Colors.white,
                              child: PageStorage(
                                bucket: storageBucket,
                                child: PageView.builder(
                                  key: PageStorageKey("index1_now_playing"),
                                  controller: nowPlayingPageController,
                                  scrollDirection: Axis.horizontal,
                                  physics: BouncingScrollPhysics(),
                                  onPageChanged: (index) {
                                    nowPlayingListItemTextEntryAnimationController
                                        .reset();
                                    nowPlayingListItemTextEntryAnimationController
                                        .forward();
                                  },
                                  itemBuilder: (context, index) {
                                    if (index ==
                                        nowPlayingCurrentPage.floor()) {
                                      frontNowPlayingItemChangeAnimationController
                                              .value =
                                          (nowPlayingCurrentPage - index);

                                      return Transform.scale(
                                        scale:
                                            frontNowPlayingListItemChangeAnimation
                                                .value,
                                        child: buildTvShowMainListItems(
                                          tvShowNowPlayingList[index].id,
                                          tvShowNowPlayingList[index]
                                              .backdrop_path,
                                          tvShowNowPlayingList[index].name,
                                          tvShowNowPlayingList[index]
                                              .first_air_date
                                              .toString(),
                                          tvShowNowPlayingList[index]
                                              .vote_average,
                                          tvShowNowPlayingList[index]
                                              .vote_count,
                                          nowPlayingListItemTextEntryAnimationController,
                                        ),
                                      );
                                    } else if (index ==
                                        nowPlayingCurrentPage.floor() + 1) {
                                      backNowPlayingListItemChangeAnimationController
                                              .value =
                                          1 - (index - nowPlayingCurrentPage);

                                      return Opacity(
                                        opacity:
                                            backNowPlayingListItemChangeAnimation
                                                .value,
                                        child: Transform.scale(
                                          scale:
                                              backNowPlayingListItemChangeAnimation
                                                  .value,
                                          child: buildTvShowMainListItems(
                                            tvShowNowPlayingList[index].id,
                                            tvShowNowPlayingList[index]
                                                .backdrop_path,
                                            tvShowNowPlayingList[index].name,
                                            tvShowNowPlayingList[index]
                                                .first_air_date
                                                .toString(),
                                            tvShowNowPlayingList[index]
                                                .vote_average,
                                            tvShowNowPlayingList[index]
                                                .vote_count,
                                            nowPlayingListItemTextEntryAnimationController,
                                          ),
                                        ),
                                      );
                                    } else {
                                      return Transform.scale(
                                        scale: 0.75,
                                        child: buildTvShowMainListItems(
                                          tvShowNowPlayingList[index].id,
                                          tvShowNowPlayingList[index]
                                              .backdrop_path,
                                          tvShowNowPlayingList[index].name,
                                          tvShowNowPlayingList[index]
                                              .first_air_date
                                              .toString(),
                                          tvShowNowPlayingList[index]
                                              .vote_average,
                                          tvShowNowPlayingList[index]
                                              .vote_count,
                                          nowPlayingListItemTextEntryAnimationController,
                                        ),
                                      );
                                    }
                                  },
                                  itemCount: tvShowNowPlayingList.length,
                                ),
                              ),
                            ),
                          ),
                        ),
                      );
                    },
                  ),
          ],
        ),
      ),
    );

    return pageStorageList[currentPage];
  }

  Widget buildTvShowMainListItems(
    int id,
    String imageUrl,
    String name,
    String releaseDate,
    double rating,
    int voteCount,
    AnimationController _animationController,
  ) {
    String newName = name == null || name == "" || name.length <= 0
        ? ""
        : name.length > 15 ? name.substring(0, 15) + "..." : name;

    String formatReleaseDate = releaseDate != null && releaseDate != ""
        ? releaseDate.replaceAll(
            RegExp(
              "-",
              caseSensitive: false,
            ),
            "")
        : "";

    var dateTime = DateTime.parse(
        releaseDate != null && releaseDate != "" ? formatReleaseDate : "");

    var newReleaseDate = DateFormat.formatDate(
        dateTime, [DateFormat.dd," ", DateFormat.M, " ", DateFormat.yyyy]);

    return GestureDetector(
      onTap: () {
        Navigator.push(
          context,
          NewPageTransition(
            widget: TvShowDetails(
              tvShowId: id,
            ),
          ),
        );
      },
      child: Container(
        margin: EdgeInsets.only(
          bottom: 20.0,
          top: 10.0,
        ),
        child: Stack(
          children: <Widget>[
            Align(
              alignment: Alignment.topCenter,
              child: Container(
                height: 250.0,
                width: screenWidth - 30,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.all(
                    Radius.circular(10.0),
                  ),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.grey,
                      spreadRadius: 2.0,
                      blurRadius: 5.0,
                    ),
                  ],
                  color: Colors.white,
                ),
                child: AnimatedBuilder(
                  animation: _animationController,
                  builder: (context, wdiget) {
                    return Stack(
                      children: <Widget>[
                        Align(
                          alignment: Alignment.topRight,
                          child: CircleSlider(
                            backgroundColor: Colors.white,
                            backgroundMargin: EdgeInsets.all(0.0),
                            backgroundBorderRadius: BorderRadius.all(
                              Radius.circular(
                                10.0,
                              ),
                            ),
                            width: 100,
                            height: 100,
                            sliderSize: 30.0,
                            sliderColor: Colors.deepPurple,
                            sliderPercentage: rating * 10,
                            sliderController: _animationController,
                          ),
                        ),
                        Align(
                          alignment: Alignment.bottomLeft,
                          child: Container(
                            width: screenWidth,
                            margin: EdgeInsets.only(
                              right: 20.0,
                              left: 15.0,
                              bottom: 20.0,
                            ),
                            child: Column(
                              children: <Widget>[
                                Expanded(
                                  child: Container(
                                    alignment: Alignment.bottomLeft,
                                    child: Text(
                                      newName,
                                      textAlign: TextAlign.start,
                                      maxLines: 1,
                                      style: TextStyle(
                                        fontFamily: "ConcertOne-Regular",
                                        color: Colors.black.withOpacity(
                                            _animationController.value),
                                        fontSize: 18,
                                      ),
                                    ),
                                  ),
                                ),
                                Container(
                                  alignment: Alignment.bottomLeft,
                                  margin: EdgeInsets.only(
                                    top: 7.0,
                                  ),
                                  child: Text(
                                    newReleaseDate,
                                    textAlign: TextAlign.start,
                                    maxLines: 1,
                                    style: TextStyle(
                                      color: Colors.black.withOpacity(
                                          _animationController.value),
                                      fontSize: 14,
                                      fontWeight: FontWeight.w300,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                        Align(
                          alignment: Alignment.bottomRight,
                          child: Container(
                            width: 90,
                            height: 70,
                            decoration: BoxDecoration(
                              color: Colors.white,
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.grey[400],
                                  spreadRadius: 0.0,
                                  blurRadius: 2.0,
                                ),
                              ],
                              borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(10.0),
                                bottomRight: Radius.circular(10.0),
                              ),
                            ),
                            child: Center(
                              child: Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: <Widget>[
                                  Container(
                                    child: Icon(
                                      Icons.favorite,
                                      color: Colors.red[700].withOpacity(
                                          _animationController.value),
                                    ),
                                  ),
                                  Container(
                                    margin: EdgeInsets.only(
                                      left: 5.0,
                                      right: 5.0,
                                      bottom: 5.0,
                                    ),
                                    child: Text(
                                      voteCount != null
                                          ? voteCount.toString()
                                          : "0",
                                      style: TextStyle(
                                        fontFamily: "ConcertOne-Regular",
                                        color: Colors.black.withOpacity(
                                          _animationController.value,
                                        ),
                                        fontSize: 16,
                                      ),
                                    ),
                                  )
                                ],
                              ),
                            ),
                          ),
                        ),
                      ],
                    );
                  },
                ),
              ),
            ),
            Align(
              alignment: Alignment.topLeft,
              child: Transform.translate(
                offset: Offset(-15.0, 5.0),
                child: Container(
                  transform: Matrix4.identity()..setEntry(3, 0, 0.0015),
                  width: double.infinity,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.all(
                      Radius.circular(5.0),
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.grey,
                        spreadRadius: 2,
                        blurRadius: 5.0,
                        offset: Offset(-4.0, 3.0),
                      ),
                    ],
                    color: Colors.white,
                  ),
                  child: ClipRRect(
                    borderRadius: BorderRadius.all(
                      Radius.circular(5.0),
                    ),
                    child: imageUrl == null || imageUrl == ""
                        ? Container(
                          height: 150.0,
                            color: Colors.grey,
                            child: Icon(
                              Icons.live_tv,
                              color: Colors.grey[100],
                              size: 80,
                            ),
                          )
                        : Image.network(
                            imageUrl,
                            fit: BoxFit.cover,
                          ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

























import 'dart:async';
import 'dart:convert';
import 'dart:math';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:http/http.dart' as http;
import 'package:vector_math/vector_math_64.dart' as VectorMath64;
import 'package:date_format/date_format.dart' as DateFormat;

import 'Models/default_main_movie_model.dart';
import 'Models/default_main_movie_results_model.dart';
import 'Models/default_main_person_model.dart';
import 'Models/default_main_person_results_model.dart';
import 'Models/default_main_tv_show_model.dart';
import 'Models/default_main_tv_show_results_model.dart';

import 'Utils/circle_slider.dart';
import 'Utils/loading_bar_indicator.dart';
import 'Utils/NewPageTransition.dart';
import 'Utils/custom_curved_navigation_bar.dart';

import 'tv_show_details.dart';

void main() => runApp(MaterialApp(
      title: "Media Base",
      debugShowCheckedModeBanner: false,
      home: MediaBase(),
    ));

class MediaBase extends StatefulWidget {
  MediaBase({Key key}) : super(key: key);

  _MediaBaseState createState() => _MediaBaseState();
}

class _MediaBaseState extends State<MediaBase> with TickerProviderStateMixin {
  MediaQueryData mediaQueryData;

  double screenWidth;
  double screenHeight;

  int _currentIndex = 1;

  int _currentSliderIndex = 0;

  List<Color> _bgColorList = [
    Colors.green[400],
    Colors.deepPurple[400],
    Colors.blue[400],
  ];

  List _tabBarTextList = ["Tv Shows", "Movies", "Celebrities"];

  List<Widget> iconList(double _size, Color _color) {
    var iconList = List<Widget>();

    iconList.add(Icon(
      Icons.live_tv,
      size: _size,
      color: _color,
    ));
    iconList.add(Icon(
      Icons.movie,
      size: _size,
      color: _color,
    ));
    iconList.add(Icon(
      Icons.people_outline,
      size: _size,
      color: _color,
    ));

    return iconList;
  }

  var _colors = List<Color>();

  var sliderItemDetailsList = List<Map<String, String>>();
  var customSliderItemDetailsList = List<Map<String, String>>();

  AnimationController dragAnimationController;
  AnimationController sliderAnimationController;
  AnimationController sliderEntryAnimationController;
  AnimationController sliderTextEntryAnimationController;

  AnimationController mainPageTextEntryAnimationController;

  AnimationController listItemEntryAnimationController;

  AnimationController popularListItemTextEntryAnimationController;
  AnimationController topRatedListItemTextEntryAnimationController;
  AnimationController releasingTodayListItemTextEntryAnimationController;
  AnimationController nowPlayingListItemTextEntryAnimationController;

  AnimationController backPopularListItemChangeAnimationController;
  AnimationController frontPopularListItemChangeAnimationController;

  AnimationController backAnticipatedListItemChangeAnimationController;
  AnimationController frontAnticipatedListItemChangeAnimationController;

  AnimationController backUpcomingListItemChangeAnimationController;
  AnimationController frontUpcomingListItemChangeAnimationController;

  AnimationController backNowPlayingListItemChangeAnimationController;
  AnimationController frontNowPlayingItemChangeAnimationController;

  AnimationController _pageAnimationController;

  double defaultSlidingValue = 1.0 / 4.0;

  double currentSlidingValue = 1.0 / 4.0;

  var randomSliderPosition = Random();

  var randomSliderPositionsList = List<int>();

  bool _animationStatus = false;

  int endTvRange;
  int beginMovieRange;
  int endMovieRange;
  int beginPersonRange;
  int endPersonRange;
  int beginGameRange;
  int endGameRange;

  Animation<double> heightFactorAnimation;
  Animation<double> cornerRadiusAnimation;
  Animation<double> colorOpacityAnimation;
  Animation<double> opacityAnimation;
  Animation<double> sliderTextEntryAnimation;
  Animation<double> sliderTopCenterOpacityAnimation;

  Animation<double> backPopularListItemChangeAnimation;
  Animation<double> frontPopularListItemChangeAnimation;

  Animation<double> backAnticipatedListItemChangeAnimation;
  Animation<double> frontAnticipatedListItemChangeAnimation;

  Animation<double> backUpcomingListItemChangeAnimation;
  Animation<double> frontUpcomingListItemChangeAnimation;

  Animation<double> backNowPlayingListItemChangeAnimation;
  Animation<double> frontNowPlayingListItemChangeAnimation;

  double collapsedHeightFactor = 0.60;
  double expandedHeightFactor = 0.20;

  double collapsedCornerRadius = 0.0;
  double expandedCornerRadius = 30.0;

  double expandedColorOpacity = 0.0;
  double collapsedColorOpacity = 1.0;

  double expandedOpacity = 1.0;
  double collapsedOpacity = 0.0;

  double collapsedSliderTopCenterOpacity = 0.0;
  double expandedSliderTopCenterOpacity = 0.2;

  PageController mainSliderPageController;
  double mainSliderCurrentPage = 0.0;

  PageController popularPageController;
  double popularCurrentPage = 0.0;

  PageController topRatedPageController;
  double topRatedCurrentPage = 0.0;

  PageController releasingTodayPageController;
  double releasingTodayCurrentPage = 0.0;

  PageController nowPlayingPageController;
  double nowPlayingCurrentPage = 0.0;

  var tvTrendingList = List<DefaultMainTvShowResultsModel>();
  var movieTrendingList = List<DefaultMainMovieResultsModel>();
  var personTrendingList = List<DefaultMainPersonResultsModel>();

  var tvShowPopularList = List<DefaultMainTvShowResultsModel>();
  var tvShowTopRatedList = List<DefaultMainTvShowResultsModel>();
  var tvShowReleasingTodayList = List<DefaultMainTvShowResultsModel>();
  var tvShowNowPlayingList = List<DefaultMainTvShowResultsModel>();

  Future fetchMainSliderItems() async {
    var _sliderItemDetails = List<Map<String, String>>();

    DefaultMainTvShowModel tvResponseModel;
    DefaultMainMovieModel movieResponseModel;
    DefaultMainPersonModel personResponseModel;

    final tvResponse = await http.get(
      Uri.encodeFull(
          'https://api.themoviedb.org/3/trending/tv/day?api_key=63e2f7bc00c513994d63c9be541a08d1'),
      headers: {
        "Accept": "application/json",
      },
    );

    final movieResponse = await http.get(
      Uri.encodeFull(
          'https://api.themoviedb.org/3/trending/movie/day?api_key=63e2f7bc00c513994d63c9be541a08d1'),
      headers: {
        "Accept": "application/json",
      },
    );

    final personResponse = await http.get(
      Uri.encodeFull(
          'https://api.themoviedb.org/3/trending/person/day?api_key=63e2f7bc00c513994d63c9be541a08d1'),
      headers: {
        "Accept": "application/json",
      },
    );

    if (this.mounted) {
      setState(() {
        if (tvResponse.statusCode == 200) {
          tvResponseModel =
              DefaultMainTvShowModel.fromJson(json.decode(tvResponse.body));
        }

        if (movieResponse.statusCode == 200) {
          movieResponseModel =
              DefaultMainMovieModel.fromJson(json.decode(movieResponse.body));
        }

        if (personResponse.statusCode == 200) {
          personResponseModel =
              DefaultMainPersonModel.fromJson(json.decode(personResponse.body));
        }

        if (tvResponseModel != null && tvResponseModel.results.length > 0) {
          tvTrendingList = tvResponseModel.results;
        }

        if (movieResponseModel != null &&
            movieResponseModel.results.length > 0) {
          movieTrendingList = movieResponseModel.results;
        }

        if (personResponseModel != null &&
            personResponseModel.results.length > 0) {
          personTrendingList = personResponseModel.results;
        }

        if (tvTrendingList != null && tvTrendingList.length > 0) {
          for (DefaultMainTvShowResultsModel tvTrending in tvTrendingList) {
            if (tvTrending.name != null &&
                tvTrending.name != "" &&
                tvTrending.backdrop_path != null &&
                tvTrending.backdrop_path != "") {
              if (_sliderItemDetails.length <= 3) {
                _sliderItemDetails.add({
                  "imageUrl": tvTrending.backdrop_path,
                  "name": tvTrending.name
                });
              }
            }
          }

          if (_sliderItemDetails != null && _sliderItemDetails.length > 0) {
            sliderItemDetailsList.addAll(_sliderItemDetails);
            endTvRange = _sliderItemDetails.length;
            beginMovieRange = endTvRange;
            _sliderItemDetails.clear();
          }
        }

        if (movieTrendingList != null && movieTrendingList.length > 0) {
          for (DefaultMainMovieResultsModel movieTrending
              in movieTrendingList) {
            if (movieTrending.title != null &&
                movieTrending.title != "" &&
                movieTrending.backdrop_path != null &&
                movieTrending.backdrop_path != "") {
              if (_sliderItemDetails.length <= 3) {
                _sliderItemDetails.add({
                  "imageUrl": movieTrending.backdrop_path,
                  "name": movieTrending.title
                });
              }
            }
          }

          if (_sliderItemDetails != null && _sliderItemDetails.length > 0) {
            sliderItemDetailsList.addAll(_sliderItemDetails);
            endMovieRange = beginMovieRange + _sliderItemDetails.length;
            beginPersonRange = endMovieRange;
            _sliderItemDetails.clear();
          }
        }

        if (personTrendingList != null && personTrendingList.length > 0) {
          for (DefaultMainPersonResultsModel personTrending
              in personTrendingList) {
            if (personTrending.name != null &&
                personTrending.name != "" &&
                personTrending.profile_path != null &&
                personTrending.profile_path != "") {
              if (_sliderItemDetails.length <= 3) {
                _sliderItemDetails.add({
                  "imageUrl": personTrending.profile_path,
                  "name": personTrending.name
                });
              }
            }
          }

          if (_sliderItemDetails != null && _sliderItemDetails.length > 0) {
            sliderItemDetailsList.addAll(_sliderItemDetails);
            endPersonRange = beginPersonRange + _sliderItemDetails.length;
            beginGameRange = endPersonRange;
            _sliderItemDetails.clear();
          }
        }

        if (sliderItemDetailsList != null && sliderItemDetailsList.length > 0) {
          if (_currentIndex == 0) {
            customSliderItemDetailsList.clear();
            customSliderItemDetailsList =
                sliderItemDetailsList.sublist(0, endTvRange);

            customSliderItemDetailsList.shuffle();
          } else if (_currentIndex == 1) {
            customSliderItemDetailsList.clear();
            customSliderItemDetailsList =
                sliderItemDetailsList.sublist(beginMovieRange, endMovieRange);

            customSliderItemDetailsList.shuffle();
          } else if (_currentIndex == 2) {
            customSliderItemDetailsList.clear();
            customSliderItemDetailsList =
                sliderItemDetailsList.sublist(beginPersonRange, endPersonRange);

            customSliderItemDetailsList.shuffle();
          }

          if (customSliderItemDetailsList != null &&
              customSliderItemDetailsList.length > 0) {
            for (int i = 0; i < customSliderItemDetailsList.length; i++) {
              randomSliderPositionsList.add(i);
            }

            double sliderLength = customSliderItemDetailsList.length.toDouble();

            defaultSlidingValue = 1.0 / sliderLength;
            currentSlidingValue = 1.0 / sliderLength;
          }
        }
      });
    }
  }

  Future fetchPopularItems(int page) async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/popular?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    DefaultMainTvShowModel defaultTvShowMainModel =
        DefaultMainTvShowModel.fromJson(json.decode(response.body));

    if (this.mounted) {
      setState(() {
        tvShowPopularList.addAll(defaultTvShowMainModel.results);
        tvShowPopularList.shuffle();
      });
    }

    listItemEntryAnimationController.forward();
    popularListItemTextEntryAnimationController.forward();
  }

  Future fetchTopRatedItems() async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/top_rated?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    if (this.mounted) {
      setState(() {
        DefaultMainTvShowModel defaultTvShowMainModel =
            DefaultMainTvShowModel.fromJson(json.decode(response.body));
        tvShowTopRatedList = defaultTvShowMainModel.results;
        tvShowTopRatedList.shuffle();
      });
    }

    topRatedListItemTextEntryAnimationController.forward();
  }

  Future fetchReleasingTodayItems() async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/airing_today?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    if (this.mounted) {
      setState(() {
        DefaultMainTvShowModel defaultTvShowMainModel =
            DefaultMainTvShowModel.fromJson(json.decode(response.body));
        tvShowReleasingTodayList = defaultTvShowMainModel.results;
        tvShowReleasingTodayList.shuffle();
      });
    }

    releasingTodayListItemTextEntryAnimationController.forward();
  }

  Future fetchNowPlayingItems() async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/on_the_air?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    if (this.mounted) {
      setState(() {
        DefaultMainTvShowModel defaultTvShowMainModel =
            DefaultMainTvShowModel.fromJson(json.decode(response.body));
        tvShowNowPlayingList = defaultTvShowMainModel.results;
        tvShowNowPlayingList.shuffle();
      });
    }

    nowPlayingListItemTextEntryAnimationController.forward();
  }

  ScrollController mainTvPageController;

  PageStorageBucket storageBucket = PageStorageBucket();

  @override
  void initState() {
    super.initState();

    this.fetchMainSliderItems();

    _pageAnimationController = AnimationController(
      vsync: this,
      duration: Duration(seconds: 1),
    );

    mainSliderPageController = PageController();
    mainSliderPageController.addListener(() {
      setState(() {
        mainSliderCurrentPage = mainSliderPageController.page;
      });
    });

    dragAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 100),
    );

    heightFactorAnimation =
        Tween(begin: collapsedHeightFactor, end: expandedHeightFactor)
            .animate(dragAnimationController);

    cornerRadiusAnimation =
        Tween(begin: expandedCornerRadius, end: collapsedCornerRadius)
            .animate(dragAnimationController);

    colorOpacityAnimation =
        Tween(begin: expandedColorOpacity, end: collapsedColorOpacity)
            .animate(dragAnimationController);

    opacityAnimation = Tween(begin: expandedOpacity, end: collapsedOpacity)
        .animate(dragAnimationController);

    sliderTopCenterOpacityAnimation = Tween(
            begin: expandedSliderTopCenterOpacity,
            end: collapsedSliderTopCenterOpacity)
        .animate(dragAnimationController);

    sliderAnimationController = AnimationController(
      duration: Duration(seconds: 60),
      vsync: this,
    );
    sliderAnimationController.forward();

    sliderAnimationController.addStatusListener((status) {
      if (status == AnimationStatus.completed) {
        sliderAnimationController.reverse();
        setState(() {
          _animationStatus = true;
        });
      } else if (status == AnimationStatus.dismissed) {
        sliderAnimationController.forward();
        setState(() {
          _animationStatus = false;
        });
      }
    });

    sliderAnimationController.addListener(() {
      if (sliderAnimationController.value >= defaultSlidingValue) {
        if (_animationStatus) {
          if (sliderAnimationController.value <= currentSlidingValue) {
            if (this.mounted) {
              setState(() {
                currentSlidingValue = currentSlidingValue - defaultSlidingValue;

                randomSliderPositionsList.shuffle();

                int randomSlider = randomSliderPosition
                    .nextInt(randomSliderPositionsList.length - 1);

                mainSliderPageController.animateToPage(
                  randomSliderPositionsList[randomSlider],
                  duration: Duration(seconds: 1),
                  curve: Curves.easeInOutCubic,
                );
              });
            }
          }
        } else {
          if (sliderAnimationController.value > currentSlidingValue) {
            if (this.mounted) {
              setState(() {
                currentSlidingValue = currentSlidingValue + defaultSlidingValue;

                randomSliderPositionsList.shuffle();

                int randomSlider = randomSliderPosition
                    .nextInt(randomSliderPositionsList.length - 1);

                mainSliderPageController.animateToPage(
                  randomSliderPositionsList[randomSlider],
                  duration: Duration(seconds: 1),
                  curve: Curves.easeInOutCubic,
                );
              });
            }
          }
        }
      }
    });

    sliderEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1000),
    );

    sliderEntryAnimationController.forward();

    sliderTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 500),
    );
    sliderTextEntryAnimationController.forward();

    sliderTextEntryAnimation = Tween(
      begin: 0.0,
      end: 1.0,
    ).animate(sliderTextEntryAnimationController);

    mainPageTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 2000),
    );

    mainPageTextEntryAnimationController.forward();

    listItemEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 2000),
    );

    popularListItemTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 2000),
    );

    popularListItemTextEntryAnimationController.forward();

    topRatedListItemTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 2000),
    );

    topRatedListItemTextEntryAnimationController.forward();

    releasingTodayListItemTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 2000),
    );

    releasingTodayListItemTextEntryAnimationController.forward();

    nowPlayingListItemTextEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 2000),
    );

    nowPlayingListItemTextEntryAnimationController.forward();

    backPopularListItemChangeAnimationController = AnimationController(
      vsync: this,
    );

    backPopularListItemChangeAnimation = Tween(
      begin: 0.8,
      end: 1.0,
    ).animate(backPopularListItemChangeAnimationController);

    frontPopularListItemChangeAnimationController = AnimationController(
      vsync: this,
    );

    frontPopularListItemChangeAnimation = Tween(
      begin: 1.0,
      end: 0.75,
    ).animate(frontPopularListItemChangeAnimationController);

    backAnticipatedListItemChangeAnimationController = AnimationController(
      vsync: this,
    );

    backAnticipatedListItemChangeAnimation = Tween(
      begin: 0.8,
      end: 1.0,
    ).animate(backAnticipatedListItemChangeAnimationController);

    frontAnticipatedListItemChangeAnimationController = AnimationController(
      vsync: this,
    );

    frontAnticipatedListItemChangeAnimation = Tween(
      begin: 1.0,
      end: 0.75,
    ).animate(frontAnticipatedListItemChangeAnimationController);

    backUpcomingListItemChangeAnimationController = AnimationController(
      vsync: this,
    );

    backUpcomingListItemChangeAnimation = Tween(
      begin: 0.8,
      end: 1.0,
    ).animate(backUpcomingListItemChangeAnimationController);

    frontUpcomingListItemChangeAnimationController = AnimationController(
      vsync: this,
    );

    frontUpcomingListItemChangeAnimation = Tween(
      begin: 1.0,
      end: 0.75,
    ).animate(frontUpcomingListItemChangeAnimationController);

    backNowPlayingListItemChangeAnimationController = AnimationController(
      vsync: this,
    );

    backNowPlayingListItemChangeAnimation = Tween(
      begin: 0.8,
      end: 1.0,
    ).animate(backNowPlayingListItemChangeAnimationController);

    frontNowPlayingItemChangeAnimationController = AnimationController(
      vsync: this,
    );

    frontNowPlayingListItemChangeAnimation = Tween(
      begin: 1.0,
      end: 0.75,
    ).animate(frontNowPlayingItemChangeAnimationController);

    Timer(Duration(seconds: 2), () {
      this.fetchPopularItems(1);
    });

    Timer(Duration(seconds: 4), () {
      this.fetchTopRatedItems();
    });

    Timer(Duration(seconds: 6), () {
      this.fetchReleasingTodayItems();
    });

    Timer(Duration(seconds: 8), () {
      this.fetchNowPlayingItems();
    });

    popularPageController = PageController(viewportFraction: 0.75);
    popularPageController.addListener(() {
      setState(() {
        popularCurrentPage = popularPageController.page;
      });
    });

    topRatedPageController = PageController(viewportFraction: 0.75);
    topRatedPageController.addListener(() {
      setState(() {
        topRatedCurrentPage = topRatedPageController.page;
      });
    });

    releasingTodayPageController = PageController(viewportFraction: 0.75);
    releasingTodayPageController.addListener(() {
      setState(() {
        releasingTodayCurrentPage = releasingTodayPageController.page;
      });
    });

    nowPlayingPageController = PageController();
    nowPlayingPageController.addListener(() {
      setState(() {
        nowPlayingCurrentPage = nowPlayingPageController.page;
      });
    });

    mainTvPageController = ScrollController();
    mainTvPageController.addListener(() {
      if (this.mounted) {
        double startAt = ((1.05 - heightFactorAnimation.value) * 100) + 100;

        if (mainTvPageController.offset > startAt) {
          dragAnimationController.forward();
        } else if (mainTvPageController.offset <= 0.0) {
          dragAnimationController.reverse();
        }

        if (mainTvPageController.offset <= startAt) {
          dragAnimationController.value = mainTvPageController.offset / startAt;
        }
      }
    });

    _colors.add(Colors.green);
    _colors.add(Colors.blue);
    _colors.add(Colors.yellow);
    _colors.add(Colors.purple);
    _colors.add(Colors.deepOrange);
  }

  @override
  void dispose() {
    dragAnimationController.dispose();
    sliderAnimationController.dispose();
    sliderEntryAnimationController.dispose();
    sliderTextEntryAnimationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    mediaQueryData = MediaQuery.of(context);

    screenWidth = mediaQueryData.size.width;
    screenHeight = mediaQueryData.size.height;

    return Scaffold(
      body: Center(
        child: PageView.builder(   
          controller: nowPlayingPageController,
          itemBuilder: (context, index) {
            _pageAnimationController.value =
                1 - (nowPlayingCurrentPage - index);
            if (index == nowPlayingCurrentPage.floor()) {
              return Transform(
                  transform: Matrix4.identity()
                    ..setEntry(3, 2, 0.001 + (0.006 * -(nowPlayingCurrentPage - index)))  
                  
                    ..rotateY((pi / 2) - _pageAnimationController.value),
                  child: buildDummyPage());
            } else if (index == nowPlayingCurrentPage.floor() + 1) {
              return Transform(
                  transform: Matrix4.identity()
                    ..setEntry(3, 2, 0.001 + (0.003 * -(nowPlayingCurrentPage - index)))
                  
                    ..rotateY((pi / 2) - _pageAnimationController.value),
                  child: buildDummyPage());
            } else {
               return Transform(
                  transform: Matrix4.identity()
                    ..setEntry(3, 2, 0.001)
                  
                    ..rotateY((pi / 2) - _pageAnimationController.value),
                  child: buildDummyPage());
            }
          },
          itemCount: 4,
        ),
      ),
    );
  }

  Widget buildDummyPage() {
    return Container(
      child: Center(
        child: Container(
          width: screenWidth,
          height: 200,
          color: Colors.blue,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Icon(Icons.featured_video),
              Text("hello"),
            ],
          ),
        ),
      ),
    );
  }

  Widget buildMainSliderListItems(Map<String, String> sliderDetails,
      double mainSliderCurrentPage, int index) {
    if (index == mainSliderCurrentPage.floor()) {
      return Container(
        transform: Matrix4.identity()
          ..setFromTranslationRotationScale(
            VectorMath64.Vector3(
              -screenWidth * (index - mainSliderCurrentPage),
              0.0,
              0.0,
            ),
            VectorMath64.Quaternion(
              0.0,
              0.0,
              0.0,
              0.0,
            ),
            VectorMath64.Vector3(
              1 - (mainSliderCurrentPage - index),
              1,
              1,
            ),
          ),
        decoration: BoxDecoration(
          image: DecorationImage(
            image: NetworkImage(
              sliderDetails["imageUrl"],
            ),
            fit: BoxFit.cover,
            colorFilter: ColorFilter.mode(
              _bgColorList[_currentIndex]
                  .withOpacity(colorOpacityAnimation.value),
              BlendMode.srcOver,
            ),
          ),
        ),
        child: Container(
          color: Colors.white
              .withOpacity(1 - sliderEntryAnimationController.value),
        ),
      );
    } else if (index == mainSliderCurrentPage.floor() + 1) {
      return Container(
        transform: Matrix4.identity()
          ..setEntry(3, 0, 0.006 * -(mainSliderCurrentPage - index)),
        decoration: BoxDecoration(
          image: DecorationImage(
            image: NetworkImage(
              sliderDetails["imageUrl"],
            ),
            fit: BoxFit.cover,
            colorFilter: ColorFilter.mode(
              _bgColorList[_currentIndex]
                  .withOpacity(colorOpacityAnimation.value),
              BlendMode.srcOver,
            ),
          ),
        ),
        child: Container(
          color: Colors.white
              .withOpacity(1 - sliderEntryAnimationController.value),
        ),
      );
    } else {
      return Container(
        decoration: BoxDecoration(
          image: DecorationImage(
            image: NetworkImage(
              sliderDetails["imageUrl"],
            ),
            fit: BoxFit.cover,
            colorFilter: ColorFilter.mode(
              _bgColorList[_currentIndex]
                  .withOpacity(colorOpacityAnimation.value),
              BlendMode.srcOver,
            ),
          ),
        ),
        child: Container(
          color: Colors.white
              .withOpacity(1.0 - sliderEntryAnimationController.value),
        ),
      );
    }
  }

  PageStorage buildMainPageItems(int currentPage) {
    var pageStorageList = List<PageStorage>();

    pageStorageList.add(
      PageStorage(
        bucket: storageBucket,
        child: ListView(
          key: PageStorageKey("tv_index1"),
          controller: mainTvPageController,
          children: <Widget>[
            Container(
              margin: EdgeInsets.only(
                top: 10.0,
                left: 10.0,
                bottom: 10.0,
                right: 15.0,
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
                  AnimatedBuilder(
                    animation: mainPageTextEntryAnimationController,
                    builder: (context, wdiget) {
                      return Text(
                        "Most Popular",
                        textAlign: TextAlign.start,
                        style: TextStyle(
                          decoration: TextDecoration.none,
                          fontSize: 18,
                          fontFamily: 'ConcertOne-Regular',
                          fontWeight: FontWeight.w500,
                          letterSpacing: 0.3,
                          color: Colors.black.withOpacity(
                              mainPageTextEntryAnimationController.value),
                        ),
                      );
                    },
                  ),
                  Expanded(
                    child: Container(
                      margin: EdgeInsets.only(top: 10.0),
                      child: Text(
                        "View more >",
                        textAlign: TextAlign.end,
                        style: TextStyle(
                          decoration: TextDecoration.none,
                          fontSize: 14,
                          fontFamily: 'ConcertOne-Regular',
                          fontWeight: FontWeight.w100,
                          color: Colors.white.withOpacity(0.0),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
            tvShowPopularList == null || tvShowPopularList.length == 0
                ? Container(
                    height: 200,
                    color: Colors.transparent,
                    child: Center(
                      child: LoadingBarIndicator(
                        numberOfBars: 5,
                        colors: _colors,
                        barSpacing: 5.0,
                        beginTweenValue: 10.0,
                        endTweenValue: 15.0,
                      ),
                    ),
                  )
                : AnimatedBuilder(
                    animation: listItemEntryAnimationController,
                    builder: (context, widget) {
                      return Opacity(
                        opacity: listItemEntryAnimationController.value,
                        child: Transform(
                          transform: Matrix4.identity()
                            ..setEntry(
                                3,
                                0,
                                0.006 *
                                    (1 -
                                        listItemEntryAnimationController
                                            .value)),
                          child: Transform.translate(
                            offset: Offset(
                                screenWidth *
                                    (1 -
                                        listItemEntryAnimationController.value),
                                0.0),
                            child: Container(
                              height: 260,
                              color: Colors.transparent,
                              child: PageStorage(
                                bucket: storageBucket,
                                child: PageView.builder(
                                  key: PageStorageKey("index1_most_popular"),
                                  controller: popularPageController,
                                  scrollDirection: Axis.horizontal,
                                  physics: BouncingScrollPhysics(),
                                  onPageChanged: (index) {
                                    popularListItemTextEntryAnimationController
                                        .reset();
                                    popularListItemTextEntryAnimationController
                                        .forward();
                                  },
                                  itemBuilder: (context, index) {
                                    if (tvShowPopularList[index] != null) {
                                      if (index == popularCurrentPage.floor()) {
                                        frontPopularListItemChangeAnimationController
                                                .value =
                                            (popularCurrentPage - index);

                                        return Transform.scale(
                                          scale:
                                              frontPopularListItemChangeAnimation
                                                  .value,
                                          child: buildTvShowMainListItems(
                                            tvShowPopularList[index].id,
                                            tvShowPopularList[index]
                                                .backdrop_path,
                                            tvShowPopularList[index].name,
                                            tvShowPopularList[index]
                                                .first_air_date
                                                .toString(),
                                            tvShowPopularList[index]
                                                .vote_average,
                                            tvShowPopularList[index].vote_count,
                                            popularListItemTextEntryAnimationController,
                                          ),
                                        );
                                      } else if (index ==
                                          popularCurrentPage.floor() + 1) {
                                        backPopularListItemChangeAnimationController
                                                .value =
                                            1 - (index - popularCurrentPage);
                                        return Opacity(
                                          opacity:
                                              backPopularListItemChangeAnimation
                                                  .value,
                                          child: Transform.scale(
                                            scale:
                                                backPopularListItemChangeAnimation
                                                    .value,
                                            child: buildTvShowMainListItems(
                                              tvShowPopularList[index].id,
                                              tvShowPopularList[index]
                                                  .backdrop_path,
                                              tvShowPopularList[index].name,
                                              tvShowPopularList[index]
                                                  .first_air_date
                                                  .toString(),
                                              tvShowPopularList[index]
                                                  .vote_average,
                                              tvShowPopularList[index]
                                                  .vote_count,
                                              popularListItemTextEntryAnimationController,
                                            ),
                                          ),
                                        );
                                      } else {
                                        return Transform.scale(
                                          scale: 0.75,
                                          child: buildTvShowMainListItems(
                                            tvShowPopularList[index].id,
                                            tvShowPopularList[index]
                                                .backdrop_path,
                                            tvShowPopularList[index].name,
                                            tvShowPopularList[index]
                                                .first_air_date
                                                .toString(),
                                            tvShowPopularList[index]
                                                .vote_average,
                                            tvShowPopularList[index].vote_count,
                                            popularListItemTextEntryAnimationController,
                                          ),
                                        );
                                      }
                                    } else {
                                      return Container();
                                    }
                                  },
                                  itemCount: tvShowPopularList.length,
                                ),
                              ),
                            ),
                          ),
                        ),
                      );
                    },
                  ),
            Container(
              height: 1.0,
              margin: EdgeInsets.only(bottom: 10.0),
              decoration: BoxDecoration(
                boxShadow: [
                  BoxShadow(
                    color: Colors.black,
                  ),
                ],
              ),
            ),
            Container(
              margin: EdgeInsets.only(
                top: 10.0,
                left: 10.0,
                bottom: 10.0,
                right: 15.0,
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
                  AnimatedBuilder(
                    animation: mainPageTextEntryAnimationController,
                    builder: (context, wdiget) {
                      return Text(
                        "Most Anticipated",
                        textAlign: TextAlign.start,
                        style: TextStyle(
                          decoration: TextDecoration.none,
                          fontSize: 18,
                          fontFamily: 'ConcertOne-Regular',
                          fontWeight: FontWeight.w500,
                          letterSpacing: 0.3,
                          color: Colors.black.withOpacity(
                              mainPageTextEntryAnimationController.value),
                        ),
                      );
                    },
                  ),
                  Expanded(
                    child: Container(
                      margin: EdgeInsets.only(top: 10.0),
                      child: Text(
                        "View more >",
                        textAlign: TextAlign.end,
                        style: TextStyle(
                          decoration: TextDecoration.none,
                          fontSize: 14,
                          fontFamily: 'ConcertOne-Regular',
                          fontWeight: FontWeight.w100,
                          color: Colors.white.withOpacity(0.0),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
            tvShowTopRatedList == null || tvShowTopRatedList.length == 0
                ? Container(
                    height: 200,
                    color: Colors.transparent,
                    child: Center(
                      child: LoadingBarIndicator(
                        numberOfBars: 5,
                        colors: _colors,
                        barSpacing: 5.0,
                        beginTweenValue: 10.0,
                        endTweenValue: 15.0,
                      ),
                    ),
                  )
                : AnimatedBuilder(
                    animation: listItemEntryAnimationController,
                    builder: (context, widget) {
                      return Opacity(
                        opacity: listItemEntryAnimationController.value,
                        child: Transform(
                          transform: Matrix4.identity()
                            ..setEntry(
                                3,
                                0,
                                0.006 *
                                    (1 -
                                        listItemEntryAnimationController
                                            .value)),
                          child: Transform.translate(
                            offset: Offset(
                                screenWidth *
                                    (1 -
                                        listItemEntryAnimationController.value),
                                0.0),
                            child: Container(
                              height: 260,
                              color: Colors.transparent,
                              child: PageStorage(
                                bucket: storageBucket,
                                child: PageView.builder(
                                  key: PageStorageKey("index1_top_rated"),
                                  controller: topRatedPageController,
                                  scrollDirection: Axis.horizontal,
                                  physics: BouncingScrollPhysics(),
                                  onPageChanged: (index) {
                                    topRatedListItemTextEntryAnimationController
                                        .reset();
                                    topRatedListItemTextEntryAnimationController
                                        .forward();
                                  },
                                  itemBuilder: (context, index) {
                                    if (index == topRatedCurrentPage.floor()) {
                                      frontAnticipatedListItemChangeAnimationController
                                              .value =
                                          (topRatedCurrentPage - index);

                                      return Transform.scale(
                                        scale:
                                            frontAnticipatedListItemChangeAnimation
                                                .value,
                                        child: buildTvShowMainListItems(
                                          tvShowTopRatedList[index].id,
                                          tvShowTopRatedList[index]
                                              .backdrop_path,
                                          tvShowTopRatedList[index].name,
                                          tvShowTopRatedList[index]
                                              .first_air_date
                                              .toString(),
                                          tvShowTopRatedList[index]
                                              .vote_average,
                                          tvShowTopRatedList[index].vote_count,
                                          topRatedListItemTextEntryAnimationController,
                                        ),
                                      );
                                    } else if (index ==
                                        topRatedCurrentPage.floor() + 1) {
                                      backAnticipatedListItemChangeAnimationController
                                              .value =
                                          1 - (index - topRatedCurrentPage);

                                      return Opacity(
                                        opacity:
                                            backAnticipatedListItemChangeAnimation
                                                .value,
                                        child: Transform.scale(
                                          scale:
                                              backAnticipatedListItemChangeAnimation
                                                  .value,
                                          child: buildTvShowMainListItems(
                                            tvShowTopRatedList[index].id,
                                            tvShowTopRatedList[index]
                                                .backdrop_path,
                                            tvShowTopRatedList[index].name,
                                            tvShowTopRatedList[index]
                                                .first_air_date
                                                .toString(),
                                            tvShowTopRatedList[index]
                                                .vote_average,
                                            tvShowTopRatedList[index]
                                                .vote_count,
                                            topRatedListItemTextEntryAnimationController,
                                          ),
                                        ),
                                      );
                                    } else {
                                      return Transform.scale(
                                        scale: 0.75,
                                        child: buildTvShowMainListItems(
                                          tvShowTopRatedList[index].id,
                                          tvShowTopRatedList[index]
                                              .backdrop_path,
                                          tvShowTopRatedList[index].name,
                                          tvShowTopRatedList[index]
                                              .first_air_date
                                              .toString(),
                                          tvShowTopRatedList[index]
                                              .vote_average,
                                          tvShowTopRatedList[index].vote_count,
                                          topRatedListItemTextEntryAnimationController,
                                        ),
                                      );
                                    }
                                  },
                                  itemCount: tvShowTopRatedList.length,
                                ),
                              ),
                            ),
                          ),
                        ),
                      );
                    },
                  ),
            Container(
              height: 1.0,
              margin: EdgeInsets.only(bottom: 10.0),
              decoration: BoxDecoration(
                boxShadow: [
                  BoxShadow(
                    color: Colors.black,
                  ),
                ],
              ),
            ),
            Container(
              margin: EdgeInsets.only(
                top: 10.0,
                left: 10.0,
                bottom: 10.0,
                right: 15.0,
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
                  AnimatedBuilder(
                    animation: mainPageTextEntryAnimationController,
                    builder: (context, wdiget) {
                      return Text(
                        "Upcoming",
                        textAlign: TextAlign.start,
                        style: TextStyle(
                          decoration: TextDecoration.none,
                          fontSize: 18,
                          fontFamily: 'ConcertOne-Regular',
                          fontWeight: FontWeight.w500,
                          letterSpacing: 0.3,
                          color: Colors.black.withOpacity(
                              mainPageTextEntryAnimationController.value),
                        ),
                      );
                    },
                  ),
                  Expanded(
                    child: Container(
                      margin: EdgeInsets.only(top: 10.0),
                      child: Text(
                        "View more >",
                        textAlign: TextAlign.end,
                        style: TextStyle(
                          decoration: TextDecoration.none,
                          fontSize: 14,
                          fontFamily: 'ConcertOne-Regular',
                          fontWeight: FontWeight.w100,
                          color: Colors.white.withOpacity(0.0),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
            tvShowReleasingTodayList == null ||
                    tvShowReleasingTodayList.length == 0
                ? Container(
                    height: 200,
                    color: Colors.transparent,
                    child: Center(
                      child: LoadingBarIndicator(
                        numberOfBars: 5,
                        colors: _colors,
                        barSpacing: 5.0,
                        beginTweenValue: 10.0,
                        endTweenValue: 15.0,
                      ),
                    ),
                  )
                : AnimatedBuilder(
                    animation: listItemEntryAnimationController,
                    builder: (context, widget) {
                      return Opacity(
                        opacity: listItemEntryAnimationController.value,
                        child: Transform(
                          transform: Matrix4.identity()
                            ..setEntry(
                                3,
                                0,
                                0.006 *
                                    (1 -
                                        listItemEntryAnimationController
                                            .value)),
                          child: Transform.translate(
                            offset: Offset(
                                screenWidth *
                                    (1 -
                                        listItemEntryAnimationController.value),
                                0.0),
                            child: Container(
                              height: 250,
                              color: Colors.white,
                              child: PageStorage(
                                bucket: storageBucket,
                                child: PageView.builder(
                                  key: PageStorageKey("index1_releasing_today"),
                                  controller: releasingTodayPageController,
                                  scrollDirection: Axis.horizontal,
                                  physics: BouncingScrollPhysics(),
                                  onPageChanged: (index) {
                                    releasingTodayListItemTextEntryAnimationController
                                        .reset();
                                    releasingTodayListItemTextEntryAnimationController
                                        .forward();
                                  },
                                  itemBuilder: (context, index) {
                                    if (index ==
                                        releasingTodayCurrentPage.floor()) {
                                      frontUpcomingListItemChangeAnimationController
                                              .value =
                                          (releasingTodayCurrentPage - index);

                                      return Transform.scale(
                                        scale:
                                            frontUpcomingListItemChangeAnimation
                                                .value,
                                        child: buildTvShowMainListItems(
                                          tvShowNowPlayingList[index].id,
                                          tvShowReleasingTodayList[index]
                                              .backdrop_path,
                                          tvShowReleasingTodayList[index].name,
                                          tvShowReleasingTodayList[index]
                                              .first_air_date
                                              .toString(),
                                          tvShowReleasingTodayList[index]
                                              .vote_average,
                                          tvShowReleasingTodayList[index]
                                              .vote_count,
                                          releasingTodayListItemTextEntryAnimationController,
                                        ),
                                      );
                                    } else if (index ==
                                        releasingTodayCurrentPage.floor() + 1) {
                                      backUpcomingListItemChangeAnimationController
                                              .value =
                                          1 -
                                              (index -
                                                  releasingTodayCurrentPage);

                                      return Opacity(
                                        opacity:
                                            backUpcomingListItemChangeAnimation
                                                .value,
                                        child: Transform.scale(
                                          scale:
                                              backUpcomingListItemChangeAnimation
                                                  .value,
                                          child: buildTvShowMainListItems(
                                            tvShowNowPlayingList[index].id,
                                            tvShowReleasingTodayList[index]
                                                .backdrop_path,
                                            tvShowReleasingTodayList[index]
                                                .name,
                                            tvShowReleasingTodayList[index]
                                                .first_air_date
                                                .toString(),
                                            tvShowReleasingTodayList[index]
                                                .vote_average,
                                            tvShowReleasingTodayList[index]
                                                .vote_count,
                                            releasingTodayListItemTextEntryAnimationController,
                                          ),
                                        ),
                                      );
                                    } else {
                                      return Transform.scale(
                                        scale: 0.75,
                                        child: buildTvShowMainListItems(
                                          tvShowNowPlayingList[index].id,
                                          tvShowReleasingTodayList[index]
                                              .backdrop_path,
                                          tvShowReleasingTodayList[index].name,
                                          tvShowReleasingTodayList[index]
                                              .first_air_date
                                              .toString(),
                                          tvShowReleasingTodayList[index]
                                              .vote_average,
                                          tvShowReleasingTodayList[index]
                                              .vote_count,
                                          releasingTodayListItemTextEntryAnimationController,
                                        ),
                                      );
                                    }
                                  },
                                  itemCount: tvShowReleasingTodayList.length,
                                ),
                              ),
                            ),
                          ),
                        ),
                      );
                    },
                  ),
            Container(
              height: 1.0,
              margin: EdgeInsets.only(bottom: 10.0),
              decoration: BoxDecoration(
                boxShadow: [
                  BoxShadow(
                    color: Colors.black,
                  ),
                ],
              ),
            ),
            Container(
              margin: EdgeInsets.only(
                top: 10.0,
                left: 10.0,
                bottom: 10.0,
                right: 15.0,
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
                  AnimatedBuilder(
                    animation: mainPageTextEntryAnimationController,
                    builder: (context, wdiget) {
                      return Text(
                        "Now Playing",
                        textAlign: TextAlign.start,
                        style: TextStyle(
                          decoration: TextDecoration.none,
                          fontSize: 18,
                          fontFamily: 'ConcertOne-Regular',
                          fontWeight: FontWeight.w500,
                          letterSpacing: 0.2,
                          color: Colors.black.withOpacity(
                              mainPageTextEntryAnimationController.value),
                        ),
                      );
                    },
                  ),
                  Expanded(
                    child: Container(
                      margin: EdgeInsets.only(top: 10.0),
                      child: Text(
                        "View more >",
                        textAlign: TextAlign.end,
                        style: TextStyle(
                          decoration: TextDecoration.none,
                          fontSize: 14,
                          fontFamily: 'ConcertOne-Regular',
                          fontWeight: FontWeight.w100,
                          color: Colors.white.withOpacity(0.0),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
            tvShowNowPlayingList == null || tvShowNowPlayingList.length == 0
                ? Container(
                    height: 200,
                    color: Colors.transparent,
                    child: Center(
                      child: LoadingBarIndicator(
                        numberOfBars: 5,
                        colors: _colors,
                        barSpacing: 5.0,
                        beginTweenValue: 10.0,
                        endTweenValue: 15.0,
                      ),
                    ),
                  )
                : AnimatedBuilder(
                    animation: listItemEntryAnimationController,
                    builder: (context, widget) {
                      return Opacity(
                        opacity: listItemEntryAnimationController.value,
                        child: Transform(
                          transform: Matrix4.identity()
                            ..setEntry(
                                3,
                                0,
                                0.006 *
                                    (1 -
                                        listItemEntryAnimationController
                                            .value)),
                          child: Transform.translate(
                            offset: Offset(
                                screenWidth *
                                    (1 -
                                        listItemEntryAnimationController.value),
                                0.0),
                            child: Container(
                              height: 260,
                              color: Colors.white,
                              child: PageStorage(
                                bucket: storageBucket,
                                child: PageView.builder(
                                  key: PageStorageKey("index1_now_playing"),
                                  controller: nowPlayingPageController,
                                  scrollDirection: Axis.horizontal,
                                  physics: BouncingScrollPhysics(),
                                  onPageChanged: (index) {
                                    nowPlayingListItemTextEntryAnimationController
                                        .reset();
                                    nowPlayingListItemTextEntryAnimationController
                                        .forward();
                                  },
                                  itemBuilder: (context, index) {
                                    if (index ==
                                        nowPlayingCurrentPage.floor()) {
                                      frontNowPlayingItemChangeAnimationController
                                              .value =
                                          (nowPlayingCurrentPage - index);

                                      return Transform.scale(
                                        scale:
                                            frontNowPlayingListItemChangeAnimation
                                                .value,
                                        child: buildTvShowMainListItems(
                                          tvShowNowPlayingList[index].id,
                                          tvShowNowPlayingList[index]
                                              .backdrop_path,
                                          tvShowNowPlayingList[index].name,
                                          tvShowNowPlayingList[index]
                                              .first_air_date
                                              .toString(),
                                          tvShowNowPlayingList[index]
                                              .vote_average,
                                          tvShowNowPlayingList[index]
                                              .vote_count,
                                          nowPlayingListItemTextEntryAnimationController,
                                        ),
                                      );
                                    } else if (index ==
                                        nowPlayingCurrentPage.floor() + 1) {
                                      backNowPlayingListItemChangeAnimationController
                                              .value =
                                          1 - (index - nowPlayingCurrentPage);

                                      return Opacity(
                                        opacity:
                                            backNowPlayingListItemChangeAnimation
                                                .value,
                                        child: Transform.scale(
                                          scale:
                                              backNowPlayingListItemChangeAnimation
                                                  .value,
                                          child: buildTvShowMainListItems(
                                            tvShowNowPlayingList[index].id,
                                            tvShowNowPlayingList[index]
                                                .backdrop_path,
                                            tvShowNowPlayingList[index].name,
                                            tvShowNowPlayingList[index]
                                                .first_air_date
                                                .toString(),
                                            tvShowNowPlayingList[index]
                                                .vote_average,
                                            tvShowNowPlayingList[index]
                                                .vote_count,
                                            nowPlayingListItemTextEntryAnimationController,
                                          ),
                                        ),
                                      );
                                    } else {
                                      return Transform.scale(
                                        scale: 0.75,
                                        child: buildTvShowMainListItems(
                                          tvShowNowPlayingList[index].id,
                                          tvShowNowPlayingList[index]
                                              .backdrop_path,
                                          tvShowNowPlayingList[index].name,
                                          tvShowNowPlayingList[index]
                                              .first_air_date
                                              .toString(),
                                          tvShowNowPlayingList[index]
                                              .vote_average,
                                          tvShowNowPlayingList[index]
                                              .vote_count,
                                          nowPlayingListItemTextEntryAnimationController,
                                        ),
                                      );
                                    }
                                  },
                                  itemCount: tvShowNowPlayingList.length,
                                ),
                              ),
                            ),
                          ),
                        ),
                      );
                    },
                  ),
          ],
        ),
      ),
    );

    return pageStorageList[currentPage];
  }

  Widget buildTvShowMainListItems(
    int id,
    String imageUrl,
    String name,
    String releaseDate,
    double rating,
    int voteCount,
    AnimationController _animationController,
  ) {
    String newName = name == null || name == "" || name.length <= 0
        ? ""
        : name.length > 15 ? name.substring(0, 15) + "..." : name;

    String formatReleaseDate = releaseDate != null && releaseDate != ""
        ? releaseDate.replaceAll(
            RegExp(
              "-",
              caseSensitive: false,
            ),
            "")
        : "";

    var dateTime = DateTime.parse(
        releaseDate != null && releaseDate != "" ? formatReleaseDate : "");

    var newReleaseDate = DateFormat.formatDate(
        dateTime, [DateFormat.dd, " ", DateFormat.M, " ", DateFormat.yyyy]);

    return GestureDetector(
      onTap: () {
        Navigator.push(
          context,
          NewPageTransition(
            widget: TvShowDetails(
              tvShowId: id,
            ),
          ),
        );
      },
      child: Container(
        margin: EdgeInsets.only(
          bottom: 20.0,
          top: 10.0,
        ),
        child: Stack(
          children: <Widget>[
            Align(
              alignment: Alignment.topCenter,
              child: Container(
                height: 250.0,
                width: screenWidth - 30,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.all(
                    Radius.circular(10.0),
                  ),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.grey,
                      spreadRadius: 2.0,
                      blurRadius: 5.0,
                    ),
                  ],
                  color: Colors.white,
                ),
                child: AnimatedBuilder(
                  animation: _animationController,
                  builder: (context, wdiget) {
                    return Stack(
                      children: <Widget>[
                        Align(
                          alignment: Alignment.topRight,
                          child: CircleSlider(
                            backgroundColor: Colors.white,
                            backgroundMargin: EdgeInsets.all(0.0),
                            backgroundBorderRadius: BorderRadius.all(
                              Radius.circular(
                                10.0,
                              ),
                            ),
                            width: 100,
                            height: 100,
                            sliderSize: 30.0,
                            sliderColor: Colors.deepPurple,
                            sliderPercentage: rating * 10,
                            sliderController: _animationController,
                          ),
                        ),
                        Align(
                          alignment: Alignment.bottomLeft,
                          child: Container(
                            width: screenWidth,
                            margin: EdgeInsets.only(
                              right: 20.0,
                              left: 15.0,
                              bottom: 20.0,
                            ),
                            child: Column(
                              children: <Widget>[
                                Expanded(
                                  child: Container(
                                    alignment: Alignment.bottomLeft,
                                    child: Text(
                                      newName,
                                      textAlign: TextAlign.start,
                                      maxLines: 1,
                                      style: TextStyle(
                                        fontFamily: "ConcertOne-Regular",
                                        color: Colors.black.withOpacity(
                                            _animationController.value),
                                        fontSize: 18,
                                      ),
                                    ),
                                  ),
                                ),
                                Container(
                                  alignment: Alignment.bottomLeft,
                                  margin: EdgeInsets.only(
                                    top: 7.0,
                                  ),
                                  child: Text(
                                    newReleaseDate,
                                    textAlign: TextAlign.start,
                                    maxLines: 1,
                                    style: TextStyle(
                                      color: Colors.black.withOpacity(
                                          _animationController.value),
                                      fontSize: 14,
                                      fontWeight: FontWeight.w300,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                        Align(
                          alignment: Alignment.bottomRight,
                          child: Container(
                            width: 90,
                            height: 70,
                            decoration: BoxDecoration(
                              color: Colors.white,
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.grey[400],
                                  spreadRadius: 0.0,
                                  blurRadius: 2.0,
                                ),
                              ],
                              borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(10.0),
                                bottomRight: Radius.circular(10.0),
                              ),
                            ),
                            child: Center(
                              child: Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: <Widget>[
                                  Container(
                                    child: Icon(
                                      Icons.favorite,
                                      color: Colors.red[700].withOpacity(
                                          _animationController.value),
                                    ),
                                  ),
                                  Container(
                                    margin: EdgeInsets.only(
                                      left: 5.0,
                                      right: 5.0,
                                      bottom: 5.0,
                                    ),
                                    child: Text(
                                      voteCount != null
                                          ? voteCount.toString()
                                          : "0",
                                      style: TextStyle(
                                        fontFamily: "ConcertOne-Regular",
                                        color: Colors.black.withOpacity(
                                          _animationController.value,
                                        ),
                                        fontSize: 16,
                                      ),
                                    ),
                                  )
                                ],
                              ),
                            ),
                          ),
                        ),
                      ],
                    );
                  },
                ),
              ),
            ),
            Align(
              alignment: Alignment.topLeft,
              child: Transform.translate(
                offset: Offset(-15.0, 5.0),
                child: Container(
                  transform: Matrix4.identity()..setEntry(3, 0, 0.0015),
                  width: double.infinity,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.all(
                      Radius.circular(5.0),
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.grey,
                        spreadRadius: 2,
                        blurRadius: 5.0,
                        offset: Offset(-4.0, 3.0),
                      ),
                    ],
                    color: Colors.white,
                  ),
                  child: ClipRRect(
                    borderRadius: BorderRadius.all(
                      Radius.circular(5.0),
                    ),
                    child: imageUrl == null || imageUrl == ""
                        ? Container(
                            height: 150.0,
                            color: Colors.grey,
                            child: Icon(
                              Icons.live_tv,
                              color: Colors.grey[100],
                              size: 80,
                            ),
                          )
                        : Image.network(
                            imageUrl,
                            fit: BoxFit.cover,
                          ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}















import 'dart:async';
import 'dart:convert';
import 'dart:math';

import 'package:diagonal/diagonal.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:http/http.dart' as http;
import 'package:vector_math/vector_math_64.dart' as VectorMath64;
import 'package:diagonal/diagonal.dart' as DiagonalView;
import 'package:date_format/date_format.dart' as DateFormat;

import 'zoomable_image_view.dart';
import 'person_details.dart';
import 'youtube_video_player_page.dart';
import 'tv_show_season_details.dart';

import 'Utils/KenBurnsView.dart';
import 'Utils/GetLanguageName.dart';
import 'Utils/NewPageTransition.dart';
import 'Utils/loading_bar_indicator.dart';

import 'Models/tv_show_created_by_model.dart';
import 'Models/tv_show_movie_videos_model.dart';
import 'Models/tv_show_movie_videos_results_model.dart';
import 'Models/tv_show_last_episode_to_air_model.dart';
import 'Models/tv_show_networks_model.dart';
import 'Models/tv_show_next_episode_to_air_model.dart';
import 'Models/tv_show_movie_production_companies_model.dart';
import 'Models/tv_show_seasons_model.dart';
import 'Models/tv_show_movie_genres_model.dart';
import 'Models/tv_show_details_model.dart';
import 'Models/tv_show_movie_images_model.dart';
import 'Models/youtube_video_details_items_content_details_model.dart';
import 'Models/youtube_video_details_model.dart';
import 'Models/tv_show_cast_and_crew_model.dart';
import 'Models/tv_show_cast_and_crew_cast_model.dart';
import 'Models/tv_show_cast_and_crew_crew_model.dart';

class TvShowDetails extends StatefulWidget {
  final int tvShowId;

  TvShowDetails({Key key, @required this.tvShowId}) : super(key: key);

  @override
  _TvShowDetailsState createState() => _TvShowDetailsState(tvShowId);
}

class _TvShowDetailsState extends State<TvShowDetails>
    with TickerProviderStateMixin {
  MediaQueryData mediaQueryData;

  double screenWidth;
  double screenHeight;

  int tvShowId;

  _TvShowDetailsState(this.tvShowId);

  var _colors = List<Color>();

  TvShowDetailsModel tvShowDetailsModel;
  TvShowLastEpisodeToAirModel tvShowLastEpisodeToAirModel;
  TvShowNextEpisodeToAirModel tvShowNextEpisodeToAirModel;
  List<TvShowCreatedByModel> tvShowCreatedByList;
  List<TvShowNetworksModel> tvShowNetworksList;
  List<TvShowMovieProductionCompaniesModel> tvShowProductionCompaniesList;
  List<TvShowSeasonsModel> tvShowSeasonsList;

  var tvShowImagesBackdropsList = List<String>();
  var tvShowImagesPostersList = List<String>();

  List<TvShowCastAndCrewCastModel> tvShowCastAndCrewCastList;
  List<TvShowCastAndCrewCrewModel> tvShowCastAndCrewCrewList;

  var tvShowYoutubeVideosResultsList = List<TvShowMovieVideosResultsModel>();
  var youtubeVideosDurationsList = List<String>();
  var tvShowDetailsList = Map<String, String>();
  var tvShowLastEdpisodeDetailsList = Map<String, String>();
  var tvShowNextEdpisodeDetailsList = Map<String, String>();

  StringBuffer languageStringBuffer = StringBuffer();
  StringBuffer countryStringBuffer = StringBuffer();
  StringBuffer genresStringBuffer = StringBuffer();

  var sliderItemDetailsList = List<Map<String, String>>();

  double defaultSlidingValue = 1.0 / 4.0;

  double currentSlidingValue = 1.0 / 4.0;

  int currentSliderIndex = 0;

  bool _animationStatus = false;

  AnimationController dragAnimationController;

  AnimationController sliderAnimationController;
  AnimationController sliderEntryAnimationController;
  AnimationController _sliderPageAnimationController;

  Animation<double> dragAnimation;
  Animation<double> cornerRadiusAnimation;
  Animation<double> colorOpacityAnimation;
  Animation<double> opacityAnimation;

  PageController mainSliderPageController;
  double mainSliderCurrentPage = 0.0;

  PageController createdByPageController = PageController();
  double createdByCurrentPage = 0.0;

  PageController castPageController = PageController();
  double castCurrentPage = 0.0;

  PageController crewPageController = PageController();
  double crewCurrentPage = 0.0;

  PageController networksPageController = PageController();
  double networksCurrentPage = 0.0;

  PageController productionCompaniesPageController = PageController();
  double productionCompaniesCurrentPage = 0.0;

  PageController seasonsPageController = PageController();
  double seasonsCurrentPage = 0.0;

  PageController videosPageController = PageController();
  double videosCurrentPage = 0.0;

  PageController backdropsPageController = PageController();
  double backdropsCurrentPage = 0.0;

  PageController postersPageController = PageController();
  double postersCurrentPage = 0.0;

  Timer tvShowImageVideoTimer;

  Future<String> fetchTvShowDetails() async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/$tvShowId?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});
    if (this.mounted) {
      setState(() {
        tvShowDetailsModel =
            TvShowDetailsModel.fromJson(json.decode(response.body));
        tvShowLastEpisodeToAirModel = tvShowDetailsModel.last_episode_to_air;
        tvShowNextEpisodeToAirModel = tvShowDetailsModel.next_episode_to_air;
        tvShowCreatedByList = tvShowDetailsModel.created_by;
        tvShowNetworksList = tvShowDetailsModel.networks;
        tvShowProductionCompaniesList = tvShowDetailsModel.production_companies;
        tvShowSeasonsList = tvShowDetailsModel.seasons;

        var translsatedLanguages = tvShowDetailsModel.languages;
        var originCountry = tvShowDetailsModel.origin_country;
        List<TvShowMovieGenresModel> genres = tvShowDetailsModel.genres;

        for (int i = 0; i < translsatedLanguages.length; i++) {
          if (tvShowDetailsModel.original_language != translsatedLanguages[i]) {
            if (i == tvShowDetailsModel.languages.length - 1) {
              languageStringBuffer.write(GetLanguage()
                  .getLanguageName(translsatedLanguages[i])['name']);
            } else {
              languageStringBuffer.write(GetLanguage()
                  .getLanguageName(translsatedLanguages[i])['name']);
              languageStringBuffer.write(",");
            }
          }
        }

        for (int i = 0; i < originCountry.length; i++) {
          if (i == tvShowDetailsModel.origin_country.length - 1) {
            countryStringBuffer.write(originCountry[i]);
          } else {
            countryStringBuffer.write(originCountry[i]);
            countryStringBuffer.write(",");
          }
        }

        for (int i = 0; i < genres.length; i++) {
          if (i == tvShowDetailsModel.genres.length - 1) {
            genresStringBuffer.write(genres[i].name);
          } else {
            genresStringBuffer.write(genres[i].name);
            genresStringBuffer.write(",");
          }
        }

        if (tvShowDetailsModel.episode_run_time != null &&
            tvShowDetailsModel.episode_run_time.length > 0) {
          tvShowDetailsList["Runtime"] = " : " +
              tvShowDetailsModel.episode_run_time[0].toString() +
              " min";
        }

        if (tvShowDetailsModel.original_name != "" &&
            tvShowDetailsModel.original_name != null) {
          tvShowDetailsList["Original Title"] =
              " : " + tvShowDetailsModel.original_name;
        }

        if (tvShowDetailsModel.origin_country.length > 0 &&
            tvShowDetailsModel.origin_country != null) {
          tvShowDetailsList["Original Country"] =
              " : " + countryStringBuffer.toString();
        }

        if (tvShowDetailsModel.original_language != "" &&
            tvShowDetailsModel.original_language != null) {
          tvShowDetailsList["Original Language"] = " : " +
              GetLanguage().getLanguageName(
                  tvShowDetailsModel.original_language)['name'];
        }

        if (tvShowDetailsModel.languages.length > 0 &&
            tvShowDetailsModel.languages != null) {
          tvShowDetailsList["Translated Languages"] =
              " : " + languageStringBuffer.toString();
        }

        if (tvShowDetailsModel.genres.length > 0 &&
            tvShowDetailsModel.genres != null) {
          tvShowDetailsList["Genres"] = " : " + genresStringBuffer.toString();
        }

        if (tvShowDetailsModel.status != "" &&
            tvShowDetailsModel.status != null) {
          tvShowDetailsList["Status"] = " : " + tvShowDetailsModel.status;
        }

        if (tvShowDetailsModel.type != "" && tvShowDetailsModel.type != null) {
          tvShowDetailsList["Type"] = " : " + tvShowDetailsModel.type;
        }
        if (tvShowDetailsModel.number_of_seasons != null) {
          tvShowDetailsList["Number of Seasons"] =
              " : " + tvShowDetailsModel.number_of_seasons.toString();
        }
        if (tvShowDetailsModel.number_of_episodes != null) {
          tvShowDetailsList["Number of Episodes"] =
              " : " + tvShowDetailsModel.number_of_episodes.toString();
        }
        if (tvShowDetailsModel.first_air_date != "" &&
            tvShowDetailsModel.first_air_date != null) {
          tvShowDetailsList["First Episode Released Date"] =
              " : " + tvShowDetailsModel.first_air_date;
        }
        if (tvShowDetailsModel.last_air_date != "" &&
            tvShowDetailsModel.last_air_date != null) {
          tvShowDetailsList["Last Episode Released Date"] =
              " : " + tvShowDetailsModel.last_air_date;
        }
        if (tvShowDetailsModel.next_episode_to_air != null) {
          tvShowDetailsList["Next Episode Release Date"] =
              " : " + tvShowDetailsModel.next_episode_to_air.air_date;
          if (tvShowNextEpisodeToAirModel.vote_average != null) {
            tvShowLastEdpisodeDetailsList["Average Rating"] = " : " +
                tvShowNextEpisodeToAirModel.vote_average.toString() +
                "/10";
          }
          if (tvShowNextEpisodeToAirModel.air_date != "" &&
              tvShowNextEpisodeToAirModel.air_date != null) {
            tvShowLastEdpisodeDetailsList["Release Date"] =
                " : " + tvShowNextEpisodeToAirModel.air_date;
          }
          if (tvShowNextEpisodeToAirModel.season_number != null) {
            tvShowLastEdpisodeDetailsList["Season"] =
                " : " + tvShowNextEpisodeToAirModel.season_number.toString();
          }
          if (tvShowNextEpisodeToAirModel.episode_number != null) {
            tvShowLastEdpisodeDetailsList["Episode"] =
                " : " + tvShowNextEpisodeToAirModel.episode_number.toString();
          }
        }
        if (tvShowDetailsModel.last_episode_to_air != null) {
          if (tvShowLastEpisodeToAirModel.vote_average != null) {
            tvShowLastEdpisodeDetailsList["Average Rating"] = " : " +
                tvShowLastEpisodeToAirModel.vote_average.toString() +
                "/10";
          }
          if (tvShowLastEpisodeToAirModel.air_date != "" &&
              tvShowLastEpisodeToAirModel.air_date != null) {
            tvShowLastEdpisodeDetailsList["Release Date"] =
                " : " + tvShowLastEpisodeToAirModel.air_date;
          }
          if (tvShowLastEpisodeToAirModel.season_number != null) {
            tvShowLastEdpisodeDetailsList["Season"] =
                " : " + tvShowLastEpisodeToAirModel.season_number.toString();
          }
          if (tvShowLastEpisodeToAirModel.episode_number != null) {
            tvShowLastEdpisodeDetailsList["Episode"] =
                " : " + tvShowLastEpisodeToAirModel.episode_number.toString();
          }
        }
      });
    }

    return "success";
  }

  Future fetchTvShowImagesAndVideos() async {
    var _sliderItemDetails = List<Map<String, String>>();

    TvShowMovieVideosModel tvShowVideosModel;
    TvShowMovieImagesModel tvShowImagesModel;

    final imageResponse = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/$tvShowId/images?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    final videoResponse = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/$tvShowId/videos?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    if (this.mounted) {
      setState(() {
        if (imageResponse.statusCode == 200) {
          tvShowImagesModel =
              TvShowMovieImagesModel.fromJson(json.decode(imageResponse.body));
        }

        if (videoResponse.statusCode == 200) {
          tvShowVideosModel =
              TvShowMovieVideosModel.fromJson(json.decode(videoResponse.body));
        }

        if (tvShowImagesModel != null &&
            tvShowImagesModel.backdrops.length > 0) {
          tvShowImagesBackdropsList =
              tvShowImagesModel.backdrops.map((i) => i.file_path).toList();

          tvShowImagesBackdropsList.shuffle();

          for (var tvShowImagesBackdrops in tvShowImagesBackdropsList) {
            if (tvShowImagesBackdrops != null && tvShowImagesBackdrops != "") {
              if (_sliderItemDetails.length < 2) {
                _sliderItemDetails
                    .add({"type": "image", "url": tvShowImagesBackdrops});
              } else {
                break;
              }
            }
          }

          if (_sliderItemDetails != null && _sliderItemDetails.length > 0) {
            sliderItemDetailsList.addAll(_sliderItemDetails);
            _sliderItemDetails.clear();
          }
        }

        if (tvShowImagesModel != null && tvShowImagesModel.posters.length > 0) {
          tvShowImagesPostersList =
              tvShowImagesModel.posters.map((i) => i.file_path).toList();

          tvShowImagesPostersList.shuffle();
        }

        if (tvShowVideosModel != null && tvShowVideosModel.results.length > 0) {
          var tvShowVideosResultsList = tvShowVideosModel.results;

          for (var i in tvShowVideosResultsList) {
            if (i.site == "YouTube") {
              tvShowYoutubeVideosResultsList.add(i);
            }
          }

          tvShowYoutubeVideosResultsList.shuffle();

          for (var tvShowVideosResults in tvShowYoutubeVideosResultsList) {
            if (tvShowVideosResults.name != null &&
                tvShowVideosResults.name != "") {
              if (_sliderItemDetails.length < 2) {
                String url =
                    "https://i3.ytimg.com/vi/${tvShowVideosResults.key}/maxresdefault.jpg";

                _sliderItemDetails.add(
                  {"type": "video", "url": url},
                );
              } else {
                break;
              }
            }
          }

          if (_sliderItemDetails != null && _sliderItemDetails.length > 0) {
            sliderItemDetailsList.addAll(_sliderItemDetails);
            _sliderItemDetails.clear();
          }

          if (sliderItemDetailsList != null &&
              sliderItemDetailsList.length > 0) {
            double sliderLength = sliderItemDetailsList.length.toDouble();

            defaultSlidingValue = 1.0 / sliderLength;
            currentSlidingValue = 1.0 / sliderLength;
          }
        }
      });
    }
  }

  @override
  void initState() {
    super.initState();

    this.fetchTvShowDetails();

    mainSliderPageController = PageController();
    mainSliderPageController.addListener(() {
      setState(() {
        mainSliderCurrentPage = mainSliderPageController.page;
      });
    });

    dragAnimationController = AnimationController(
      vsync: this,
      duration: Duration(seconds: 1),
    );

    dragAnimation =
        Tween(begin: 0.70, end: 0.30).animate(dragAnimationController);

    cornerRadiusAnimation =
        Tween(begin: 40.0, end: 0.0).animate(dragAnimationController);

    colorOpacityAnimation =
        Tween(begin: 0.0, end: 0.6).animate(dragAnimationController);

    opacityAnimation =
        Tween(begin: 0.0, end: 1.0).animate(dragAnimationController);

    sliderAnimationController = AnimationController(
      duration: Duration(seconds: 60),
      vsync: this,
    );
    sliderAnimationController.forward();

    sliderAnimationController.addStatusListener((status) {
      if (status == AnimationStatus.completed) {
        sliderAnimationController.reverse();
        setState(() {
          _animationStatus = true;
        });
      } else if (status == AnimationStatus.dismissed) {
        sliderAnimationController.forward();
        setState(() {
          _animationStatus = false;
        });
      }
    });

    sliderAnimationController.addListener(() {
      if (sliderAnimationController.value >= defaultSlidingValue) {
        if (_animationStatus) {
          if (sliderAnimationController.value <= currentSlidingValue) {
            if (this.mounted) {
              setState(
                () {
                  currentSlidingValue =
                      currentSlidingValue - defaultSlidingValue;
                  currentSliderIndex =
                      currentSliderIndex > 0 ? currentSliderIndex - 1 : 0;

                  if (mainSliderPageController.hasClients) {
                    mainSliderPageController.animateToPage(
                      currentSliderIndex,
                      duration: Duration(seconds: 1),
                      curve: Curves.easeInOutCubic,
                    );
                  }
                },
              );
            }
          }
        } else {
          if (sliderAnimationController.value > currentSlidingValue) {
            if (this.mounted) {
              setState(() {
                currentSlidingValue = currentSlidingValue + defaultSlidingValue;

                currentSliderIndex = currentSliderIndex + 1;

                if (mainSliderPageController.hasClients) {
                  mainSliderPageController.animateToPage(
                    currentSliderIndex,
                    duration: Duration(seconds: 1),
                    curve: Curves.easeInOutCubic,
                  );
                }
              });
            }
          }
        }
      }
    });

    sliderEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1000),
    );

    sliderEntryAnimationController.forward();

    _sliderPageAnimationController = AnimationController(
      vsync: this,
      duration: Duration(seconds: 1),
    );

    tvShowImageVideoTimer = Timer(Duration(seconds: 2), () {
      this.fetchTvShowImagesAndVideos();
    });

    createdByPageController.addListener(() {
      setState(() {
        createdByCurrentPage = createdByPageController.page;
      });
    });

    castPageController.addListener(() {
      setState(() {
        castCurrentPage = castPageController.page;
      });
    });

    crewPageController.addListener(() {
      setState(() {
        crewCurrentPage = crewPageController.page;
      });
    });

    networksPageController.addListener(() {
      setState(() {
        networksCurrentPage = networksPageController.page;
      });
    });

    productionCompaniesPageController.addListener(() {
      setState(() {
        productionCompaniesCurrentPage = productionCompaniesPageController.page;
      });
    });

    seasonsPageController.addListener(() {
      setState(() {
        seasonsCurrentPage = seasonsPageController.page;
      });
    });

    videosPageController.addListener(() {
      setState(() {
        videosCurrentPage = videosPageController.page;
      });
    });

    backdropsPageController.addListener(() {
      setState(() {
        backdropsCurrentPage = backdropsPageController.page;
      });
    });

    postersPageController.addListener(() {
      setState(() {
        postersCurrentPage = postersPageController.page;
      });
    });

    _colors.add(Colors.green);
    _colors.add(Colors.blue);
    _colors.add(Colors.yellow);
    _colors.add(Colors.purple);
    _colors.add(Colors.deepOrange);
  }

  @override
  void dispose() {
    if (tvShowImageVideoTimer != null && tvShowImageVideoTimer.isActive) {
      tvShowImageVideoTimer.cancel();
    }

    sliderAnimationController.dispose();
    sliderEntryAnimationController.dispose();
    _sliderPageAnimationController.dispose();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    mediaQueryData = MediaQuery.of(context);

    screenWidth = mediaQueryData.size.width;
    screenHeight = mediaQueryData.size.height;

    return Scaffold(
      backgroundColor: Colors.white,
      primary: false,
      body: tvShowDetailsModel == null
          ? Container(
              color: Colors.white,
              child: Center(
                child: LoadingBarIndicator(
                  numberOfBars: 5,
                  colors: _colors,
                  barSpacing: 5.0,
                  beginTweenValue: 20.0,
                  endTweenValue: 30.0,
                ),
              ),
            )
          : AnimatedBuilder(
              animation: dragAnimationController,
              builder: (context, widget) {
                return Stack(
                  fit: StackFit.expand,
                  children: <Widget>[
                    FractionallySizedBox(
                      alignment: Alignment.topCenter,
                      heightFactor: dragAnimation.value,
                      child: sliderItemDetailsList == null ||
                              sliderItemDetailsList.length <= 0
                          ? Icon(
                              Icons.live_tv,
                              size: 80.0,
                              color: Colors.white
                                  .withOpacity(opacityAnimation.value),
                            )
                          : PageView.builder(
                              physics: BouncingScrollPhysics(),
                              controller: mainSliderPageController,
                              itemBuilder: (context, index) {
                                if (sliderItemDetailsList[index]["url"] ==
                                        null ||
                                    sliderItemDetailsList[index]["url"] == "") {
                                  return Icon(
                                    Icons.live_tv,
                                    size: 80.0,
                                    color: Colors.white
                                        .withOpacity(opacityAnimation.value),
                                  );
                                }
                                return AnimatedBuilder(
                                  animation: sliderEntryAnimationController,
                                  builder: (context, widget) {
                                    return buildMainSliderListItems(
                                      sliderItemDetailsList[index],
                                      mainSliderCurrentPage,
                                      index,
                                    );
                                  },
                                );
                              },
                              itemCount: sliderItemDetailsList.length,
                            ),
                    ),
                    FractionallySizedBox(
                      alignment: Alignment.topCenter,
                      heightFactor: 1.0,
                      child: Stack(
                        fit: StackFit.expand,
                        children: <Widget>[
                          FractionallySizedBox(
                            alignment: Alignment.topCenter,
                            heightFactor: dragAnimation.value,
                            child: DiagonalView.Diagonal(
                              clipHeight: (dragAnimation.value * screenHeight),
                              position: Position.TOP_LEFT,
                              child: Container(
                                color: Colors.black.withOpacity(0.6),
                              ),
                            ),
                          ),
                          tvShowDetailsModel.poster_path == ""
                              ? Container(
                                  child: Icon(
                                    Icons.live_tv,
                                    color: Colors.white,
                                    size: 80,
                                  ),
                                )
                              : Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: <Widget>[
                                    Container(
                                      alignment: Alignment.topLeft,
                                      width: 150,
                                      height: 200,
                                      margin: EdgeInsets.only(
                                        top: (dragAnimation.value *
                                            (screenHeight / 3)),
                                        left: (dragAnimation.value * 15),
                                      ),
                                      decoration: BoxDecoration(
                                        borderRadius: BorderRadius.all(
                                            Radius.circular(10.0)),
                                        color: Colors.white,
                                        image: DecorationImage(
                                          image: NetworkImage(
                                            tvShowDetailsModel.poster_path,
                                          ),
                                          fit: BoxFit.cover,
                                        ),
                                      ),
                                    ),
                                    tvShowDetailsModel.name == "" ||
                                            tvShowDetailsModel.name == null
                                        ? Container()
                                        : Expanded(
                                            flex: 1,
                                            child: Container(
                                              height:
                                                  (dragAnimation.value * 20),
                                              alignment: Alignment.topLeft,
                                              margin: EdgeInsets.only(
                                                left:
                                                    (dragAnimation.value * 20),
                                                top: 5,
                                              ),
                                              child: Text(
                                                tvShowDetailsModel.name,
                                                textAlign: TextAlign.start,
                                                style: TextStyle(
                                                  fontSize: 18,
                                                  fontFamily:
                                                      "ConcertOne-Regular",
                                                  color: Colors.white,
                                                ),
                                              ),
                                            ),
                                          ),
                                    Expanded(
                                      flex: 1,
                                      child: Container(
                                        height: (dragAnimation.value * 20),
                                        alignment: Alignment.topLeft,
                                        margin: EdgeInsets.only(
                                          left: (dragAnimation.value * 20),
                                          top: 10,
                                        ),
                                        child: setPosterFooter(
                                            tvShowDetailsModel.first_air_date !=
                                                        null &&
                                                    tvShowDetailsModel
                                                            .first_air_date !=
                                                        ""
                                                ? tvShowDetailsModel
                                                    .first_air_date
                                                : "",
                                            tvShowDetailsModel
                                                            .episode_run_time !=
                                                        null &&
                                                    tvShowDetailsModel
                                                            .episode_run_time
                                                            .length >
                                                        0
                                                ? tvShowDetailsModel
                                                    .episode_run_time[0]
                                                : null),    
                                      ),
                                    ),
                                  ],
                                ),
                        ],
                      ),
                    ),
                    GestureDetector(
                      onVerticalDragUpdate: (dragDetails) {
                        double fractionalDragged =
                            dragDetails.primaryDelta / screenHeight;
                        dragAnimationController.value =
                            dragAnimationController.value -
                                (5 * fractionalDragged);
                      },
                      child: FractionallySizedBox(
                        alignment: Alignment.bottomCenter,
                        heightFactor: (1.05 - dragAnimation.value),
                        child: Container(
                          decoration: BoxDecoration(
                            color: Colors.transparent,
                            borderRadius: BorderRadius.only(
                              topRight:
                                  Radius.circular(cornerRadiusAnimation.value),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ],
                );
              },
            ),
    );
  }

  Widget setPosterFooter(String date, int runtime) {
    String formatReleaseDate = date != null && date != ""
        ? date.replaceAll(
            RegExp(
              "-",
              caseSensitive: false,
            ),
            "")
        : "";

    var dateTime =
        DateTime.parse(date != null && date != "" ? formatReleaseDate : "");

    var newReleaseDate = DateFormat.formatDate(
        dateTime, [DateFormat.dd, " ", DateFormat.M, " ", DateFormat.yyyy]);

    String newRuntime = runtime != null ? " . " + runtime.toString() + "m" : "";

    return Text(
      date == null || date == "" ? ""  : newReleaseDate + newRuntime,
      textAlign: TextAlign.start,
      style: TextStyle(
        fontSize: 18,
        fontFamily: "ConcertOne-Regular",
        color: Colors.black,
      ),
    );
  }

  Widget buildMainSliderListItems(Map<String, String> sliderDetails,
      double mainSliderCurrentPage, int index) {
    _sliderPageAnimationController.value = 1 - (mainSliderCurrentPage - index);

    if (index == mainSliderCurrentPage.floor()) {
      return Transform(
        transform: Matrix4.identity()
          ..setFromTranslationRotationScale(
            VectorMath64.Vector3(
              -screenWidth * (index - mainSliderCurrentPage),
              0.0,
              0.0,
            ),
            VectorMath64.Quaternion(
              0.0,
              0.0,
              0.0,
              0.0,
            ),
            VectorMath64.Vector3(
              1 - (mainSliderCurrentPage - index),
              1,
              1,
            ),
          ),
        child: buildSlideItems(sliderDetails),
      );
    } else if (index == mainSliderCurrentPage.floor() + 1) {
      return Transform(
        transform: Matrix4.identity()
          ..setEntry(3, 0, 0.006 * -(mainSliderCurrentPage - index)),
        child: buildSlideItems(sliderDetails),
      );
    } else {
      return Transform(
        transform: Matrix4.identity()
          ..setEntry(3, 2, 0.0006)
          ..rotateY(-(pi / 2) + _sliderPageAnimationController.value),
        child: buildSlideItems(sliderDetails),
      );
    }
  }

  Widget buildSlideItems(Map<String, String> sliderDetails) {
    return Container(
      decoration: BoxDecoration(
        image: DecorationImage(
          image: NetworkImage(
            sliderDetails["url"],
          ),
          fit: BoxFit.cover,
          colorFilter: ColorFilter.mode(
            Colors.white.withOpacity(colorOpacityAnimation.value),
            BlendMode.srcOver,
          ),
        ),
      ),
      child: Container(
        color: Colors.white
            .withOpacity(1.0 - sliderEntryAnimationController.value),
        child: sliderDetails["type"] == "video"
            ? Opacity(
                opacity: (1 - colorOpacityAnimation.value),
                child: Center(
                  child: Container(
                    margin: EdgeInsets.only(
                      bottom: 60.0,
                    ),
                    width: 50.0,
                    height: 50.0,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: Colors.black.withOpacity(0.6),
                    ),
                    child: InkWell(
                      child: Icon(
                        Icons.play_arrow,
                        color: Colors.white,
                        size: 35,
                      ),
                    ),
                  ),
                ),
              )
            : Container(),
      ),
    );
  }
}























import 'dart:async';
import 'dart:convert';
import 'dart:math';

import 'package:diagonal/diagonal.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:http/http.dart' as http;
import 'package:vector_math/vector_math_64.dart' as VectorMath64;
import 'package:diagonal/diagonal.dart' as DiagonalView;
import 'package:date_format/date_format.dart' as DateFormat;

import 'Utils/circle_slider.dart';
import 'zoomable_image_view.dart';
import 'person_details.dart';
import 'youtube_video_player_page.dart';
import 'tv_show_season_details.dart';

import 'Utils/KenBurnsView.dart';
import 'Utils/GetLanguageName.dart';
import 'Utils/NewPageTransition.dart';
import 'Utils/loading_bar_indicator.dart';

import 'Models/tv_show_created_by_model.dart';
import 'Models/tv_show_movie_videos_model.dart';
import 'Models/tv_show_movie_videos_results_model.dart';
import 'Models/tv_show_last_episode_to_air_model.dart';
import 'Models/tv_show_networks_model.dart';
import 'Models/tv_show_next_episode_to_air_model.dart';
import 'Models/tv_show_movie_production_companies_model.dart';
import 'Models/tv_show_seasons_model.dart';
import 'Models/tv_show_movie_genres_model.dart';
import 'Models/tv_show_details_model.dart';
import 'Models/tv_show_movie_images_model.dart';
import 'Models/youtube_video_details_items_content_details_model.dart';
import 'Models/youtube_video_details_model.dart';
import 'Models/tv_show_cast_and_crew_model.dart';
import 'Models/tv_show_cast_and_crew_cast_model.dart';
import 'Models/tv_show_cast_and_crew_crew_model.dart';

class TvShowDetails extends StatefulWidget {
  final int tvShowId;

  TvShowDetails({Key key, @required this.tvShowId}) : super(key: key);

  @override
  _TvShowDetailsState createState() => _TvShowDetailsState(tvShowId);
}

class _TvShowDetailsState extends State<TvShowDetails>
    with TickerProviderStateMixin {
  MediaQueryData mediaQueryData;

  double screenWidth;
  double screenHeight;

  int tvShowId;

  _TvShowDetailsState(this.tvShowId);

  var _colors = List<Color>();

  TvShowDetailsModel tvShowDetailsModel;
  TvShowLastEpisodeToAirModel tvShowLastEpisodeToAirModel;
  TvShowNextEpisodeToAirModel tvShowNextEpisodeToAirModel;
  List<TvShowCreatedByModel> tvShowCreatedByList;
  List<TvShowNetworksModel> tvShowNetworksList;
  List<TvShowMovieProductionCompaniesModel> tvShowProductionCompaniesList;
  List<TvShowSeasonsModel> tvShowSeasonsList;

  var tvShowImagesBackdropsList = List<String>();
  var tvShowImagesPostersList = List<String>();

  List<TvShowCastAndCrewCastModel> tvShowCastAndCrewCastList;
  List<TvShowCastAndCrewCrewModel> tvShowCastAndCrewCrewList;

  var tvShowYoutubeVideosResultsList = List<TvShowMovieVideosResultsModel>();
  var youtubeVideosDurationsList = List<String>();
  var tvShowDetailsList = Map<String, String>();
  var tvShowLastEdpisodeDetailsList = Map<String, String>();
  var tvShowNextEdpisodeDetailsList = Map<String, String>();

  StringBuffer languageStringBuffer = StringBuffer();
  StringBuffer countryStringBuffer = StringBuffer();
  StringBuffer genresStringBuffer = StringBuffer();

  var sliderItemDetailsList = List<Map<String, String>>();

  double defaultSlidingValue = 1.0 / 4.0;

  double currentSlidingValue = 1.0 / 4.0;

  int currentSliderIndex = 0;

  bool _animationStatus = false;

  AnimationController dragAnimationController;

  AnimationController sliderAnimationController;
  AnimationController sliderEntryAnimationController;
  AnimationController _sliderPageAnimationController;

  AnimationController entryAnimationController;

  Animation<double> dragAnimation;
  Animation<double> cornerRadiusAnimation;
  Animation<double> colorOpacityAnimation;
  Animation<double> opacityAnimation;

  PageController mainSliderPageController;
  double mainSliderCurrentPage = 0.0;

  PageController createdByPageController = PageController();
  double createdByCurrentPage = 0.0;

  PageController castPageController = PageController();
  double castCurrentPage = 0.0;

  PageController crewPageController = PageController();
  double crewCurrentPage = 0.0;

  PageController networksPageController = PageController();
  double networksCurrentPage = 0.0;

  PageController productionCompaniesPageController = PageController();
  double productionCompaniesCurrentPage = 0.0;

  PageController seasonsPageController = PageController();
  double seasonsCurrentPage = 0.0;

  PageController videosPageController = PageController();
  double videosCurrentPage = 0.0;

  PageController backdropsPageController = PageController();
  double backdropsCurrentPage = 0.0;

  PageController postersPageController = PageController();
  double postersCurrentPage = 0.0;

  Timer tvShowImageVideoTimer;

  Future<String> fetchTvShowDetails() async {
    final response = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/$tvShowId?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});
    if (this.mounted) {
      setState(() {
        tvShowDetailsModel =
            TvShowDetailsModel.fromJson(json.decode(response.body));
        tvShowLastEpisodeToAirModel = tvShowDetailsModel.last_episode_to_air;
        tvShowNextEpisodeToAirModel = tvShowDetailsModel.next_episode_to_air;
        tvShowCreatedByList = tvShowDetailsModel.created_by;
        tvShowNetworksList = tvShowDetailsModel.networks;
        tvShowProductionCompaniesList = tvShowDetailsModel.production_companies;
        tvShowSeasonsList = tvShowDetailsModel.seasons;

        var translsatedLanguages = tvShowDetailsModel.languages;
        var originCountry = tvShowDetailsModel.origin_country;
        List<TvShowMovieGenresModel> genres = tvShowDetailsModel.genres;

        for (int i = 0; i < translsatedLanguages.length; i++) {
          if (tvShowDetailsModel.original_language != translsatedLanguages[i]) {
            if (i == tvShowDetailsModel.languages.length - 1) {
              languageStringBuffer.write(GetLanguage()
                  .getLanguageName(translsatedLanguages[i])['name']);
            } else {
              languageStringBuffer.write(GetLanguage()
                  .getLanguageName(translsatedLanguages[i])['name']);
              languageStringBuffer.write(",");
            }
          }
        }

        for (int i = 0; i < originCountry.length; i++) {
          if (i == tvShowDetailsModel.origin_country.length - 1) {
            countryStringBuffer.write(originCountry[i]);
          } else {
            countryStringBuffer.write(originCountry[i]);
            countryStringBuffer.write(",");
          }
        }

        for (int i = 0; i < genres.length; i++) {
          if (i == tvShowDetailsModel.genres.length - 1) {
            genresStringBuffer.write(genres[i].name);
          } else {
            genresStringBuffer.write(genres[i].name);
            genresStringBuffer.write(",");
          }
        }

        if (tvShowDetailsModel.episode_run_time != null &&
            tvShowDetailsModel.episode_run_time.length > 0) {
          tvShowDetailsList["Runtime"] = " : " +
              tvShowDetailsModel.episode_run_time[0].toString() +
              " min";
        }

        if (tvShowDetailsModel.original_name != "" &&
            tvShowDetailsModel.original_name != null) {
          tvShowDetailsList["Original Title"] =
              " : " + tvShowDetailsModel.original_name;
        }

        if (tvShowDetailsModel.origin_country.length > 0 &&
            tvShowDetailsModel.origin_country != null) {
          tvShowDetailsList["Original Country"] =
              " : " + countryStringBuffer.toString();
        }

        if (tvShowDetailsModel.original_language != "" &&
            tvShowDetailsModel.original_language != null) {
          tvShowDetailsList["Original Language"] = " : " +
              GetLanguage().getLanguageName(
                  tvShowDetailsModel.original_language)['name'];
        }

        if (tvShowDetailsModel.languages.length > 0 &&
            tvShowDetailsModel.languages != null) {
          tvShowDetailsList["Translated Languages"] =
              " : " + languageStringBuffer.toString();
        }

        if (tvShowDetailsModel.genres.length > 0 &&
            tvShowDetailsModel.genres != null) {
          tvShowDetailsList["Genres"] = " : " + genresStringBuffer.toString();
        }

        if (tvShowDetailsModel.status != "" &&
            tvShowDetailsModel.status != null) {
          tvShowDetailsList["Status"] = " : " + tvShowDetailsModel.status;
        }

        if (tvShowDetailsModel.type != "" && tvShowDetailsModel.type != null) {
          tvShowDetailsList["Type"] = " : " + tvShowDetailsModel.type;
        }
        if (tvShowDetailsModel.number_of_seasons != null) {
          tvShowDetailsList["Number of Seasons"] =
              " : " + tvShowDetailsModel.number_of_seasons.toString();
        }
        if (tvShowDetailsModel.number_of_episodes != null) {
          tvShowDetailsList["Number of Episodes"] =
              " : " + tvShowDetailsModel.number_of_episodes.toString();
        }
        if (tvShowDetailsModel.first_air_date != "" &&
            tvShowDetailsModel.first_air_date != null) {
          tvShowDetailsList["First Episode Released Date"] =
              " : " + tvShowDetailsModel.first_air_date;
        }
        if (tvShowDetailsModel.last_air_date != "" &&
            tvShowDetailsModel.last_air_date != null) {
          tvShowDetailsList["Last Episode Released Date"] =
              " : " + tvShowDetailsModel.last_air_date;
        }
        if (tvShowDetailsModel.next_episode_to_air != null) {
          tvShowDetailsList["Next Episode Release Date"] =
              " : " + tvShowDetailsModel.next_episode_to_air.air_date;
          if (tvShowNextEpisodeToAirModel.vote_average != null) {
            tvShowLastEdpisodeDetailsList["Average Rating"] = " : " +
                tvShowNextEpisodeToAirModel.vote_average.toString() +
                "/10";
          }
          if (tvShowNextEpisodeToAirModel.air_date != "" &&
              tvShowNextEpisodeToAirModel.air_date != null) {
            tvShowLastEdpisodeDetailsList["Release Date"] =
                " : " + tvShowNextEpisodeToAirModel.air_date;
          }
          if (tvShowNextEpisodeToAirModel.season_number != null) {
            tvShowLastEdpisodeDetailsList["Season"] =
                " : " + tvShowNextEpisodeToAirModel.season_number.toString();
          }
          if (tvShowNextEpisodeToAirModel.episode_number != null) {
            tvShowLastEdpisodeDetailsList["Episode"] =
                " : " + tvShowNextEpisodeToAirModel.episode_number.toString();
          }
        }
        if (tvShowDetailsModel.last_episode_to_air != null) {
          if (tvShowLastEpisodeToAirModel.vote_average != null) {
            tvShowLastEdpisodeDetailsList["Average Rating"] = " : " +
                tvShowLastEpisodeToAirModel.vote_average.toString() +
                "/10";
          }
          if (tvShowLastEpisodeToAirModel.air_date != "" &&
              tvShowLastEpisodeToAirModel.air_date != null) {
            tvShowLastEdpisodeDetailsList["Release Date"] =
                " : " + tvShowLastEpisodeToAirModel.air_date;
          }
          if (tvShowLastEpisodeToAirModel.season_number != null) {
            tvShowLastEdpisodeDetailsList["Season"] =
                " : " + tvShowLastEpisodeToAirModel.season_number.toString();
          }
          if (tvShowLastEpisodeToAirModel.episode_number != null) {
            tvShowLastEdpisodeDetailsList["Episode"] =
                " : " + tvShowLastEpisodeToAirModel.episode_number.toString();
          }
        }
      });
    }

    return "success";
  }

  Future fetchTvShowImagesAndVideos() async {
    var _sliderItemDetails = List<Map<String, String>>();

    TvShowMovieVideosModel tvShowVideosModel;
    TvShowMovieImagesModel tvShowImagesModel;

    final imageResponse = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/$tvShowId/images?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    final videoResponse = await http.get(
        Uri.encodeFull(
            'https://api.themoviedb.org/3/tv/$tvShowId/videos?api_key=63e2f7bc00c513994d63c9be541a08d1'),
        headers: {"Accept": "application/json"});

    if (this.mounted) {
      setState(() {
        if (imageResponse.statusCode == 200) {
          tvShowImagesModel =
              TvShowMovieImagesModel.fromJson(json.decode(imageResponse.body));
        }

        if (videoResponse.statusCode == 200) {
          tvShowVideosModel =
              TvShowMovieVideosModel.fromJson(json.decode(videoResponse.body));
        }

        if (tvShowImagesModel != null &&
            tvShowImagesModel.backdrops.length > 0) {
          tvShowImagesBackdropsList =
              tvShowImagesModel.backdrops.map((i) => i.file_path).toList();

          tvShowImagesBackdropsList.shuffle();

          for (var tvShowImagesBackdrops in tvShowImagesBackdropsList) {
            if (tvShowImagesBackdrops != null && tvShowImagesBackdrops != "") {
              if (_sliderItemDetails.length < 2) {
                _sliderItemDetails
                    .add({"type": "image", "url": tvShowImagesBackdrops});
              } else {
                break;
              }
            }
          }

          if (_sliderItemDetails != null && _sliderItemDetails.length > 0) {
            sliderItemDetailsList.addAll(_sliderItemDetails);
            _sliderItemDetails.clear();
          }
        }

        if (tvShowImagesModel != null && tvShowImagesModel.posters.length > 0) {
          tvShowImagesPostersList =
              tvShowImagesModel.posters.map((i) => i.file_path).toList();

          tvShowImagesPostersList.shuffle();
        }

        if (tvShowVideosModel != null && tvShowVideosModel.results.length > 0) {
          var tvShowVideosResultsList = tvShowVideosModel.results;

          for (var i in tvShowVideosResultsList) {
            if (i.site == "YouTube") {
              tvShowYoutubeVideosResultsList.add(i);
            }
          }

          tvShowYoutubeVideosResultsList.shuffle();

          for (var tvShowVideosResults in tvShowYoutubeVideosResultsList) {
            if (tvShowVideosResults.name != null &&
                tvShowVideosResults.name != "") {
              if (_sliderItemDetails.length < 2) {
                String url =
                    "https://i3.ytimg.com/vi/${tvShowVideosResults.key}/maxresdefault.jpg";

                _sliderItemDetails.add(
                  {"type": "video", "url": url},
                );
              } else {
                break;
              }
            }
          }

          if (_sliderItemDetails != null && _sliderItemDetails.length > 0) {
            sliderItemDetailsList.addAll(_sliderItemDetails);
            _sliderItemDetails.clear();
          }

          if (sliderItemDetailsList != null &&
              sliderItemDetailsList.length > 0) {
            double sliderLength = sliderItemDetailsList.length.toDouble();

            defaultSlidingValue = 1.0 / sliderLength;
            currentSlidingValue = 1.0 / sliderLength;
          }
        }
      });
    }
  }

  @override
  void initState() {
    super.initState();

    this.fetchTvShowDetails();

    mainSliderPageController = PageController();
    mainSliderPageController.addListener(() {
      setState(() {
        mainSliderCurrentPage = mainSliderPageController.page;
      });
    });

    dragAnimationController = AnimationController(
      vsync: this,
      duration: Duration(seconds: 1),
    );

    dragAnimation =
        Tween(begin: 0.70, end: 0.30).animate(dragAnimationController);

    cornerRadiusAnimation =
        Tween(begin: 40.0, end: 0.0).animate(dragAnimationController);

    colorOpacityAnimation =
        Tween(begin: 0.0, end: 0.6).animate(dragAnimationController);

    opacityAnimation =
        Tween(begin: 0.0, end: 1.0).animate(dragAnimationController);

    sliderAnimationController = AnimationController(
      duration: Duration(seconds: 60),
      vsync: this,
    );
    sliderAnimationController.forward();

    sliderAnimationController.addStatusListener((status) {
      if (status == AnimationStatus.completed) {
        sliderAnimationController.reverse();
        setState(() {
          _animationStatus = true;
        });
      } else if (status == AnimationStatus.dismissed) {
        sliderAnimationController.forward();
        setState(() {
          _animationStatus = false;
        });
      }
    });

    sliderAnimationController.addListener(() {
      if (sliderAnimationController.value >= defaultSlidingValue) {
        if (_animationStatus) {
          if (sliderAnimationController.value <= currentSlidingValue) {
            if (this.mounted) {
              setState(
                () {
                  currentSlidingValue =
                      currentSlidingValue - defaultSlidingValue;
                  currentSliderIndex =
                      currentSliderIndex > 0 ? currentSliderIndex - 1 : 0;

                  if (mainSliderPageController.hasClients) {
                    mainSliderPageController.animateToPage(
                      currentSliderIndex,
                      duration: Duration(seconds: 1),
                      curve: Curves.easeInOutCubic,
                    );
                  }
                },
              );
            }
          }
        } else {
          if (sliderAnimationController.value > currentSlidingValue) {
            if (this.mounted) {
              setState(() {
                currentSlidingValue = currentSlidingValue + defaultSlidingValue;

                currentSliderIndex = currentSliderIndex + 1;

                if (mainSliderPageController.hasClients) {
                  mainSliderPageController.animateToPage(
                    currentSliderIndex,
                    duration: Duration(seconds: 1),
                    curve: Curves.easeInOutCubic,
                  );
                }
              });
            }
          }
        }
      }
    });

    sliderEntryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1000),
    );

    sliderEntryAnimationController.forward();

    _sliderPageAnimationController = AnimationController(
      vsync: this,
      duration: Duration(seconds: 1),
    );

    entryAnimationController = AnimationController(
      vsync: this,
      duration: Duration(seconds: 2),
    );

    tvShowImageVideoTimer = Timer(Duration(seconds: 2), () {
      this.fetchTvShowImagesAndVideos();
    });

    createdByPageController.addListener(() {
      setState(() {
        createdByCurrentPage = createdByPageController.page;
      });
    });

    castPageController.addListener(() {
      setState(() {
        castCurrentPage = castPageController.page;
      });
    });

    crewPageController.addListener(() {
      setState(() {
        crewCurrentPage = crewPageController.page;
      });
    });

    networksPageController.addListener(() {
      setState(() {
        networksCurrentPage = networksPageController.page;
      });
    });

    productionCompaniesPageController.addListener(() {
      setState(() {
        productionCompaniesCurrentPage = productionCompaniesPageController.page;
      });
    });

    seasonsPageController.addListener(() {
      setState(() {
        seasonsCurrentPage = seasonsPageController.page;
      });
    });

    videosPageController.addListener(() {
      setState(() {
        videosCurrentPage = videosPageController.page;
      });
    });

    backdropsPageController.addListener(() {
      setState(() {
        backdropsCurrentPage = backdropsPageController.page;
      });
    });

    postersPageController.addListener(() {
      setState(() {
        postersCurrentPage = postersPageController.page;
      });
    });

    _colors.add(Colors.green);
    _colors.add(Colors.blue);
    _colors.add(Colors.yellow);
    _colors.add(Colors.purple);
    _colors.add(Colors.deepOrange);
  }

  @override
  void dispose() {
    if (tvShowImageVideoTimer != null && tvShowImageVideoTimer.isActive) {
      tvShowImageVideoTimer.cancel();
    }
    dragAnimationController.dispose();
    sliderAnimationController.dispose();
    sliderEntryAnimationController.dispose();
    _sliderPageAnimationController.dispose();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    mediaQueryData = MediaQuery.of(context);

    screenWidth = mediaQueryData.size.width;
    screenHeight = mediaQueryData.size.height;

    return Scaffold(
      backgroundColor: Colors.white,
      primary: false,
      body: tvShowDetailsModel == null
          ? Container(
              color: Colors.white,
              child: Center(
                child: LoadingBarIndicator(
                  numberOfBars: 5,
                  colors: _colors,
                  barSpacing: 5.0,
                  beginTweenValue: 20.0,
                  endTweenValue: 30.0,
                ),
              ),
            )
          : AnimatedBuilder(
              animation: dragAnimationController,
              builder: (context, widget) {
                return Stack(
                  fit: StackFit.expand,
                  children: <Widget>[
                    FractionallySizedBox(
                      alignment: Alignment.topCenter,
                      heightFactor: dragAnimation.value,
                      child: sliderItemDetailsList == null ||
                              sliderItemDetailsList.length <= 0
                          ? Icon(
                              Icons.live_tv,
                              size: 80.0,
                              color: Colors.white
                                  .withOpacity(opacityAnimation.value),
                            )
                          : PageView.builder(
                              physics: BouncingScrollPhysics(),
                              controller: mainSliderPageController,
                              itemBuilder: (context, index) {
                                if (sliderItemDetailsList[index]["url"] ==
                                        null ||
                                    sliderItemDetailsList[index]["url"] == "") {
                                  return Icon(
                                    Icons.live_tv,
                                    size: 80.0,
                                    color: Colors.white
                                        .withOpacity(opacityAnimation.value),
                                  );
                                }
                                return AnimatedBuilder(
                                  animation: sliderEntryAnimationController,
                                  builder: (context, widget) {
                                    return buildMainSliderListItems(
                                      sliderItemDetailsList[index],
                                      mainSliderCurrentPage,
                                      index,
                                    );
                                  },
                                );
                              },
                              itemCount: sliderItemDetailsList.length,
                            ),
                    ),
                    FractionallySizedBox(
                      alignment: Alignment.topCenter,
                      heightFactor: 1.0,
                      child: Stack(
                        fit: StackFit.expand,
                        children: <Widget>[
                          FractionallySizedBox(
                            alignment: Alignment.topCenter,
                            heightFactor: dragAnimation.value,
                            child: DiagonalView.Diagonal(
                              clipHeight: (dragAnimation.value * screenHeight),
                              position: Position.TOP_LEFT,
                              child: Container(
                                color: Colors.black.withOpacity(0.6),
                              ),
                            ),
                          ),
                          tvShowDetailsModel.poster_path == ""
                              ? Container(
                                  child: Icon(
                                    Icons.live_tv,
                                    color: Colors.white,
                                    size: 80,
                                  ),
                                )
                              : Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: <Widget>[
                                    Container(
                                      alignment: Alignment.topLeft,
                                      width: 150,
                                      height: 200,
                                      margin: EdgeInsets.only(
                                        top: (dragAnimation.value *
                                            (screenHeight / 3)),
                                        left: (dragAnimation.value * 15),
                                      ),
                                      decoration: BoxDecoration(
                                        borderRadius: BorderRadius.all(
                                            Radius.circular(10.0)),
                                        color: Colors.white,
                                        image: DecorationImage(
                                          image: NetworkImage(
                                            tvShowDetailsModel.poster_path,
                                          ),
                                          fit: BoxFit.cover,
                                        ),
                                      ),
                                    ),
                                    tvShowDetailsModel.name == "" ||
                                            tvShowDetailsModel.name == null
                                        ? Container()
                                        : Expanded(
                                            flex: 1,
                                            child: Container(
                                              height:
                                                  (dragAnimation.value * 20),
                                              alignment: Alignment.topLeft,
                                              margin: EdgeInsets.only(
                                                left:
                                                    (dragAnimation.value * 20),
                                                top: 5,
                                              ),
                                              child: Text(
                                                tvShowDetailsModel.name,
                                                textAlign: TextAlign.start,
                                                style: TextStyle(
                                                  fontSize: 18,
                                                  fontFamily:
                                                      "ConcertOne-Regular",
                                                  color: Colors.white,
                                                ),
                                              ),
                                            ),
                                          ),
                                    Expanded(
                                      flex: 10,
                                      child: Container(
                                        height: (dragAnimation.value * 20),
                                        alignment: Alignment.topLeft,
                                        margin: EdgeInsets.only(
                                          left: (dragAnimation.value * 20),
                                        ),
                                        child: setPosterFooter(
                                            tvShowDetailsModel.first_air_date !=
                                                        null &&
                                                    tvShowDetailsModel
                                                            .first_air_date !=
                                                        ""
                                                ? tvShowDetailsModel
                                                    .first_air_date
                                                : ""),
                                      ),
                                    ),
                                  ],
                                ),
                        ],
                      ),
                    ),
                    GestureDetector(
                      onVerticalDragUpdate: (dragDetails) {
                        double fractionalDragged =
                            dragDetails.primaryDelta / screenHeight;
                        dragAnimationController.value =
                            dragAnimationController.value -
                                (5 * fractionalDragged);
                      },
                      child: FractionallySizedBox(
                        alignment: Alignment.bottomCenter,
                        heightFactor: (1 - dragAnimation.value),
                        child: Container(
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.only(
                              topRight:
                                  Radius.circular(cornerRadiusAnimation.value),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ],
                );
              },
            ),
    );
  }

  Widget setPosterFooter(String date) {
    String formatReleaseDate = date != null && date != ""
        ? date.replaceAll(
            RegExp(
              "-",
              caseSensitive: false,
            ),
            "")
        : "";

    var dateTime =
        DateTime.parse(date != null && date != "" ? formatReleaseDate : "");

    var newReleaseDate = DateFormat.formatDate(
        dateTime, [DateFormat.dd, " ", DateFormat.M, " ", DateFormat.yyyy]);

    return Text(
      date == null || date == "" ? "" : newReleaseDate,
      textAlign: TextAlign.start,
      style: TextStyle(
        fontSize: 15,
        color: Colors.white,
      ),
    );
  }

  Widget buildMainSliderListItems(Map<String, String> sliderDetails,
      double mainSliderCurrentPage, int index) {
    _sliderPageAnimationController.value = 1 - (mainSliderCurrentPage - index);

    if (index == mainSliderCurrentPage.floor()) {
      return Transform(
        transform: Matrix4.identity()
          ..setFromTranslationRotationScale(
            VectorMath64.Vector3(
              -screenWidth * (index - mainSliderCurrentPage),
              0.0,
              0.0,
            ),
            VectorMath64.Quaternion(
              0.0,
              0.0,
              0.0,
              0.0,
            ),
            VectorMath64.Vector3(
              1 - (mainSliderCurrentPage - index),
              1,
              1,
            ),
          ),
        child: buildSlideItems(sliderDetails),
      );
    } else if (index == mainSliderCurrentPage.floor() + 1) {
      return Transform(
        transform: Matrix4.identity()
          ..setEntry(3, 0, 0.006 * -(mainSliderCurrentPage - index)),
        child: buildSlideItems(sliderDetails),
      );
    } else {
      return Transform(
        transform: Matrix4.identity()
          ..setEntry(3, 2, 0.0006)
          ..rotateY(-(pi / 2) + _sliderPageAnimationController.value),
        child: buildSlideItems(sliderDetails),
      );
    }
  }

  Widget buildSlideItems(Map<String, String> sliderDetails) {
    return Container(
      decoration: BoxDecoration(
        image: DecorationImage(
          image: NetworkImage(
            sliderDetails["url"],
          ),
          fit: BoxFit.cover,
          colorFilter: ColorFilter.mode(
            Colors.white.withOpacity(colorOpacityAnimation.value),
            BlendMode.srcOver,
          ),
        ),
      ),
      child: Container(
        color: Colors.white
            .withOpacity(1.0 - sliderEntryAnimationController.value),
        child: sliderDetails["type"] == "video"
            ? Opacity(
                opacity: (1 - colorOpacityAnimation.value),
                child: Center(
                  child: Container(
                    margin: EdgeInsets.only(
                      bottom: 60.0,
                    ),
                    width: 50.0,
                    height: 50.0,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: Colors.black.withOpacity(0.6),
                    ),
                    child: InkWell(
                      child: Icon(
                        Icons.play_arrow,
                        color: Colors.white,
                        size: 35,
                      ),
                    ),
                  ),
                ),
              )
            : Container(),
      ),
    );
  }
}
